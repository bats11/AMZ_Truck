{
  "version": 3,
  "sources": ["../../../dev/core/src/Loading/sceneLoader.ts", "../../../dev/core/src/Meshes/instancedMesh.ts", "../../../dev/core/src/Lights/light.ts", "../../../dev/core/src/assetContainer.ts", "../../../dev/core/src/Misc/dataReader.ts", "../../../dev/core/src/Cameras/targetCamera.ts", "../../../dev/core/src/Cameras/cameraInputsManager.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraKeyboardMoveInput.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraMouseInput.ts", "../../../dev/core/src/Cameras/Inputs/BaseCameraMouseWheelInput.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraMouseWheelInput.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraTouchInput.ts", "../../../dev/core/src/Cameras/freeCameraInputsManager.ts", "../../../dev/core/src/Cameras/freeCamera.ts", "../../../dev/core/src/Animations/animationKey.ts", "../../../dev/core/src/Animations/animationRange.ts", "../../../dev/core/src/Animations/animation.ts", "../../../dev/core/src/Bones/bone.ts", "../../../dev/core/src/Engines/Extensions/engine.rawTexture.ts", "../../../dev/core/src/Materials/Textures/rawTexture.ts", "../../../dev/core/src/Bones/skeleton.ts", "../../../dev/core/src/Materials/shaderMaterial.ts", "../../../dev/core/src/Lights/hemisphericLight.ts", "../../../dev/core/src/Lights/shadowLight.ts", "../../../dev/core/src/Lights/directionalLight.ts", "../../../dev/core/src/Lights/pointLight.ts", "../../../dev/core/src/Lights/spotLight.ts", "../../../dev/core/src/Misc/deferred.ts", "../../../dev/core/src/Animations/animationGroup.ts", "../../../dev/core/src/Morph/morphTarget.ts", "../../../dev/core/src/Materials/Textures/rawTexture2DArray.ts", "../../../dev/core/src/Morph/morphTargetManager.ts", "../../../dev/core/src/Materials/Textures/cubeTexture.ts", "../../../dev/core/src/Materials/Textures/rawCubeTexture.ts", "../../../dev/core/src/Meshes/Compression/meshoptCompression.ts", "../../../dev/core/src/Meshes/Compression/dracoCompressionWorker.ts", "../../../dev/core/src/Meshes/Compression/dracoCompression.ts", "../../../dev/core/src/Animations/animationEvent.ts", "../../../dev/core/src/Audio/sound.ts", "../../../dev/core/src/Audio/weightedsound.ts", "../../../dev/core/src/FlowGraph/flowGraphConnection.ts", "../../../dev/core/src/FlowGraph/flowGraphInteger.ts", "../../../dev/core/src/FlowGraph/flowGraphRichTypes.ts", "../../../dev/core/src/FlowGraph/flowGraphDataConnection.ts", "../../../dev/core/src/FlowGraph/serialization.ts", "../../../dev/core/src/FlowGraph/flowGraphBlock.ts", "../../../dev/core/src/FlowGraph/flowGraphSignalConnection.ts", "../../../dev/core/src/FlowGraph/flowGraphExecutionBlock.ts", "../../../dev/core/src/FlowGraph/flowGraphAsyncExecutionBlock.ts", "../../../dev/core/src/FlowGraph/flowGraphEventBlock.ts", "../../../dev/core/src/FlowGraph/flowGraphContext.ts", "../../../dev/core/src/FlowGraph/utils.ts", "../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphMeshPickEventBlock.ts", "../../../dev/core/src/FlowGraph/flowGraph.ts", "../../../dev/core/src/FlowGraph/flowGraphCoordinator.ts", "../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneReadyEventBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneTickEventBlock.ts", "../../../dev/core/src/FlowGraph/flowGraphExecutionBlockWithOutSignal.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphConsoleLogBlock.ts", "../../../dev/core/src/Misc/timer.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphTimerBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSendCustomEventBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphReceiveCustomEventBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSequenceBlock.ts", "../../../dev/core/src/FlowGraph/flowGraphPathConverterComponent.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetPropertyBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetPropertyBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphCachedOperationBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphBinaryOperationBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphConstantOperationBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphUnaryOperationBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphTernaryOperationBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphMathBlocks.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDoNBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetVariableBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetVariableBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWhileLoopBlock.ts", "../../../dev/core/src/Meshes/thinInstanceMesh.ts"],
  "sourcesContent": ["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { AnimationGroup } from \"../Animations/animationGroup\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SceneLoaderFlags } from \"./sceneLoaderFlags\";\r\nimport type { IFileRequest } from \"../Misc/fileRequest\";\r\nimport type { WebRequest } from \"../Misc/webRequest\";\r\nimport type { LoadFileError } from \"../Misc/fileTools\";\r\nimport { IsBase64DataUrl } from \"../Misc/fileTools\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\n\r\n/**\r\n * Type used for the success callback of ImportMesh\r\n */\r\nexport type SceneLoaderSuccessCallback = (\r\n    meshes: AbstractMesh[],\r\n    particleSystems: IParticleSystem[],\r\n    skeletons: Skeleton[],\r\n    animationGroups: AnimationGroup[],\r\n    transformNodes: TransformNode[],\r\n    geometries: Geometry[],\r\n    lights: Light[],\r\n    spriteManagers: ISpriteManager[]\r\n) => void;\r\n\r\n/**\r\n * Interface used for the result of ImportMeshAsync\r\n */\r\nexport interface ISceneLoaderAsyncResult {\r\n    /**\r\n     * The array of loaded meshes\r\n     */\r\n    readonly meshes: AbstractMesh[];\r\n\r\n    /**\r\n     * The array of loaded particle systems\r\n     */\r\n    readonly particleSystems: IParticleSystem[];\r\n\r\n    /**\r\n     * The array of loaded skeletons\r\n     */\r\n    readonly skeletons: Skeleton[];\r\n\r\n    /**\r\n     * The array of loaded animation groups\r\n     */\r\n    readonly animationGroups: AnimationGroup[];\r\n\r\n    /**\r\n     * The array of loaded transform nodes\r\n     */\r\n    readonly transformNodes: TransformNode[];\r\n\r\n    /**\r\n     * The array of loaded geometries\r\n     */\r\n    readonly geometries: Geometry[];\r\n\r\n    /**\r\n     * The array of loaded lights\r\n     */\r\n    readonly lights: Light[];\r\n\r\n    /**\r\n     * The array of loaded sprite managers\r\n     */\r\n    readonly spriteManagers: ISpriteManager[];\r\n}\r\n\r\n/**\r\n * Interface used to represent data loading progression\r\n */\r\nexport interface ISceneLoaderProgressEvent {\r\n    /**\r\n     * Defines if data length to load can be evaluated\r\n     */\r\n    readonly lengthComputable: boolean;\r\n\r\n    /**\r\n     * Defines the loaded data length\r\n     */\r\n    readonly loaded: number;\r\n\r\n    /**\r\n     * Defines the data length to load\r\n     */\r\n    readonly total: number;\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugins to define supported file extensions\r\n */\r\nexport interface ISceneLoaderPluginExtensions {\r\n    /**\r\n     * Defines the list of supported extensions\r\n     */\r\n    [extension: string]: {\r\n        isBinary: boolean;\r\n    };\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugin factory\r\n */\r\nexport interface ISceneLoaderPluginFactory {\r\n    /**\r\n     * Defines the name of the factory\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Function called to create a new plugin\r\n     * @returns the new plugin\r\n     */\r\n    createPlugin(): ISceneLoaderPlugin | ISceneLoaderPluginAsync;\r\n\r\n    /**\r\n     * The callback that returns true if the data can be directly loaded.\r\n     * @param data string containing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    canDirectLoad?(data: string): boolean;\r\n}\r\n\r\n/**\r\n * Interface used to define the base of ISceneLoaderPlugin and ISceneLoaderPluginAsync\r\n */\r\nexport interface ISceneLoaderPluginBase {\r\n    /**\r\n     * The friendly name of this plugin.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The file extensions supported by this plugin.\r\n     */\r\n    extensions: string | ISceneLoaderPluginExtensions;\r\n\r\n    /**\r\n     * The callback called when loading from a url.\r\n     * @param scene scene loading this url\r\n     * @param fileOrUrl file or url to load\r\n     * @param rootUrl root url to use to load assets\r\n     * @param onSuccess callback called when the file successfully loads\r\n     * @param onProgress callback called while file is loading (if the server supports this mode)\r\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n     * @param onError callback called when the file fails to load\r\n     * @param name defines the name of the file when loading a binary file\r\n     * @returns a file request object\r\n     */\r\n    loadFile?(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: any, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest>;\r\n\r\n    /**\r\n     * The callback that returns true if the data can be directly loaded.\r\n     * @param data string containing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    canDirectLoad?(data: string): boolean;\r\n\r\n    /**\r\n     * The callback that returns the data to pass to the plugin if the data can be directly loaded.\r\n     * @param scene scene loading this data\r\n     * @param data string containing the data\r\n     * @returns data to pass to the plugin\r\n     */\r\n    directLoad?(scene: Scene, data: string): any;\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n}\r\n\r\n/**\r\n * Interface used to define a SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPlugin extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @param particleSystems The particle systems array to import into\r\n     * @param skeletons The skeletons array to import into\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    importMesh(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: any,\r\n        rootUrl: string,\r\n        meshes: AbstractMesh[],\r\n        particleSystems: IParticleSystem[],\r\n        skeletons: Skeleton[],\r\n        onError?: (message: string, exception?: any) => void\r\n    ): boolean;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    load(scene: Scene, data: any, rootUrl: string, onError?: (message: string, exception?: any) => void): boolean;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainer(scene: Scene, data: any, rootUrl: string, onError?: (message: string, exception?: any) => void): AssetContainer;\r\n}\r\n\r\n/**\r\n * Interface used to define an async SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPluginAsync extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded objects (e.g. meshes, particle systems, skeletons, animation groups, etc.)\r\n     */\r\n    importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: any,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult>;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns Nothing\r\n     */\r\n    loadAsync(scene: Scene, data: any, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void>;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainerAsync(scene: Scene, data: any, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<AssetContainer>;\r\n}\r\n\r\n/**\r\n * Mode that determines how to handle old animation groups before loading new ones.\r\n */\r\nexport enum SceneLoaderAnimationGroupLoadingMode {\r\n    /**\r\n     * Reset all old animations to initial state then dispose them.\r\n     */\r\n    Clean = 0,\r\n\r\n    /**\r\n     * Stop all old animations.\r\n     */\r\n    Stop = 1,\r\n\r\n    /**\r\n     * Restart old animations from first frame.\r\n     */\r\n    Sync = 2,\r\n\r\n    /**\r\n     * Old animations remains untouched.\r\n     */\r\n    NoSync = 3,\r\n}\r\n\r\n/**\r\n * Defines a plugin registered by the SceneLoader\r\n */\r\ninterface IRegisteredPlugin {\r\n    /**\r\n     * Defines the plugin to use\r\n     */\r\n    plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory;\r\n    /**\r\n     * Defines if the plugin supports binary data\r\n     */\r\n    isBinary: boolean;\r\n}\r\n\r\n/**\r\n * Defines file information\r\n */\r\ninterface IFileInfo {\r\n    /**\r\n     * Gets the file url\r\n     */\r\n    url: string;\r\n    /**\r\n     * Gets the root url\r\n     */\r\n    rootUrl: string;\r\n    /**\r\n     * Gets filename\r\n     */\r\n    name: string;\r\n    /**\r\n     * Gets the file\r\n     */\r\n    file: Nullable<File>;\r\n\r\n    /**\r\n     * Gets raw binary data.\r\n     */\r\n    rawData: Nullable<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * Class used to load scene from various file formats using registered plugins\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\r\n */\r\nexport class SceneLoader {\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly NO_LOGGING = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly MINIMAL_LOGGING = Constants.SCENELOADER_MINIMAL_LOGGING;\r\n\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SUMMARY_LOGGING = Constants.SCENELOADER_SUMMARY_LOGGING;\r\n\r\n    /**\r\n     * Detailed logging while loading\r\n     */\r\n    public static readonly DETAILED_LOGGING = Constants.SCENELOADER_DETAILED_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags.ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags.ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags.ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags.ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags.loggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags.loggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags.CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags.CleanBoneMatrixWeights = value;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Event raised when a plugin is used to load a scene\r\n     */\r\n    public static OnPluginActivatedObservable = new Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>();\r\n\r\n    private static _RegisteredPlugins: { [extension: string]: IRegisteredPlugin } = {};\r\n\r\n    private static _ShowingLoadingScreen = false;\r\n\r\n    /**\r\n     * Gets the default plugin (used to load Babylon files)\r\n     * @returns the .babylon plugin\r\n     */\r\n    public static GetDefaultPlugin(): IRegisteredPlugin {\r\n        return SceneLoader._RegisteredPlugins[\".babylon\"];\r\n    }\r\n\r\n    private static _GetPluginForExtension(extension: string): IRegisteredPlugin {\r\n        const registeredPlugin = SceneLoader._RegisteredPlugins[extension];\r\n        if (registeredPlugin) {\r\n            return registeredPlugin;\r\n        }\r\n        Logger.Warn(\r\n            \"Unable to find a plugin to load \" +\r\n                extension +\r\n                \" files. Trying to use .babylon default plugin. To load from a specific filetype (eg. gltf) see: https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\"\r\n        );\r\n        return SceneLoader.GetDefaultPlugin();\r\n    }\r\n\r\n    private static _GetPluginForDirectLoad(data: string): IRegisteredPlugin {\r\n        for (const extension in SceneLoader._RegisteredPlugins) {\r\n            const plugin = SceneLoader._RegisteredPlugins[extension].plugin;\r\n\r\n            if (plugin.canDirectLoad && plugin.canDirectLoad(data)) {\r\n                return SceneLoader._RegisteredPlugins[extension];\r\n            }\r\n        }\r\n\r\n        return SceneLoader.GetDefaultPlugin();\r\n    }\r\n\r\n    private static _GetPluginForFilename(sceneFilename: string): IRegisteredPlugin {\r\n        const queryStringPosition = sceneFilename.indexOf(\"?\");\r\n\r\n        if (queryStringPosition !== -1) {\r\n            sceneFilename = sceneFilename.substring(0, queryStringPosition);\r\n        }\r\n\r\n        const dotPosition = sceneFilename.lastIndexOf(\".\");\r\n\r\n        const extension = sceneFilename.substring(dotPosition, sceneFilename.length).toLowerCase();\r\n        return SceneLoader._GetPluginForExtension(extension);\r\n    }\r\n\r\n    private static _GetDirectLoad(sceneFilename: string): Nullable<string> {\r\n        if (sceneFilename.substr(0, 5) === \"data:\") {\r\n            return sceneFilename.substr(5);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static _FormatErrorMessage(fileInfo: IFileInfo, message?: string, exception?: any): string {\r\n        const fromLoad = fileInfo.rawData ? \"binary data\" : fileInfo.url;\r\n        let errorMessage = \"Unable to load from \" + fromLoad;\r\n\r\n        if (message) {\r\n            errorMessage += `: ${message}`;\r\n        } else if (exception) {\r\n            errorMessage += `: ${exception}`;\r\n        }\r\n\r\n        return errorMessage;\r\n    }\r\n\r\n    private static _LoadData(\r\n        fileInfo: IFileInfo,\r\n        scene: Scene,\r\n        onSuccess: (plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync, data: any, responseURL?: string) => void,\r\n        onProgress: ((event: ISceneLoaderProgressEvent) => void) | undefined,\r\n        onError: (message?: string, exception?: any) => void,\r\n        onDispose: () => void,\r\n        pluginExtension: Nullable<string>,\r\n        name: string\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        const directLoad = SceneLoader._GetDirectLoad(fileInfo.url);\r\n\r\n        if (fileInfo.rawData && !pluginExtension) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"When using ArrayBufferView to load data the file extension must be provided.\";\r\n        }\r\n\r\n        const registeredPlugin = pluginExtension\r\n            ? SceneLoader._GetPluginForExtension(pluginExtension)\r\n            : directLoad\r\n              ? SceneLoader._GetPluginForDirectLoad(fileInfo.url)\r\n              : SceneLoader._GetPluginForFilename(fileInfo.url);\r\n\r\n        if (fileInfo.rawData && !registeredPlugin.isBinary) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Loading from ArrayBufferView can not be used with plugins that don't support binary loading.\";\r\n        }\r\n\r\n        let plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync;\r\n\r\n        if ((registeredPlugin.plugin as ISceneLoaderPluginFactory).createPlugin !== undefined) {\r\n            plugin = (registeredPlugin.plugin as ISceneLoaderPluginFactory).createPlugin();\r\n        } else {\r\n            plugin = <any>registeredPlugin.plugin;\r\n        }\r\n\r\n        if (!plugin) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"The loader plugin corresponding to the file type you are trying to load has not been found. If using es6, please import the plugin you wish to use before.\";\r\n        }\r\n\r\n        SceneLoader.OnPluginActivatedObservable.notifyObservers(plugin);\r\n\r\n        // Check if we have a direct load url. If the plugin is registered to handle\r\n        // it or it's not a base64 data url, then pass it through the direct load path.\r\n        if (directLoad && ((plugin.canDirectLoad && plugin.canDirectLoad(fileInfo.url)) || !IsBase64DataUrl(fileInfo.url))) {\r\n            if (plugin.directLoad) {\r\n                const result = plugin.directLoad(scene, directLoad);\r\n                if (result.then) {\r\n                    result\r\n                        .then((data: any) => {\r\n                            onSuccess(plugin, data);\r\n                        })\r\n                        .catch((error: any) => {\r\n                            onError(\"Error in directLoad of _loadData: \" + error, error);\r\n                        });\r\n                } else {\r\n                    onSuccess(plugin, result);\r\n                }\r\n            } else {\r\n                onSuccess(plugin, directLoad);\r\n            }\r\n            return plugin;\r\n        }\r\n\r\n        const useArrayBuffer = registeredPlugin.isBinary;\r\n\r\n        const dataCallback = (data: any, responseURL?: string) => {\r\n            if (scene.isDisposed) {\r\n                onError(\"Scene has been disposed\");\r\n                return;\r\n            }\r\n\r\n            onSuccess(plugin, data, responseURL);\r\n        };\r\n\r\n        let request: Nullable<IFileRequest> = null;\r\n        let pluginDisposed = false;\r\n        const onDisposeObservable = (plugin as any).onDisposeObservable as Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n        if (onDisposeObservable) {\r\n            onDisposeObservable.add(() => {\r\n                pluginDisposed = true;\r\n\r\n                if (request) {\r\n                    request.abort();\r\n                    request = null;\r\n                }\r\n\r\n                onDispose();\r\n            });\r\n        }\r\n\r\n        const manifestChecked = () => {\r\n            if (pluginDisposed) {\r\n                return;\r\n            }\r\n\r\n            const errorCallback = (request?: WebRequest, exception?: LoadFileError) => {\r\n                onError(request?.statusText, exception);\r\n            };\r\n\r\n            if (!plugin.loadFile && fileInfo.rawData) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"Plugin does not support loading ArrayBufferView.\";\r\n            }\r\n\r\n            request = plugin.loadFile\r\n                ? plugin.loadFile(scene, fileInfo.rawData || fileInfo.file || fileInfo.url, fileInfo.rootUrl, dataCallback, onProgress, useArrayBuffer, errorCallback, name)\r\n                : scene._loadFile(fileInfo.file || fileInfo.url, dataCallback, onProgress, true, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        const engine = scene.getEngine();\r\n        let canUseOfflineSupport = engine.enableOfflineSupport;\r\n        if (canUseOfflineSupport) {\r\n            // Also check for exceptions\r\n            let exceptionFound = false;\r\n            for (const regex of scene.disableOfflineSupportExceptionRules) {\r\n                if (regex.test(fileInfo.url)) {\r\n                    exceptionFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            canUseOfflineSupport = !exceptionFound;\r\n        }\r\n\r\n        if (canUseOfflineSupport && Engine.OfflineProviderFactory) {\r\n            // Checking if a manifest file has been set for this scene and if offline mode has been requested\r\n            scene.offlineProvider = Engine.OfflineProviderFactory(fileInfo.url, manifestChecked, engine.disableManifestCheck);\r\n        } else {\r\n            manifestChecked();\r\n        }\r\n\r\n        return plugin;\r\n    }\r\n\r\n    private static _GetFileInfo(rootUrl: string, sceneFilename: string | File | ArrayBufferView): Nullable<IFileInfo> {\r\n        let url: string;\r\n        let name: string;\r\n        let file: Nullable<File> = null;\r\n        let rawData: Nullable<ArrayBufferView> = null;\r\n\r\n        if (!sceneFilename) {\r\n            url = rootUrl;\r\n            name = Tools.GetFilename(rootUrl);\r\n            rootUrl = Tools.GetFolderPath(rootUrl);\r\n        } else if ((sceneFilename as File).name) {\r\n            const sceneFile = sceneFilename as File;\r\n            url = `file:${sceneFile.name}`;\r\n            name = sceneFile.name;\r\n            file = sceneFile;\r\n        } else if (ArrayBuffer.isView(sceneFilename)) {\r\n            url = \"\";\r\n            name = RandomGUID();\r\n            rawData = sceneFilename as ArrayBufferView;\r\n        } else if (typeof sceneFilename === \"string\" && sceneFilename.startsWith(\"data:\")) {\r\n            url = sceneFilename;\r\n            name = \"\";\r\n        } else {\r\n            const filename = sceneFilename as string;\r\n            if (filename.substr(0, 1) === \"/\") {\r\n                Tools.Error(\"Wrong sceneFilename parameter\");\r\n                return null;\r\n            }\r\n\r\n            url = rootUrl + filename;\r\n            name = filename;\r\n        }\r\n\r\n        return {\r\n            url: url,\r\n            rootUrl: rootUrl,\r\n            name: name,\r\n            file: file,\r\n            rawData,\r\n        };\r\n    }\r\n\r\n    // Public functions\r\n\r\n    /**\r\n     * Gets a plugin that can load the given extension\r\n     * @param extension defines the extension to load\r\n     * @returns a plugin or null if none works\r\n     */\r\n    public static GetPluginForExtension(extension: string): ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory {\r\n        return SceneLoader._GetPluginForExtension(extension).plugin;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the given extension can be loaded\r\n     * @param extension defines the extension to load\r\n     * @returns true if the extension is supported\r\n     */\r\n    public static IsPluginForExtensionAvailable(extension: string): boolean {\r\n        return !!SceneLoader._RegisteredPlugins[extension];\r\n    }\r\n\r\n    /**\r\n     * Adds a new plugin to the list of registered plugins\r\n     * @param plugin defines the plugin to add\r\n     */\r\n    public static RegisterPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync): void {\r\n        if (typeof plugin.extensions === \"string\") {\r\n            const extension = <string>plugin.extensions;\r\n            SceneLoader._RegisteredPlugins[extension.toLowerCase()] = {\r\n                plugin: plugin,\r\n                isBinary: false,\r\n            };\r\n        } else {\r\n            const extensions = <ISceneLoaderPluginExtensions>plugin.extensions;\r\n            Object.keys(extensions).forEach((extension) => {\r\n                SceneLoader._RegisteredPlugins[extension.toLowerCase()] = {\r\n                    plugin: plugin,\r\n                    isBinary: extensions[extension].isBinary,\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with a list of imported meshes, particleSystems, skeletons, and animationGroups when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static ImportMesh(\r\n        meshNames: any,\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onSuccess: Nullable<SceneLoaderSuccessCallback> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to import mesh to\");\r\n            return null;\r\n        }\r\n\r\n        const fileInfo = SceneLoader._GetFileInfo(rootUrl, sceneFilename);\r\n        if (!fileInfo) {\r\n            return null;\r\n        }\r\n\r\n        const loadingToken = {};\r\n        scene.addPendingData(loadingToken);\r\n\r\n        const disposeHandler = () => {\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            const errorMessage = SceneLoader._FormatErrorMessage(fileInfo, message, exception);\r\n\r\n            if (onError) {\r\n                onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n            } else {\r\n                Logger.Error(errorMessage);\r\n                // should the exception be thrown?\r\n            }\r\n\r\n            disposeHandler();\r\n        };\r\n\r\n        const progressHandler = onProgress\r\n            ? (event: ISceneLoaderProgressEvent) => {\r\n                  try {\r\n                      onProgress(event);\r\n                  } catch (e) {\r\n                      errorHandler(\"Error in onProgress callback: \" + e, e);\r\n                  }\r\n              }\r\n            : undefined;\r\n\r\n        const successHandler: SceneLoaderSuccessCallback = (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n            scene.importedMeshesFiles.push(fileInfo.url);\r\n\r\n            if (onSuccess) {\r\n                try {\r\n                    onSuccess(meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers);\r\n                } catch (e) {\r\n                    errorHandler(\"Error in onSuccess callback: \" + e, e);\r\n                }\r\n            }\r\n\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        return SceneLoader._LoadData(\r\n            fileInfo,\r\n            scene,\r\n            (plugin, data, responseURL) => {\r\n                if (plugin.rewriteRootURL) {\r\n                    fileInfo.rootUrl = plugin.rewriteRootURL(fileInfo.rootUrl, responseURL);\r\n                }\r\n\r\n                if ((<any>plugin).importMesh) {\r\n                    const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                    const meshes: AbstractMesh[] = [];\r\n                    const particleSystems: IParticleSystem[] = [];\r\n                    const skeletons: Skeleton[] = [];\r\n\r\n                    if (!syncedPlugin.importMesh(meshNames, scene, data, fileInfo.rootUrl, meshes, particleSystems, skeletons, errorHandler)) {\r\n                        return;\r\n                    }\r\n\r\n                    scene.loadingPluginName = plugin.name;\r\n                    successHandler(meshes, particleSystems, skeletons, [], [], [], [], []);\r\n                } else {\r\n                    const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                    asyncedPlugin\r\n                        .importMeshAsync(meshNames, scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                        .then((result) => {\r\n                            scene.loadingPluginName = plugin.name;\r\n                            successHandler(\r\n                                result.meshes,\r\n                                result.particleSystems,\r\n                                result.skeletons,\r\n                                result.animationGroups,\r\n                                result.transformNodes,\r\n                                result.geometries,\r\n                                result.lights,\r\n                                result.spriteManagers\r\n                            );\r\n                        })\r\n                        .catch((error) => {\r\n                            errorHandler(error.message, error);\r\n                        });\r\n                }\r\n            },\r\n            progressHandler,\r\n            errorHandler,\r\n            disposeHandler,\r\n            pluginExtension,\r\n            name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file\r\n     * @returns The loaded list of imported meshes, particle systems, skeletons, and animation groups\r\n     */\r\n    public static ImportMeshAsync(\r\n        meshNames: any,\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.ImportMesh(\r\n                meshNames,\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n                    resolve({\r\n                        meshes: meshes,\r\n                        particleSystems: particleSystems,\r\n                        skeletons: skeletons,\r\n                        animationGroups: animationGroups,\r\n                        transformNodes: transformNodes,\r\n                        geometries: geometries,\r\n                        lights: lights,\r\n                        spriteManagers: spriteManagers,\r\n                    });\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static Load(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        engine: Nullable<Engine> = EngineStore.LastCreatedEngine,\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!engine) {\r\n            Tools.Error(\"No engine available\");\r\n            return null;\r\n        }\r\n\r\n        return SceneLoader.Append(rootUrl, sceneFilename, new Scene(engine), onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded scene\r\n     */\r\n    public static LoadAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        engine: Nullable<Engine> = EngineStore.LastCreatedEngine,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Promise<Scene> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.Load(\r\n                rootUrl,\r\n                sceneFilename,\r\n                engine,\r\n                (scene) => {\r\n                    resolve(scene);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static Append(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to append to\");\r\n            return null;\r\n        }\r\n\r\n        const fileInfo = SceneLoader._GetFileInfo(rootUrl, sceneFilename);\r\n        if (!fileInfo) {\r\n            return null;\r\n        }\r\n\r\n        const loadingToken = {};\r\n        scene.addPendingData(loadingToken);\r\n\r\n        const disposeHandler = () => {\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        if (SceneLoader.ShowLoadingScreen && !this._ShowingLoadingScreen) {\r\n            this._ShowingLoadingScreen = true;\r\n            scene.getEngine().displayLoadingUI();\r\n            scene.executeWhenReady(() => {\r\n                scene.getEngine().hideLoadingUI();\r\n                this._ShowingLoadingScreen = false;\r\n            });\r\n        }\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            const errorMessage = SceneLoader._FormatErrorMessage(fileInfo, message, exception);\r\n\r\n            if (onError) {\r\n                onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n            } else {\r\n                Logger.Error(errorMessage);\r\n                // should the exception be thrown?\r\n            }\r\n\r\n            disposeHandler();\r\n        };\r\n\r\n        const progressHandler = onProgress\r\n            ? (event: ISceneLoaderProgressEvent) => {\r\n                  try {\r\n                      onProgress(event);\r\n                  } catch (e) {\r\n                      errorHandler(\"Error in onProgress callback\", e);\r\n                  }\r\n              }\r\n            : undefined;\r\n\r\n        const successHandler = () => {\r\n            if (onSuccess) {\r\n                try {\r\n                    onSuccess(scene);\r\n                } catch (e) {\r\n                    errorHandler(\"Error in onSuccess callback\", e);\r\n                }\r\n            }\r\n\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        return SceneLoader._LoadData(\r\n            fileInfo,\r\n            scene,\r\n            (plugin, data) => {\r\n                if ((<any>plugin).load) {\r\n                    const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                    if (!syncedPlugin.load(scene, data, fileInfo.rootUrl, errorHandler)) {\r\n                        return;\r\n                    }\r\n\r\n                    scene.loadingPluginName = plugin.name;\r\n                    successHandler();\r\n                } else {\r\n                    const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                    asyncedPlugin\r\n                        .loadAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                        .then(() => {\r\n                            scene.loadingPluginName = plugin.name;\r\n                            successHandler();\r\n                        })\r\n                        .catch((error) => {\r\n                            errorHandler(error.message, error);\r\n                        });\r\n                }\r\n            },\r\n            progressHandler,\r\n            errorHandler,\r\n            disposeHandler,\r\n            pluginExtension,\r\n            name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The given scene\r\n     */\r\n    public static AppendAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Promise<Scene> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.Append(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (scene) => {\r\n                    resolve(scene);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded plugin\r\n     */\r\n    public static LoadAssetContainer(\r\n        rootUrl: string,\r\n        sceneFilename: string | File | ArrayBufferView = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onSuccess: Nullable<(assets: AssetContainer) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null,\r\n        name: string = \"\"\r\n    ): Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync> {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to load asset container to\");\r\n            return null;\r\n        }\r\n\r\n        const fileInfo = SceneLoader._GetFileInfo(rootUrl, sceneFilename);\r\n        if (!fileInfo) {\r\n            return null;\r\n        }\r\n\r\n        const loadingToken = {};\r\n        scene.addPendingData(loadingToken);\r\n\r\n        const disposeHandler = () => {\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            const errorMessage = SceneLoader._FormatErrorMessage(fileInfo, message, exception);\r\n\r\n            if (onError) {\r\n                onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n            } else {\r\n                Logger.Error(errorMessage);\r\n                // should the exception be thrown?\r\n            }\r\n\r\n            disposeHandler();\r\n        };\r\n\r\n        const progressHandler = onProgress\r\n            ? (event: ISceneLoaderProgressEvent) => {\r\n                  try {\r\n                      onProgress(event);\r\n                  } catch (e) {\r\n                      errorHandler(\"Error in onProgress callback\", e);\r\n                  }\r\n              }\r\n            : undefined;\r\n\r\n        const successHandler = (assets: AssetContainer) => {\r\n            if (onSuccess) {\r\n                try {\r\n                    onSuccess(assets);\r\n                } catch (e) {\r\n                    errorHandler(\"Error in onSuccess callback\", e);\r\n                }\r\n            }\r\n\r\n            scene.removePendingData(loadingToken);\r\n        };\r\n\r\n        return SceneLoader._LoadData(\r\n            fileInfo,\r\n            scene,\r\n            (plugin, data) => {\r\n                if ((<any>plugin).loadAssetContainer) {\r\n                    const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                    const assetContainer = syncedPlugin.loadAssetContainer(scene, data, fileInfo.rootUrl, errorHandler);\r\n                    if (!assetContainer) {\r\n                        return;\r\n                    }\r\n                    assetContainer.populateRootNodes();\r\n                    scene.loadingPluginName = plugin.name;\r\n                    successHandler(assetContainer);\r\n                } else if ((<any>plugin).loadAssetContainerAsync) {\r\n                    const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                    asyncedPlugin\r\n                        .loadAssetContainerAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                        .then((assetContainer) => {\r\n                            assetContainer.populateRootNodes();\r\n                            scene.loadingPluginName = plugin.name;\r\n                            successHandler(assetContainer);\r\n                        })\r\n                        .catch((error) => {\r\n                            errorHandler(error.message, error);\r\n                        });\r\n                } else {\r\n                    errorHandler(\"LoadAssetContainer is not supported by this plugin. Plugin did not provide a loadAssetContainer or loadAssetContainerAsync method.\");\r\n                }\r\n            },\r\n            progressHandler,\r\n            errorHandler,\r\n            disposeHandler,\r\n            pluginExtension,\r\n            name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene (default: empty string)\r\n     * @param scene is the instance of Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @returns The loaded asset container\r\n     */\r\n    public static LoadAssetContainerAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        pluginExtension: Nullable<string> = null\r\n    ): Promise<AssetContainer> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.LoadAssetContainer(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (assetContainer) => {\r\n                    resolve(assetContainer);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     */\r\n    public static ImportAnimations(\r\n        rootUrl: string,\r\n        sceneFilename: string | File = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        overwriteAnimations = true,\r\n        animationGroupLoadingMode = SceneLoaderAnimationGroupLoadingMode.Clean,\r\n        targetConverter: Nullable<(target: any) => any> = null,\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null\r\n    ): void {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to load animations to\");\r\n            return;\r\n        }\r\n\r\n        if (overwriteAnimations) {\r\n            // Reset, stop and dispose all animations before loading new ones\r\n            for (const animatable of scene.animatables) {\r\n                animatable.reset();\r\n            }\r\n            scene.stopAllAnimations();\r\n            scene.animationGroups.slice().forEach((animationGroup) => {\r\n                animationGroup.dispose();\r\n            });\r\n            const nodes = scene.getNodes();\r\n            nodes.forEach((node) => {\r\n                if (node.animations) {\r\n                    node.animations = [];\r\n                }\r\n            });\r\n        } else {\r\n            switch (animationGroupLoadingMode) {\r\n                case SceneLoaderAnimationGroupLoadingMode.Clean:\r\n                    scene.animationGroups.slice().forEach((animationGroup) => {\r\n                        animationGroup.dispose();\r\n                    });\r\n                    break;\r\n                case SceneLoaderAnimationGroupLoadingMode.Stop:\r\n                    scene.animationGroups.forEach((animationGroup) => {\r\n                        animationGroup.stop();\r\n                    });\r\n                    break;\r\n                case SceneLoaderAnimationGroupLoadingMode.Sync:\r\n                    scene.animationGroups.forEach((animationGroup) => {\r\n                        animationGroup.reset();\r\n                        animationGroup.restart();\r\n                    });\r\n                    break;\r\n                case SceneLoaderAnimationGroupLoadingMode.NoSync:\r\n                    // nothing to do\r\n                    break;\r\n                default:\r\n                    Logger.Error(\"Unknown animation group loading mode value '\" + animationGroupLoadingMode + \"'\");\r\n                    return;\r\n            }\r\n        }\r\n\r\n        const startingIndexForNewAnimatables = scene.animatables.length;\r\n\r\n        const onAssetContainerLoaded = (container: AssetContainer) => {\r\n            container.mergeAnimationsTo(scene, scene.animatables.slice(startingIndexForNewAnimatables), targetConverter);\r\n\r\n            container.dispose();\r\n\r\n            scene.onAnimationFileImportedObservable.notifyObservers(scene);\r\n\r\n            if (onSuccess) {\r\n                onSuccess(scene);\r\n            }\r\n        };\r\n\r\n        this.LoadAssetContainer(rootUrl, sceneFilename, scene, onAssetContainerLoaded, onProgress, onError, pluginExtension);\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @returns the updated scene with imported animations\r\n     */\r\n    public static ImportAnimationsAsync(\r\n        rootUrl: string,\r\n        sceneFilename: string | File = \"\",\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        overwriteAnimations = true,\r\n        animationGroupLoadingMode = SceneLoaderAnimationGroupLoadingMode.Clean,\r\n        targetConverter: Nullable<(target: any) => any> = null,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onSuccess: Nullable<(scene: Scene) => void> = null,\r\n        onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n        pluginExtension: Nullable<string> = null\r\n    ): Promise<Scene> {\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.ImportAnimations(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                overwriteAnimations,\r\n                animationGroupLoadingMode,\r\n                targetConverter,\r\n                (_scene: Scene) => {\r\n                    resolve(_scene);\r\n                },\r\n                onProgress,\r\n                (_scene: Scene, message: string, exception: any) => {\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension\r\n            );\r\n        });\r\n    }\r\n}\r\n", "import type { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport type { Vector3 } from \"../Maths/math.vector\";\r\nimport { Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Node } from \"../node\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { TransformNode } from \"./transformNode\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Tools } from \"../Misc/tools\";\r\n\r\nMesh._instancedMeshFactory = (name: string, mesh: Mesh): InstancedMesh => {\r\n    const instance = new InstancedMesh(name, mesh);\r\n\r\n    if (mesh.instancedBuffers) {\r\n        instance.instancedBuffers = {};\r\n\r\n        for (const key in mesh.instancedBuffers) {\r\n            instance.instancedBuffers[key] = mesh.instancedBuffers[key];\r\n        }\r\n    }\r\n\r\n    return instance;\r\n};\r\n\r\n/**\r\n * Creates an instance based on a source mesh.\r\n */\r\nexport class InstancedMesh extends AbstractMesh {\r\n    private _sourceMesh: Mesh;\r\n    private _currentLOD: Mesh;\r\n    private _billboardWorldMatrix: Matrix;\r\n\r\n    /** @internal */\r\n    public _indexInSourceMeshInstanceArray = -1;\r\n    /** @internal */\r\n    public _distanceToCamera: number = 0;\r\n    /** @internal */\r\n    public _previousWorldMatrix: Nullable<Matrix>;\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh source.\r\n     * @param name defines the name of the instance\r\n     * @param source the mesh to create the instance from\r\n     */\r\n    constructor(name: string, source: Mesh) {\r\n        super(name, source.getScene());\r\n\r\n        source.addInstance(this);\r\n\r\n        this._sourceMesh = source;\r\n\r\n        this._unIndexed = source._unIndexed;\r\n\r\n        this.position.copyFrom(source.position);\r\n        this.rotation.copyFrom(source.rotation);\r\n        this.scaling.copyFrom(source.scaling);\r\n\r\n        if (source.rotationQuaternion) {\r\n            this.rotationQuaternion = source.rotationQuaternion.clone();\r\n        }\r\n\r\n        this.animations = source.animations.slice();\r\n        for (const range of source.getAnimationRanges()) {\r\n            if (range != null) {\r\n                this.createAnimationRange(range.name, range.from, range.to);\r\n            }\r\n        }\r\n\r\n        this.infiniteDistance = source.infiniteDistance;\r\n\r\n        this.setPivotMatrix(source.getPivotMatrix());\r\n\r\n        this.refreshBoundingInfo(true, true);\r\n        this._syncSubMeshes();\r\n    }\r\n\r\n    /**\r\n     * @returns the string \"InstancedMesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"InstancedMesh\";\r\n    }\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._sourceMesh._lightSources;\r\n    }\r\n\r\n    public _resyncLightSources(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    public _resyncLightSource(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    public _removeLightSource(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * If the source mesh receives shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._sourceMesh.receiveShadows;\r\n    }\r\n\r\n    public set receiveShadows(_value: boolean) {\r\n        if (this._sourceMesh?.receiveShadows !== _value) {\r\n            Tools.Warn(\"Setting receiveShadows on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The material of the source mesh\r\n     */\r\n    public get material(): Nullable<Material> {\r\n        return this._sourceMesh.material;\r\n    }\r\n\r\n    public set material(_value: Nullable<Material>) {\r\n        if (this._sourceMesh?.material !== _value) {\r\n            Tools.Warn(\"Setting material on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Visibility of the source mesh\r\n     */\r\n    public get visibility(): number {\r\n        return this._sourceMesh.visibility;\r\n    }\r\n\r\n    public set visibility(_value: number) {\r\n        if (this._sourceMesh?.visibility !== _value) {\r\n            Tools.Warn(\"Setting visibility on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Skeleton of the source mesh\r\n     */\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._sourceMesh.skeleton;\r\n    }\r\n\r\n    public set skeleton(_value: Nullable<Skeleton>) {\r\n        if (this._sourceMesh?.skeleton !== _value) {\r\n            Tools.Warn(\"Setting skeleton on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of the source mesh\r\n     */\r\n    public get renderingGroupId(): number {\r\n        return this._sourceMesh.renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        if (!this._sourceMesh || value === this._sourceMesh.renderingGroupId) {\r\n            return;\r\n        }\r\n\r\n        //no-op with warning\r\n        Logger.Warn(\"Note - setting renderingGroupId of an instanced mesh has no effect on the scene\");\r\n    }\r\n\r\n    /**\r\n     * @returns the total number of vertices (integer).\r\n     */\r\n    public getTotalVertices(): number {\r\n        return this._sourceMesh ? this._sourceMesh.getTotalVertices() : 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return this._sourceMesh.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * The source mesh of the instance\r\n     */\r\n    public get sourceMesh(): Mesh {\r\n        return this._sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        return this._sourceMesh.createInstance(name);\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns {boolean} is it ready\r\n     */\r\n    public isReady(completeCheck = false): boolean {\r\n        return this._sourceMesh.isReady(completeCheck, true);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param kind kind of verticies to retrieve (eg. positions, normals, uvs, etc.)\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @returns a float array or a Float32Array of the requested kind of data : positions, normals, uvs, etc.\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        return this._sourceMesh.getVerticesData(kind, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * The `data` are either a numeric array either a Float32Array.\r\n     * The parameter `updatable` is passed as is to the underlying Geometry object constructor (if initially none) or updater.\r\n     * The parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     *\r\n     * Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     *\r\n     * Returns the Mesh.\r\n     * @param kind defines vertex data kind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (false as default)\r\n     * @param stride defines the vertex stride (optional)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * The `data` are either a numeric array either a Float32Array.\r\n     * No new underlying VertexBuffer object is created.\r\n     * If the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * If the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\r\n     *\r\n     * Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     *\r\n     * Returns the Mesh.\r\n     * @param kind defines vertex data kind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines it the updated vertex buffer must be flagged as unique (false by default)\r\n     * @returns the source mesh\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): Mesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.updateVerticesData(kind, data, updateExtends, makeItUnique);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices.\r\n     * Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array).\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * This method creates a new index buffer each call.\r\n     * Returns the Mesh.\r\n     * @param indices the source data\r\n     * @param totalVertices defines the total number of vertices referenced by indices (could be null)\r\n     * @returns source mesh\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null): Mesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.setIndices(indices, totalVertices);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the mesh owns the requested kind of data.\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @returns true if data kind is present\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return this._sourceMesh.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * @returns an array of indices (IndicesArray).\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return this._sourceMesh.getIndices();\r\n    }\r\n\r\n    public get _positions(): Nullable<Vector3[]> {\r\n        return this._sourceMesh._positions;\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public refreshBoundingInfo(applySkeleton: boolean = false, applyMorph: boolean = false): InstancedMesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        const bias = this._sourceMesh.geometry ? this._sourceMesh.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._sourceMesh._getPositionData(applySkeleton, applyMorph), bias);\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _preActivate(): InstancedMesh {\r\n        if (this._currentLOD) {\r\n            this._currentLOD._preActivate();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        super._activate(renderId, intermediateRendering);\r\n\r\n        if (!this._sourceMesh.subMeshes) {\r\n            Logger.Warn(\"Instances should only be created for meshes with geometry.\");\r\n        }\r\n\r\n        if (this._currentLOD) {\r\n            const differentSign = this._currentLOD._getWorldMatrixDeterminant() >= 0 !== this._getWorldMatrixDeterminant() >= 0;\r\n            if (differentSign) {\r\n                this._internalAbstractMeshDataInfo._actAsRegularMesh = true;\r\n                return true;\r\n            }\r\n            this._internalAbstractMeshDataInfo._actAsRegularMesh = false;\r\n\r\n            this._currentLOD._registerInstanceForRenderId(this, renderId);\r\n\r\n            if (intermediateRendering) {\r\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = true;\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActive) {\r\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstances = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        if (this._sourceMesh.edgesShareWithInstances && this._sourceMesh._edgesRenderer && this._sourceMesh._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\r\n            // we are using the edge renderer of the source mesh\r\n            this._sourceMesh._renderingGroup._edgesRenderers.pushNoDuplicate(this._sourceMesh._edgesRenderer);\r\n            this._sourceMesh._edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        } else if (this._edgesRenderer && this._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\r\n            // we are using the edge renderer defined for this instance\r\n            this._sourceMesh._renderingGroup._edgesRenderers.push(this._edgesRenderer);\r\n        }\r\n    }\r\n\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._currentLOD && this._currentLOD.billboardMode !== TransformNode.BILLBOARDMODE_NONE && this._currentLOD._masterMesh !== this) {\r\n            if (!this._billboardWorldMatrix) {\r\n                this._billboardWorldMatrix = new Matrix();\r\n            }\r\n            const tempMaster = this._currentLOD._masterMesh;\r\n            this._currentLOD._masterMesh = this;\r\n            TmpVectors.Vector3[7].copyFrom(this._currentLOD.position);\r\n            this._currentLOD.position.set(0, 0, 0);\r\n            this._billboardWorldMatrix.copyFrom(this._currentLOD.computeWorldMatrix(true));\r\n            this._currentLOD.position.copyFrom(TmpVectors.Vector3[7]);\r\n            this._currentLOD._masterMesh = tempMaster;\r\n            return this._billboardWorldMatrix;\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    public get isAnInstance(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the current associated LOD AbstractMesh.\r\n     * @param camera defines the camera to use to pick the LOD level\r\n     * @returns a Mesh or `null` if no LOD is associated with the AbstractMesh\r\n     */\r\n    public getLOD(camera: Camera): AbstractMesh {\r\n        if (!camera) {\r\n            return this;\r\n        }\r\n\r\n        const sourceMeshLODLevels = this.sourceMesh.getLODLevels();\r\n        if (!sourceMeshLODLevels || sourceMeshLODLevels.length === 0) {\r\n            this._currentLOD = this.sourceMesh;\r\n        } else {\r\n            const boundingInfo = this.getBoundingInfo();\r\n            this._currentLOD = <Mesh>this.sourceMesh.getLOD(camera, boundingInfo.boundingSphere);\r\n        }\r\n\r\n        return this._currentLOD;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        return <Mesh>this.sourceMesh._preActivateForIntermediateRendering(renderId);\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncSubMeshes(): InstancedMesh {\r\n        this.releaseSubMeshes();\r\n        if (this._sourceMesh.subMeshes) {\r\n            for (let index = 0; index < this._sourceMesh.subMeshes.length; index++) {\r\n                this._sourceMesh.subMeshes[index].clone(this, this._sourceMesh);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        return this._sourceMesh._generatePointsArray();\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        if (this.hasBoundingInfo) {\r\n            this.getBoundingInfo().update(this.worldMatrixFromCache);\r\n        } else {\r\n            this.buildBoundingInfo(this.absolutePosition, this.absolutePosition, this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh from the current mesh.\r\n     *\r\n     * Returns the clone.\r\n     * @param name the cloned mesh name\r\n     * @param newParent the optional Node to parent the clone to.\r\n     * @param doNotCloneChildren if `true` the model children aren't cloned.\r\n     * @param newSourceMesh if set this mesh will be used as the source mesh instead of ths instance's one\r\n     * @returns the clone\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null, doNotCloneChildren?: boolean, newSourceMesh?: Mesh): InstancedMesh {\r\n        const result = (newSourceMesh || this._sourceMesh).createInstance(name);\r\n\r\n        // Deep copy\r\n        DeepCopier.DeepCopy(\r\n            this,\r\n            result,\r\n            [\r\n                \"name\",\r\n                \"subMeshes\",\r\n                \"uniqueId\",\r\n                \"parent\",\r\n                \"lightSources\",\r\n                \"receiveShadows\",\r\n                \"material\",\r\n                \"visibility\",\r\n                \"skeleton\",\r\n                \"sourceMesh\",\r\n                \"isAnInstance\",\r\n                \"facetNb\",\r\n                \"isFacetDataEnabled\",\r\n                \"isBlocked\",\r\n                \"useBones\",\r\n                \"hasInstances\",\r\n                \"collider\",\r\n                \"edgesRenderer\",\r\n                \"forward\",\r\n                \"up\",\r\n                \"right\",\r\n                \"absolutePosition\",\r\n                \"absoluteScaling\",\r\n                \"absoluteRotationQuaternion\",\r\n                \"isWorldMatrixFrozen\",\r\n                \"nonUniformScaling\",\r\n                \"behaviors\",\r\n                \"worldMatrixFromCache\",\r\n                \"hasThinInstances\",\r\n                \"hasBoundingInfo\",\r\n            ],\r\n            []\r\n        );\r\n\r\n        // Bounding info\r\n        this.refreshBoundingInfo();\r\n\r\n        // Parent\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            for (let index = 0; index < this.getScene().meshes.length; index++) {\r\n                const mesh = this.getScene().meshes[index];\r\n\r\n                if (mesh.parent === this) {\r\n                    mesh.clone(mesh.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.computeWorldMatrix(true);\r\n\r\n        this.onClonedObservable.notifyObservers(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the InstancedMesh.\r\n     * Returns nothing.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Remove from mesh\r\n        this._sourceMesh.removeInstance(this);\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _serializeAsParent(serializationObject: any) {\r\n        super._serializeAsParent(serializationObject);\r\n\r\n        serializationObject.parentId = this._sourceMesh.uniqueId;\r\n        serializationObject.parentInstanceIndex = this._indexInSourceMeshInstanceArray;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param options.newSourcedMesh newSourcedMesh the new source mesh for the instance (or clone)\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean); newSourcedMesh?: Mesh },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true, options && options.newSourcedMesh);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n}\r\n\r\ndeclare module \"./mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Register a custom buffer that will be instanced\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances#custom-buffers\r\n         * @param kind defines the buffer kind\r\n         * @param stride defines the stride in floats\r\n         */\r\n        registerInstancedBuffer(kind: string, stride: number): void;\r\n\r\n        /**\r\n         * Invalidate VertexArrayObjects belonging to the mesh (but not to the Geometry of the mesh).\r\n         */\r\n        _invalidateInstanceVertexArrayObject(): void;\r\n\r\n        /**\r\n         * true to use the edge renderer for all instances of this mesh\r\n         */\r\n        edgesShareWithInstances: boolean;\r\n\r\n        /** @internal */\r\n        _userInstancedBuffersStorage: {\r\n            data: { [key: string]: Float32Array };\r\n            sizes: { [key: string]: number };\r\n            vertexBuffers: { [key: string]: Nullable<VertexBuffer> };\r\n            strides: { [key: string]: number };\r\n            vertexArrayObjects?: { [key: string]: WebGLVertexArrayObject };\r\n        };\r\n    }\r\n}\r\n\r\ndeclare module \"./abstractMesh\" {\r\n    export interface AbstractMesh {\r\n        /**\r\n         * Object used to store instanced buffers defined by user\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances#custom-buffers\r\n         */\r\n        instancedBuffers: { [key: string]: any };\r\n    }\r\n}\r\n\r\nMesh.prototype.registerInstancedBuffer = function (kind: string, stride: number): void {\r\n    // Remove existing one\r\n    this._userInstancedBuffersStorage?.vertexBuffers[kind]?.dispose();\r\n\r\n    // Creates the instancedBuffer field if not present\r\n    if (!this.instancedBuffers) {\r\n        this.instancedBuffers = {};\r\n\r\n        for (const instance of this.instances) {\r\n            instance.instancedBuffers = {};\r\n        }\r\n    }\r\n\r\n    if (!this._userInstancedBuffersStorage) {\r\n        this._userInstancedBuffersStorage = {\r\n            data: {},\r\n            vertexBuffers: {},\r\n            strides: {},\r\n            sizes: {},\r\n            vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n        };\r\n    }\r\n\r\n    // Creates an empty property for this kind\r\n    this.instancedBuffers[kind] = null;\r\n\r\n    this._userInstancedBuffersStorage.strides[kind] = stride;\r\n    this._userInstancedBuffersStorage.sizes[kind] = stride * 32; // Initial size\r\n    this._userInstancedBuffersStorage.data[kind] = new Float32Array(this._userInstancedBuffersStorage.sizes[kind]);\r\n    this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\r\n\r\n    for (const instance of this.instances) {\r\n        instance.instancedBuffers[kind] = null;\r\n    }\r\n\r\n    this._invalidateInstanceVertexArrayObject();\r\n\r\n    this._markSubMeshesAsAttributesDirty();\r\n};\r\n\r\nMesh.prototype._processInstancedBuffers = function (visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n    const instanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n    for (const kind in this.instancedBuffers) {\r\n        let size = this._userInstancedBuffersStorage.sizes[kind];\r\n        const stride = this._userInstancedBuffersStorage.strides[kind];\r\n\r\n        // Resize if required\r\n        const expectedSize = (instanceCount + 1) * stride;\r\n\r\n        while (size < expectedSize) {\r\n            size *= 2;\r\n        }\r\n\r\n        if (this._userInstancedBuffersStorage.data[kind].length != size) {\r\n            this._userInstancedBuffersStorage.data[kind] = new Float32Array(size);\r\n            this._userInstancedBuffersStorage.sizes[kind] = size;\r\n            if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n                this._userInstancedBuffersStorage.vertexBuffers[kind]!.dispose();\r\n                this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n            }\r\n        }\r\n\r\n        const data = this._userInstancedBuffersStorage.data[kind];\r\n\r\n        // Update data buffer\r\n        let offset = 0;\r\n        if (renderSelf) {\r\n            const value = this.instancedBuffers[kind];\r\n\r\n            if (value.toArray) {\r\n                value.toArray(data, offset);\r\n            } else if (value.copyToArray) {\r\n                value.copyToArray(data, offset);\r\n            } else {\r\n                data[offset] = value;\r\n            }\r\n\r\n            offset += stride;\r\n        }\r\n\r\n        for (let instanceIndex = 0; instanceIndex < instanceCount; instanceIndex++) {\r\n            const instance = visibleInstances![instanceIndex]!;\r\n\r\n            const value = instance.instancedBuffers[kind];\r\n\r\n            if (value.toArray) {\r\n                value.toArray(data, offset);\r\n            } else if (value.copyToArray) {\r\n                value.copyToArray(data, offset);\r\n            } else {\r\n                data[offset] = value;\r\n            }\r\n\r\n            offset += stride;\r\n        }\r\n\r\n        // Update vertex buffer\r\n        if (!this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(\r\n                this.getEngine(),\r\n                this._userInstancedBuffersStorage.data[kind],\r\n                kind,\r\n                true,\r\n                false,\r\n                stride,\r\n                true\r\n            );\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind]!.updateDirectly(data, 0);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype._invalidateInstanceVertexArrayObject = function () {\r\n    if (!this._userInstancedBuffersStorage || this._userInstancedBuffersStorage.vertexArrayObjects === undefined) {\r\n        return;\r\n    }\r\n\r\n    for (const kind in this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n        this.getEngine().releaseVertexArrayObject(this._userInstancedBuffersStorage.vertexArrayObjects[kind]);\r\n    }\r\n\r\n    this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n};\r\n\r\nMesh.prototype._disposeInstanceSpecificData = function () {\r\n    if (this._instanceDataStorage.instancesBuffer) {\r\n        this._instanceDataStorage.instancesBuffer.dispose();\r\n        this._instanceDataStorage.instancesBuffer = null;\r\n    }\r\n\r\n    while (this.instances.length) {\r\n        this.instances[0].dispose();\r\n    }\r\n\r\n    for (const kind in this.instancedBuffers) {\r\n        if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind]!.dispose();\r\n        }\r\n    }\r\n\r\n    this._invalidateInstanceVertexArrayObject();\r\n\r\n    this.instancedBuffers = {};\r\n};\r\n", "import { serialize, serializeAsColor3, expandToProperty } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, TmpColors } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport type { ISortableLight } from \"./lightConstants\";\r\nimport { LightConstants } from \"./lightConstants\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Base class of all the lights in Babylon. It groups all the generic information about lights.\r\n * Lights are used, as you would expect, to affect how meshes are seen, in terms of both illumination and colour.\r\n * All meshes allow light to pass through them unless shadow generation is activated. The default number of lights allowed is four but this can be increased.\r\n */\r\nexport abstract class Light extends Node implements ISortableLight {\r\n    /**\r\n     * Falloff Default: light is falling off following the material specification:\r\n     * standard material is using standard falloff whereas pbr material can request special falloff per materials.\r\n     */\r\n    public static readonly FALLOFF_DEFAULT = LightConstants.FALLOFF_DEFAULT;\r\n\r\n    /**\r\n     * Falloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly FALLOFF_PHYSICAL = LightConstants.FALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Falloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly FALLOFF_GLTF = LightConstants.FALLOFF_GLTF;\r\n\r\n    /**\r\n     * Falloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly FALLOFF_STANDARD = LightConstants.FALLOFF_STANDARD;\r\n\r\n    //lightmapMode Consts\r\n    /**\r\n     * If every light affecting the material is in this lightmapMode,\r\n     * material.lightmapTexture adds or multiplies\r\n     * (depends on material.useLightmapAsShadowmap)\r\n     * after every other light calculations.\r\n     */\r\n    public static readonly LIGHTMAP_DEFAULT = LightConstants.LIGHTMAP_DEFAULT;\r\n    /**\r\n     * material.lightmapTexture as only diffuse lighting from this light\r\n     * adds only specular lighting from this light\r\n     * adds dynamic shadows\r\n     */\r\n    public static readonly LIGHTMAP_SPECULAR = LightConstants.LIGHTMAP_SPECULAR;\r\n    /**\r\n     * material.lightmapTexture as only lighting\r\n     * no light calculation from this light\r\n     * only adds dynamic shadows from this light\r\n     */\r\n    public static readonly LIGHTMAP_SHADOWSONLY = LightConstants.LIGHTMAP_SHADOWSONLY;\r\n\r\n    // Intensity Mode Consts\r\n    /**\r\n     * Each light type uses the default quantity according to its type:\r\n     *      point/spot lights use luminous intensity\r\n     *      directional lights use illuminance\r\n     */\r\n    public static readonly INTENSITYMODE_AUTOMATIC = LightConstants.INTENSITYMODE_AUTOMATIC;\r\n    /**\r\n     * lumen (lm)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSPOWER = LightConstants.INTENSITYMODE_LUMINOUSPOWER;\r\n    /**\r\n     * candela (lm/sr)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSINTENSITY = LightConstants.INTENSITYMODE_LUMINOUSINTENSITY;\r\n    /**\r\n     * lux (lm/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_ILLUMINANCE = LightConstants.INTENSITYMODE_ILLUMINANCE;\r\n    /**\r\n     * nit (cd/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINANCE = LightConstants.INTENSITYMODE_LUMINANCE;\r\n\r\n    // Light types ids const.\r\n    /**\r\n     * Light type const id of the point light.\r\n     */\r\n    public static readonly LIGHTTYPEID_POINTLIGHT = LightConstants.LIGHTTYPEID_POINTLIGHT;\r\n    /**\r\n     * Light type const id of the directional light.\r\n     */\r\n    public static readonly LIGHTTYPEID_DIRECTIONALLIGHT = LightConstants.LIGHTTYPEID_DIRECTIONALLIGHT;\r\n    /**\r\n     * Light type const id of the spot light.\r\n     */\r\n    public static readonly LIGHTTYPEID_SPOTLIGHT = LightConstants.LIGHTTYPEID_SPOTLIGHT;\r\n    /**\r\n     * Light type const id of the hemispheric light.\r\n     */\r\n    public static readonly LIGHTTYPEID_HEMISPHERICLIGHT = LightConstants.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n\r\n    /**\r\n     * Diffuse gives the basic color to an object.\r\n     */\r\n    @serializeAsColor3()\r\n    public diffuse = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Specular produces a highlight color on an object.\r\n     * Note: This is not affecting PBR materials.\r\n     */\r\n    @serializeAsColor3()\r\n    public specular = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Defines the falloff type for this light. This lets overriding how punctual light are\r\n     * falling off base on range or angle.\r\n     * This can be set to any values in Light.FALLOFF_x.\r\n     *\r\n     * Note: This is only useful for PBR Materials at the moment. This could be extended if required to\r\n     * other types of materials.\r\n     */\r\n    @serialize()\r\n    public falloffType = Light.FALLOFF_DEFAULT;\r\n\r\n    /**\r\n     * Strength of the light.\r\n     * Note: By default it is define in the framework own unit.\r\n     * Note: In PBR materials the intensityMode can be use to chose what unit the intensity is defined in.\r\n     */\r\n    @serialize()\r\n    public intensity = 1.0;\r\n\r\n    private _range = Number.MAX_VALUE;\r\n    protected _inverseSquaredRange = 0;\r\n\r\n    /**\r\n     * Defines how far from the source the light is impacting in scene units.\r\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\r\n     */\r\n    @serialize()\r\n    public get range(): number {\r\n        return this._range;\r\n    }\r\n    /**\r\n     * Defines how far from the source the light is impacting in scene units.\r\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\r\n     */\r\n    public set range(value: number) {\r\n        this._range = value;\r\n        this._inverseSquaredRange = 1.0 / (this.range * this.range);\r\n    }\r\n\r\n    /**\r\n     * Cached photometric scale default to 1.0 as the automatic intensity mode defaults to 1.0 for every type\r\n     * of light.\r\n     */\r\n    private _photometricScale = 1.0;\r\n\r\n    private _intensityMode: number = Light.INTENSITYMODE_AUTOMATIC;\r\n    /**\r\n     * Gets the photometric scale used to interpret the intensity.\r\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\r\n     */\r\n    @serialize()\r\n    public get intensityMode(): number {\r\n        return this._intensityMode;\r\n    }\r\n    /**\r\n     * Sets the photometric scale used to interpret the intensity.\r\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\r\n     */\r\n    public set intensityMode(value: number) {\r\n        this._intensityMode = value;\r\n        this._computePhotometricScale();\r\n    }\r\n\r\n    private _radius = 0.00001;\r\n    /**\r\n     * Gets the light radius used by PBR Materials to simulate soft area lights.\r\n     */\r\n    @serialize()\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n    /**\r\n     * sets the light radius used by PBR Materials to simulate soft area lights.\r\n     */\r\n    public set radius(value: number) {\r\n        this._radius = value;\r\n        this._computePhotometricScale();\r\n    }\r\n\r\n    @serialize()\r\n    private _renderPriority: number;\r\n    /**\r\n     * Defines the rendering priority of the lights. It can help in case of fallback or number of lights\r\n     * exceeding the number allowed of the materials.\r\n     */\r\n    @expandToProperty(\"_reorderLightsInScene\")\r\n    public renderPriority: number = 0;\r\n\r\n    @serialize(\"shadowEnabled\")\r\n    private _shadowEnabled: boolean = true;\r\n    /**\r\n     * Gets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    public get shadowEnabled(): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    /**\r\n     * Sets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    public set shadowEnabled(value: boolean) {\r\n        if (this._shadowEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowEnabled = value;\r\n        this._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _includedOnlyMeshes: AbstractMesh[];\r\n    /**\r\n     * Gets the only meshes impacted by this light.\r\n     */\r\n    public get includedOnlyMeshes(): AbstractMesh[] {\r\n        return this._includedOnlyMeshes;\r\n    }\r\n    /**\r\n     * Sets the only meshes impacted by this light.\r\n     */\r\n    public set includedOnlyMeshes(value: AbstractMesh[]) {\r\n        this._includedOnlyMeshes = value;\r\n        this._hookArrayForIncludedOnly(value);\r\n    }\r\n\r\n    private _excludedMeshes: AbstractMesh[];\r\n    /**\r\n     * Gets the meshes not impacted by this light.\r\n     */\r\n    public get excludedMeshes(): AbstractMesh[] {\r\n        return this._excludedMeshes;\r\n    }\r\n    /**\r\n     * Sets the meshes not impacted by this light.\r\n     */\r\n    public set excludedMeshes(value: AbstractMesh[]) {\r\n        this._excludedMeshes = value;\r\n        this._hookArrayForExcluded(value);\r\n    }\r\n\r\n    @serialize(\"excludeWithLayerMask\")\r\n    private _excludeWithLayerMask = 0;\r\n    /**\r\n     * Gets the layer id use to find what meshes are not impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public get excludeWithLayerMask(): number {\r\n        return this._excludeWithLayerMask;\r\n    }\r\n    /**\r\n     * Sets the layer id use to find what meshes are not impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public set excludeWithLayerMask(value: number) {\r\n        this._excludeWithLayerMask = value;\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    @serialize(\"includeOnlyWithLayerMask\")\r\n    private _includeOnlyWithLayerMask = 0;\r\n    /**\r\n     * Gets the layer id use to find what meshes are impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public get includeOnlyWithLayerMask(): number {\r\n        return this._includeOnlyWithLayerMask;\r\n    }\r\n    /**\r\n     * Sets the layer id use to find what meshes are impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public set includeOnlyWithLayerMask(value: number) {\r\n        this._includeOnlyWithLayerMask = value;\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    @serialize(\"lightmapMode\")\r\n    private _lightmapMode = 0;\r\n    /**\r\n     * Gets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\r\n     */\r\n    public get lightmapMode(): number {\r\n        return this._lightmapMode;\r\n    }\r\n    /**\r\n     * Sets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\r\n     */\r\n    public set lightmapMode(value: number) {\r\n        if (this._lightmapMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._lightmapMode = value;\r\n        this._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Returns the view matrix.\r\n     * @param _faceIndex The index of the face for which we want to extract the view matrix. Only used for point light types.\r\n     * @returns The view matrix. Can be null, if a view matrix cannot be defined for the type of light considered (as for a hemispherical light, for example).\r\n     */\r\n    public getViewMatrix(_faceIndex?: number): Nullable<Matrix> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the projection matrix.\r\n     * Note that viewMatrix and renderList are optional and are only used by lights that calculate the projection matrix from a list of meshes (e.g. directional lights with automatic extents calculation).\r\n     * @param _viewMatrix The view transform matrix of the light (optional).\r\n     * @param _renderList The list of meshes to take into account when calculating the projection matrix (optional).\r\n     * @returns The projection matrix. Can be null, if a projection matrix cannot be defined for the type of light considered (as for a hemispherical light, for example).\r\n     */\r\n    public getProjectionMatrix(_viewMatrix?: Matrix, _renderList?: Array<AbstractMesh>): Nullable<Matrix> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Shadow generators associated to the light.\r\n     * @internal Internal use only.\r\n     */\r\n    public _shadowGenerators: Nullable<Map<Nullable<Camera>, IShadowGenerator>> = null;\r\n\r\n    /**\r\n     * @internal Internal use only.\r\n     */\r\n    public _excludedMeshesIds = new Array<string>();\r\n\r\n    /**\r\n     * @internal Internal use only.\r\n     */\r\n    public _includedOnlyMeshesIds = new Array<string>();\r\n\r\n    /**\r\n     * The current light uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    private _lastUseSpecular: boolean;\r\n\r\n    /**\r\n     * Creates a Light object in the scene.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param scene The scene the light belongs too\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.getScene().addLight(this);\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name);\r\n        this._buildUniformLayout();\r\n\r\n        this.includedOnlyMeshes = [] as AbstractMesh[];\r\n        this.excludedMeshes = [] as AbstractMesh[];\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    protected abstract _buildUniformLayout(): void;\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light information.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    public abstract transferToEffect(effect: Effect, lightIndex: string): Light;\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light textures.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public transferTexturesToEffect(effect: Effect, lightIndex: string): Light {\r\n        // Do nothing by default.\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Binds the lights information from the scene to the effect for the given mesh.\r\n     * @param lightIndex Light index\r\n     * @param scene The scene where the light belongs to\r\n     * @param effect The effect we are binding the data to\r\n     * @param useSpecular Defines if specular is supported\r\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\r\n     */\r\n    public _bindLight(lightIndex: number, scene: Scene, effect: Effect, useSpecular: boolean, receiveShadows = true): void {\r\n        const iAsString = lightIndex.toString();\r\n        let needUpdate = false;\r\n\r\n        this._uniformBuffer.bindToEffect(effect, \"Light\" + iAsString);\r\n\r\n        if (this._renderId !== scene.getRenderId() || this._lastUseSpecular !== useSpecular || !this._uniformBuffer.useUbo) {\r\n            this._renderId = scene.getRenderId();\r\n            this._lastUseSpecular = useSpecular;\r\n\r\n            const scaledIntensity = this.getScaledIntensity();\r\n\r\n            this.transferToEffect(effect, iAsString);\r\n\r\n            this.diffuse.scaleToRef(scaledIntensity, TmpColors.Color3[0]);\r\n            this._uniformBuffer.updateColor4(\"vLightDiffuse\", TmpColors.Color3[0], this.range, iAsString);\r\n            if (useSpecular) {\r\n                this.specular.scaleToRef(scaledIntensity, TmpColors.Color3[1]);\r\n                this._uniformBuffer.updateColor4(\"vLightSpecular\", TmpColors.Color3[1], this.radius, iAsString);\r\n            }\r\n            needUpdate = true;\r\n        }\r\n\r\n        // Textures might still need to be rebound.\r\n        this.transferTexturesToEffect(effect, iAsString);\r\n\r\n        // Shadows\r\n        if (scene.shadowsEnabled && this.shadowEnabled && receiveShadows) {\r\n            const shadowGenerator = this.getShadowGenerator(scene.activeCamera) ?? this.getShadowGenerator();\r\n            if (shadowGenerator) {\r\n                shadowGenerator.bindShadowLight(iAsString, effect);\r\n                needUpdate = true;\r\n            }\r\n        }\r\n\r\n        if (needUpdate) {\r\n            this._uniformBuffer.update();\r\n        } else {\r\n            this._uniformBuffer.bindUniformBuffer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light information.\r\n     * @param effect The effect to update\r\n     * @param lightDataUniformName The uniform used to store light data (position or direction)\r\n     * @returns The light\r\n     */\r\n    public abstract transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string): Light;\r\n\r\n    /**\r\n     * Returns the string \"Light\".\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Light\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isLight = true;\r\n\r\n    /**\r\n     * Converts the light information to a readable string for debug purpose.\r\n     * @param fullDetails Supports for multiple levels of logging within scene loading\r\n     * @returns the human readable light info\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + [\"Point\", \"Directional\", \"Spot\", \"Hemispheric\"][this.getTypeID()];\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        super._syncParentEnabledState();\r\n        if (!this.isDisposed()) {\r\n            this._resyncMeshes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node.\r\n     * @param value - the new enabled state\r\n     */\r\n    public setEnabled(value: boolean): void {\r\n        super.setEnabled(value);\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    /**\r\n     * Returns the Light associated shadow generator if any.\r\n     * @param camera Camera for which the shadow generator should be retrieved (default: null). If null, retrieves the default shadow generator\r\n     * @returns the associated shadow generator.\r\n     */\r\n    public getShadowGenerator(camera: Nullable<Camera> = null): Nullable<IShadowGenerator> {\r\n        if (this._shadowGenerators === null) {\r\n            return null;\r\n        }\r\n\r\n        return this._shadowGenerators.get(camera) ?? null;\r\n    }\r\n\r\n    /**\r\n     * Returns all the shadow generators associated to this light\r\n     * @returns\r\n     */\r\n    public getShadowGenerators(): Nullable<Map<Nullable<Camera>, IShadowGenerator>> {\r\n        return this._shadowGenerators;\r\n    }\r\n\r\n    /**\r\n     * Returns a Vector3, the absolute light position in the World.\r\n     * @returns the world space position of the light\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Specifies if the light will affect the passed mesh.\r\n     * @param mesh The mesh to test against the light\r\n     * @returns true the mesh is affected otherwise, false.\r\n     */\r\n    public canAffectMesh(mesh: AbstractMesh): boolean {\r\n        if (!mesh) {\r\n            return true;\r\n        }\r\n\r\n        if (this.includedOnlyMeshes && this.includedOnlyMeshes.length > 0 && this.includedOnlyMeshes.indexOf(mesh) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (this.excludedMeshes && this.excludedMeshes.length > 0 && this.excludedMeshes.indexOf(mesh) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        if (this.includeOnlyWithLayerMask !== 0 && (this.includeOnlyWithLayerMask & mesh.layerMask) === 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this.excludeWithLayerMask !== 0 && this.excludeWithLayerMask & mesh.layerMask) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        if (this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.dispose();\r\n            }\r\n            this._shadowGenerators = null;\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.lights.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.lights.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Remove from meshes\r\n        for (const mesh of this.getScene().meshes) {\r\n            mesh._removeLightSource(this, true);\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Remove from scene\r\n        this.getScene().removeLight(this);\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Returns the light type ID (integer).\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the intensity scaled by the Photometric Scale according to the light type and intensity mode.\r\n     * @returns the scaled intensity in intensity mode unit\r\n     */\r\n    public getScaledIntensity() {\r\n        return this._photometricScale * this.intensity;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Light object, named \"name\", from the current one.\r\n     * @param name The name of the cloned light\r\n     * @param newParent The parent of this light, if it has one\r\n     * @returns the new created light\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null): Nullable<Light> {\r\n        const constructor = Light.GetConstructorFromName(this.getTypeID(), name, this.getScene());\r\n\r\n        if (!constructor) {\r\n            return null;\r\n        }\r\n        const clonedLight = SerializationHelper.Clone(constructor, this);\r\n        if (name) {\r\n            clonedLight.name = name;\r\n        }\r\n        if (newParent) {\r\n            clonedLight.parent = newParent;\r\n        }\r\n        clonedLight.setEnabled(this.isEnabled());\r\n\r\n        this.onClonedObservable.notifyObservers(clonedLight);\r\n\r\n        return clonedLight;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current light into a Serialization object.\r\n     * @returns the serialized object.\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getTypeID();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Inclusion / exclusions\r\n        if (this.excludedMeshes.length > 0) {\r\n            serializationObject.excludedMeshesIds = [];\r\n            this.excludedMeshes.forEach((mesh: AbstractMesh) => {\r\n                serializationObject.excludedMeshesIds.push(mesh.id);\r\n            });\r\n        }\r\n\r\n        if (this.includedOnlyMeshes.length > 0) {\r\n            serializationObject.includedOnlyMeshesIds = [];\r\n            this.includedOnlyMeshes.forEach((mesh: AbstractMesh) => {\r\n                serializationObject.includedOnlyMeshesIds.push(mesh.id);\r\n            });\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new typed light from the passed type (integer) : point light = 0, directional light = 1, spot light = 2, hemispheric light = 3.\r\n     * This new light is named \"name\" and added to the passed scene.\r\n     * @param type Type according to the types available in Light.LIGHTTYPEID_x\r\n     * @param name The friendly name of the light\r\n     * @param scene The scene the new light will belong to\r\n     * @returns the constructor function\r\n     */\r\n    static GetConstructorFromName(type: number, name: string, scene: Scene): Nullable<() => Light> {\r\n        const constructorFunc = Node.Construct(\"Light_Type_\" + type, name, scene);\r\n\r\n        if (constructorFunc) {\r\n            return <() => Light>constructorFunc;\r\n        }\r\n\r\n        // Default to no light for none present once.\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the passed \"parsedLight\" and returns a new instanced Light from this parsing.\r\n     * @param parsedLight The JSON representation of the light\r\n     * @param scene The scene to create the parsed light in\r\n     * @returns the created light after parsing\r\n     */\r\n    public static Parse(parsedLight: any, scene: Scene): Nullable<Light> {\r\n        const constructor = Light.GetConstructorFromName(parsedLight.type, parsedLight.name, scene);\r\n\r\n        if (!constructor) {\r\n            return null;\r\n        }\r\n\r\n        const light = SerializationHelper.Parse(constructor, parsedLight, scene);\r\n\r\n        // Inclusion / exclusions\r\n        if (parsedLight.excludedMeshesIds) {\r\n            light._excludedMeshesIds = parsedLight.excludedMeshesIds;\r\n        }\r\n\r\n        if (parsedLight.includedOnlyMeshesIds) {\r\n            light._includedOnlyMeshesIds = parsedLight.includedOnlyMeshesIds;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedLight.parentId !== undefined) {\r\n            light._waitingParentId = parsedLight.parentId;\r\n        }\r\n\r\n        if (parsedLight.parentInstanceIndex !== undefined) {\r\n            light._waitingParentInstanceIndex = parsedLight.parentInstanceIndex;\r\n        }\r\n\r\n        // Falloff\r\n        if (parsedLight.falloffType !== undefined) {\r\n            light.falloffType = parsedLight.falloffType;\r\n        }\r\n\r\n        // Lightmaps\r\n        if (parsedLight.lightmapMode !== undefined) {\r\n            light.lightmapMode = parsedLight.lightmapMode;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedLight.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedLight.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedLight.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    light.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(light, parsedLight, scene);\r\n        }\r\n\r\n        if (parsedLight.autoAnimate) {\r\n            scene.beginAnimation(light, parsedLight.autoAnimateFrom, parsedLight.autoAnimateTo, parsedLight.autoAnimateLoop, parsedLight.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedLight.isEnabled !== undefined) {\r\n            light.setEnabled(parsedLight.isEnabled);\r\n        }\r\n\r\n        return light;\r\n    }\r\n\r\n    private _hookArrayForExcluded(array: AbstractMesh[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: AbstractMesh[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            for (const item of items) {\r\n                item._resyncLightSource(this);\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            for (const item of deleted) {\r\n                item._resyncLightSource(this);\r\n            }\r\n\r\n            return deleted;\r\n        };\r\n\r\n        for (const item of array) {\r\n            item._resyncLightSource(this);\r\n        }\r\n    }\r\n\r\n    private _hookArrayForIncludedOnly(array: AbstractMesh[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: AbstractMesh[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._resyncMeshes();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._resyncMeshes();\r\n\r\n            return deleted;\r\n        };\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    private _resyncMeshes() {\r\n        for (const mesh of this.getScene().meshes) {\r\n            mesh._resyncLightSource(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forces the meshes to update their light related information in their rendering used effects\r\n     * @internal Internal Use Only\r\n     */\r\n    public _markMeshesAsLightDirty() {\r\n        for (const mesh of this.getScene().meshes) {\r\n            if (mesh.lightSources.indexOf(this) !== -1) {\r\n                mesh._markSubMeshesAsLightDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recomputes the cached photometric scale if needed.\r\n     */\r\n    private _computePhotometricScale(): void {\r\n        this._photometricScale = this._getPhotometricScale();\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * @returns the Photometric Scale according to the light type and intensity mode.\r\n     */\r\n    private _getPhotometricScale() {\r\n        let photometricScale = 0.0;\r\n        const lightTypeID = this.getTypeID();\r\n\r\n        //get photometric mode\r\n        let photometricMode = this.intensityMode;\r\n        if (photometricMode === Light.INTENSITYMODE_AUTOMATIC) {\r\n            if (lightTypeID === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\r\n                photometricMode = Light.INTENSITYMODE_ILLUMINANCE;\r\n            } else {\r\n                photometricMode = Light.INTENSITYMODE_LUMINOUSINTENSITY;\r\n            }\r\n        }\r\n\r\n        //compute photometric scale\r\n        switch (lightTypeID) {\r\n            case Light.LIGHTTYPEID_POINTLIGHT:\r\n            case Light.LIGHTTYPEID_SPOTLIGHT:\r\n                switch (photometricMode) {\r\n                    case Light.INTENSITYMODE_LUMINOUSPOWER:\r\n                        photometricScale = 1.0 / (4.0 * Math.PI);\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINOUSINTENSITY:\r\n                        photometricScale = 1.0;\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINANCE:\r\n                        photometricScale = this.radius * this.radius;\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case Light.LIGHTTYPEID_DIRECTIONALLIGHT:\r\n                switch (photometricMode) {\r\n                    case Light.INTENSITYMODE_ILLUMINANCE:\r\n                        photometricScale = 1.0;\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINANCE: {\r\n                        // When radius (and therefore solid angle) is non-zero a directional lights brightness can be specified via central (peak) luminance.\r\n                        // For a directional light the 'radius' defines the angular radius (in radians) rather than world-space radius (e.g. in metres).\r\n                        let apexAngleRadians = this.radius;\r\n                        // Impose a minimum light angular size to avoid the light becoming an infinitely small angular light source (i.e. a dirac delta function).\r\n                        apexAngleRadians = Math.max(apexAngleRadians, 0.001);\r\n                        const solidAngle = 2.0 * Math.PI * (1.0 - Math.cos(apexAngleRadians));\r\n                        photometricScale = solidAngle;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case Light.LIGHTTYPEID_HEMISPHERICLIGHT:\r\n                // No fall off in hemispheric light.\r\n                photometricScale = 1.0;\r\n                break;\r\n        }\r\n        return photometricScale;\r\n    }\r\n\r\n    /**\r\n     * Reorder the light in the scene according to their defined priority.\r\n     * @internal Internal Use Only\r\n     */\r\n    public _reorderLightsInScene(): void {\r\n        const scene = this.getScene();\r\n        if (this._renderPriority != 0) {\r\n            scene.requireLightSorting = true;\r\n        }\r\n        this.getScene().sortLightsByPriority();\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public abstract prepareLightSpecificDefines(defines: any, lightIndex: number): void;\r\n}\r\n", "import { AbstractScene } from \"./abstractScene\";\r\nimport type { Scene } from \"./scene\";\r\nimport { Mesh } from \"./Meshes/mesh\";\r\nimport { TransformNode } from \"./Meshes/transformNode\";\r\nimport type { Skeleton } from \"./Bones/skeleton\";\r\nimport type { AnimationGroup } from \"./Animations/animationGroup\";\r\nimport type { Animatable } from \"./Animations/animatable\";\r\nimport { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { MultiMaterial } from \"./Materials/multiMaterial\";\r\nimport type { Material } from \"./Materials/material\";\r\nimport { Logger } from \"./Misc/logger\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { Node } from \"./node\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport type { ThinEngine } from \"./Engines/thinEngine\";\r\nimport { InstancedMesh } from \"./Meshes/instancedMesh\";\r\nimport { Light } from \"./Lights/light\";\r\nimport { Camera } from \"./Cameras/camera\";\r\nimport { Tools } from \"./Misc/tools\";\r\n\r\n/**\r\n * Set of assets to keep when moving a scene into an asset container.\r\n */\r\nexport class KeepAssets extends AbstractScene {}\r\n\r\n/**\r\n * Class used to store the output of the AssetContainer.instantiateAllMeshesToScene function\r\n */\r\nexport class InstantiatedEntries {\r\n    /**\r\n     * List of new root nodes (eg. nodes with no parent)\r\n     */\r\n    public rootNodes: Node[] = [];\r\n\r\n    /**\r\n     * List of new skeletons\r\n     */\r\n    public skeletons: Skeleton[] = [];\r\n\r\n    /**\r\n     * List of new animation groups\r\n     */\r\n    public animationGroups: AnimationGroup[] = [];\r\n\r\n    /**\r\n     * Disposes the instantiated entries from the scene\r\n     */\r\n    public dispose() {\r\n        this.rootNodes.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.rootNodes.length = 0;\r\n\r\n        this.skeletons.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.skeletons.length = 0;\r\n\r\n        this.animationGroups.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.animationGroups.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Container with a set of assets that can be added or removed from a scene.\r\n */\r\nexport class AssetContainer extends AbstractScene {\r\n    private _wasAddedToScene = false;\r\n    private _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * The scene the AssetContainer belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Instantiates an AssetContainer.\r\n     * @param scene The scene the AssetContainer belongs to.\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        super();\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scene = scene;\r\n        this[\"sounds\"] = [];\r\n        this[\"effectLayers\"] = [];\r\n        this[\"layers\"] = [];\r\n        this[\"lensFlareSystems\"] = [];\r\n        this[\"proceduralTextures\"] = [];\r\n        this[\"reflectionProbes\"] = [];\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            if (!this._wasAddedToScene) {\r\n                this.dispose();\r\n            }\r\n        });\r\n\r\n        this._onContextRestoredObserver = scene.getEngine().onContextRestoredObservable.add(() => {\r\n            for (const geometry of this.geometries) {\r\n                geometry._rebuild();\r\n            }\r\n\r\n            for (const mesh of this.meshes) {\r\n                mesh._rebuild();\r\n            }\r\n\r\n            for (const system of this.particleSystems) {\r\n                system.rebuild();\r\n            }\r\n\r\n            for (const texture of this.textures) {\r\n                texture._rebuild();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a list of nodes, return a topological sorting of them.\r\n     * @param nodes\r\n     * @returns a sorted array of nodes\r\n     */\r\n    private _topologicalSort(nodes: Node[]): Node[] {\r\n        const nodesUidMap = new Map<number, Node>();\r\n\r\n        for (const node of nodes) {\r\n            nodesUidMap.set(node.uniqueId, node);\r\n        }\r\n\r\n        const dependencyGraph = {\r\n            dependsOn: new Map<number, Set<number>>(), // given a node id, what are the ids of the nodes it depends on\r\n            dependedBy: new Map<number, Set<number>>(), // given a node id, what are the ids of the nodes that depend on it\r\n        };\r\n\r\n        // Build the dependency graph given the list of nodes\r\n\r\n        // First pass: Initialize the empty dependency graph\r\n        for (const node of nodes) {\r\n            const nodeId = node.uniqueId;\r\n            dependencyGraph.dependsOn.set(nodeId, new Set<number>());\r\n            dependencyGraph.dependedBy.set(nodeId, new Set<number>());\r\n        }\r\n\r\n        // Second pass: Populate the dependency graph. We assume that we\r\n        // don't need to check for cycles here, as the scene graph cannot\r\n        // contain cycles. Our graph also already contains all transitive\r\n        // dependencies because getDescendants returns the transitive\r\n        // dependencies by default.\r\n        for (const node of nodes) {\r\n            const nodeId = node.uniqueId;\r\n            const dependsOn = dependencyGraph.dependsOn.get(nodeId)!;\r\n            if (node instanceof InstancedMesh) {\r\n                const masterMesh = node.sourceMesh;\r\n                if (nodesUidMap.has(masterMesh.uniqueId)) {\r\n                    dependsOn.add(masterMesh.uniqueId);\r\n                    dependencyGraph.dependedBy.get(masterMesh.uniqueId)!.add(nodeId);\r\n                }\r\n            }\r\n            const dependedBy = dependencyGraph.dependedBy.get(nodeId)!;\r\n\r\n            for (const child of node.getDescendants()) {\r\n                const childId = child.uniqueId;\r\n                if (nodesUidMap.has(childId)) {\r\n                    dependedBy.add(childId);\r\n\r\n                    const childDependsOn = dependencyGraph.dependsOn.get(childId)!;\r\n                    childDependsOn.add(nodeId);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Third pass: Topological sort\r\n        const sortedNodes: Node[] = [];\r\n\r\n        // First: Find all nodes that have no dependencies\r\n        const leaves: Node[] = [];\r\n        for (const node of nodes) {\r\n            const nodeId = node.uniqueId;\r\n            if (dependencyGraph.dependsOn.get(nodeId)!.size === 0) {\r\n                leaves.push(node);\r\n                nodesUidMap.delete(nodeId);\r\n            }\r\n        }\r\n\r\n        const visitList = leaves;\r\n        while (visitList.length > 0) {\r\n            const nodeToVisit = visitList.shift()!;\r\n\r\n            sortedNodes.push(nodeToVisit);\r\n\r\n            // Remove the node from the dependency graph\r\n            // When a node is visited, we know that dependsOn is empty.\r\n            // So we only need to remove the node from dependedBy.\r\n            const dependedByVisitedNode = dependencyGraph.dependedBy.get(nodeToVisit.uniqueId)!;\r\n            // Array.from(x.values()) is to make the TS compiler happy\r\n            for (const dependedByVisitedNodeId of Array.from(dependedByVisitedNode.values())) {\r\n                const dependsOnDependedByVisitedNode = dependencyGraph.dependsOn.get(dependedByVisitedNodeId)!;\r\n                dependsOnDependedByVisitedNode.delete(nodeToVisit.uniqueId);\r\n\r\n                if (dependsOnDependedByVisitedNode.size === 0 && nodesUidMap.get(dependedByVisitedNodeId)) {\r\n                    visitList.push(nodesUidMap.get(dependedByVisitedNodeId)!);\r\n                    nodesUidMap.delete(dependedByVisitedNodeId);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nodesUidMap.size > 0) {\r\n            Logger.Error(\"SceneSerializer._topologicalSort: There were unvisited nodes:\");\r\n            nodesUidMap.forEach((node) => Logger.Error(node.name));\r\n        }\r\n\r\n        return sortedNodes;\r\n    }\r\n\r\n    private _addNodeAndDescendantsToList(list: Node[], addedIds: Set<number>, rootNode?: Node, predicate?: (entity: any) => boolean) {\r\n        if (!rootNode || (predicate && !predicate(rootNode)) || addedIds.has(rootNode.uniqueId)) {\r\n            return;\r\n        }\r\n\r\n        list.push(rootNode);\r\n        addedIds.add(rootNode.uniqueId);\r\n\r\n        for (const child of rootNode.getDescendants(true)) {\r\n            this._addNodeAndDescendantsToList(list, addedIds, child, predicate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a specific node is contained in this asset container.\r\n     * @param node the node to check\r\n     * @returns true if the node is contained in this container, otherwise false.\r\n     */\r\n    private _isNodeInContainer(node: Node) {\r\n        if (node instanceof AbstractMesh && this.meshes.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        if (node instanceof TransformNode && this.transformNodes.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        if (node instanceof Light && this.lights.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        if (node instanceof Camera && this.cameras.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * For every node in the scene, check if its parent node is also in the scene.\r\n     * @returns true if every node's parent is also in the scene, otherwise false.\r\n     */\r\n    private _isValidHierarchy() {\r\n        for (const node of this.meshes) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        for (const node of this.transformNodes) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        for (const node of this.lights) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        for (const node of this.cameras) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Instantiate or clone all meshes and add the new ones to the scene.\r\n     * Skeletons and animation groups will all be cloned\r\n     * @param nameFunction defines an optional function used to get new names for clones\r\n     * @param cloneMaterials defines an optional boolean that defines if materials must be cloned as well (false by default)\r\n     * @param options defines an optional list of options to control how to instantiate / clone models\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param options.predicate defines a predicate used to filter whih mesh to instantiate/clone\r\n     * @returns a list of rootNodes, skeletons and animation groups that were duplicated\r\n     */\r\n    public instantiateModelsToScene(\r\n        nameFunction?: (sourceName: string) => string,\r\n        cloneMaterials = false,\r\n        options?: { doNotInstantiate?: boolean | ((node: Node) => boolean); predicate?: (entity: any) => boolean }\r\n    ): InstantiatedEntries {\r\n        if (!this._isValidHierarchy()) {\r\n            Tools.Warn(\"SceneSerializer.InstantiateModelsToScene: The Asset Container hierarchy is not valid.\");\r\n        }\r\n        const conversionMap: { [key: number]: number } = {};\r\n        const storeMap: { [key: number]: any } = {};\r\n        const result = new InstantiatedEntries();\r\n        const alreadySwappedSkeletons: Skeleton[] = [];\r\n        const alreadySwappedMaterials: Material[] = [];\r\n\r\n        const localOptions = {\r\n            doNotInstantiate: true,\r\n            ...options,\r\n        };\r\n\r\n        const onClone = (source: Node, clone: Node) => {\r\n            conversionMap[source.uniqueId] = clone.uniqueId;\r\n            storeMap[clone.uniqueId] = clone;\r\n\r\n            if (nameFunction) {\r\n                clone.name = nameFunction(source.name);\r\n            }\r\n\r\n            if (clone instanceof Mesh) {\r\n                const clonedMesh = clone as Mesh;\r\n\r\n                if (clonedMesh.morphTargetManager) {\r\n                    const oldMorphTargetManager = (source as Mesh).morphTargetManager!;\r\n                    clonedMesh.morphTargetManager = oldMorphTargetManager.clone();\r\n\r\n                    for (let index = 0; index < oldMorphTargetManager.numTargets; index++) {\r\n                        const oldTarget = oldMorphTargetManager.getTarget(index);\r\n                        const newTarget = clonedMesh.morphTargetManager.getTarget(index);\r\n\r\n                        conversionMap[oldTarget.uniqueId] = newTarget.uniqueId;\r\n                        storeMap[newTarget.uniqueId] = newTarget;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const nodesToSort: Node[] = [];\r\n        const idsOnSortList = new Set<number>();\r\n\r\n        for (const transformNode of this.transformNodes) {\r\n            if (transformNode.parent === null) {\r\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, transformNode, localOptions.predicate);\r\n            }\r\n        }\r\n\r\n        for (const mesh of this.meshes) {\r\n            if (mesh.parent === null) {\r\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, mesh, localOptions.predicate);\r\n            }\r\n        }\r\n\r\n        // Topologically sort nodes by parenting/instancing relationships so that all resources are in place\r\n        // when a given node is instantiated.\r\n        const sortedNodes = this._topologicalSort(nodesToSort);\r\n\r\n        const onNewCreated = (source: Node, clone: Node) => {\r\n            onClone(source, clone);\r\n\r\n            if (source.parent) {\r\n                const replicatedParentId = conversionMap[source.parent.uniqueId];\r\n                const replicatedParent = storeMap[replicatedParentId];\r\n\r\n                if (replicatedParent) {\r\n                    clone.parent = replicatedParent;\r\n                } else {\r\n                    clone.parent = source.parent;\r\n                }\r\n            }\r\n\r\n            if ((clone as any).position && (source as any).position) {\r\n                (clone as any).position.copyFrom((source as any).position);\r\n            }\r\n            if ((clone as any).rotationQuaternion && (source as any).rotationQuaternion) {\r\n                (clone as any).rotationQuaternion.copyFrom((source as any).rotationQuaternion);\r\n            }\r\n            if ((clone as any).rotation && (source as any).rotation) {\r\n                (clone as any).rotation.copyFrom((source as any).rotation);\r\n            }\r\n            if ((clone as any).scaling && (source as any).scaling) {\r\n                (clone as any).scaling.copyFrom((source as any).scaling);\r\n            }\r\n\r\n            if ((clone as any).material) {\r\n                const mesh = clone as AbstractMesh;\r\n\r\n                if (mesh.material) {\r\n                    if (cloneMaterials) {\r\n                        const sourceMaterial = (source as AbstractMesh).material!;\r\n\r\n                        if (alreadySwappedMaterials.indexOf(sourceMaterial) === -1) {\r\n                            let swap = sourceMaterial.clone(nameFunction ? nameFunction(sourceMaterial.name) : \"Clone of \" + sourceMaterial.name)!;\r\n                            alreadySwappedMaterials.push(sourceMaterial);\r\n                            conversionMap[sourceMaterial.uniqueId] = swap.uniqueId;\r\n                            storeMap[swap.uniqueId] = swap;\r\n\r\n                            if (sourceMaterial.getClassName() === \"MultiMaterial\") {\r\n                                const multi = sourceMaterial as MultiMaterial;\r\n\r\n                                for (const material of multi.subMaterials) {\r\n                                    if (!material) {\r\n                                        continue;\r\n                                    }\r\n                                    swap = material.clone(nameFunction ? nameFunction(material.name) : \"Clone of \" + material.name)!;\r\n                                    alreadySwappedMaterials.push(material);\r\n                                    conversionMap[material.uniqueId] = swap.uniqueId;\r\n                                    storeMap[swap.uniqueId] = swap;\r\n                                }\r\n\r\n                                multi.subMaterials = multi.subMaterials.map((m) => m && storeMap[conversionMap[m.uniqueId]]);\r\n                            }\r\n                        }\r\n\r\n                        if (mesh.getClassName() !== \"InstancedMesh\") {\r\n                            mesh.material = storeMap[conversionMap[sourceMaterial.uniqueId]];\r\n                        }\r\n                    } else {\r\n                        if (mesh.material.getClassName() === \"MultiMaterial\") {\r\n                            if (this.scene.multiMaterials.indexOf(mesh.material as MultiMaterial) === -1) {\r\n                                this.scene.addMultiMaterial(mesh.material as MultiMaterial);\r\n                            }\r\n                        } else {\r\n                            if (this.scene.materials.indexOf(mesh.material) === -1) {\r\n                                this.scene.addMaterial(mesh.material);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (clone.parent === null) {\r\n                result.rootNodes.push(clone);\r\n            }\r\n        };\r\n\r\n        sortedNodes.forEach((node) => {\r\n            if (node.getClassName() === \"InstancedMesh\") {\r\n                const instancedNode = node as InstancedMesh;\r\n                const sourceMesh = instancedNode.sourceMesh;\r\n                const replicatedSourceId = conversionMap[sourceMesh.uniqueId];\r\n                const replicatedSource = typeof replicatedSourceId === \"number\" ? storeMap[replicatedSourceId] : sourceMesh;\r\n                const replicatedInstancedNode = replicatedSource.createInstance(instancedNode.name);\r\n                onNewCreated(instancedNode, replicatedInstancedNode);\r\n            } else {\r\n                // Mesh or TransformNode\r\n                let canInstance = true;\r\n                if (\r\n                    node.getClassName() === \"TransformNode\" ||\r\n                    node.getClassName() === \"Node\" ||\r\n                    (node as Mesh).skeleton ||\r\n                    !(node as any).getTotalVertices ||\r\n                    (node as Mesh).getTotalVertices() === 0\r\n                ) {\r\n                    // Transform nodes, skinned meshes, and meshes with no vertices can never be instanced!\r\n                    canInstance = false;\r\n                } else if (localOptions.doNotInstantiate) {\r\n                    if (typeof localOptions.doNotInstantiate === \"function\") {\r\n                        canInstance = !localOptions.doNotInstantiate(node);\r\n                    } else {\r\n                        canInstance = !localOptions.doNotInstantiate;\r\n                    }\r\n                }\r\n                const replicatedNode = canInstance ? (node as Mesh).createInstance(`instance of ${node.name}`) : node.clone(`Clone of ${node.name}`, null, true);\r\n                if (!replicatedNode) {\r\n                    throw new Error(`Could not clone or instantiate node on Asset Container ${node.name}`);\r\n                }\r\n                onNewCreated(node, replicatedNode);\r\n            }\r\n        });\r\n\r\n        this.skeletons.forEach((s) => {\r\n            if (localOptions.predicate && !localOptions.predicate(s)) {\r\n                return;\r\n            }\r\n\r\n            const clone = s.clone(nameFunction ? nameFunction(s.name) : \"Clone of \" + s.name);\r\n\r\n            for (const m of this.meshes) {\r\n                if (m.skeleton === s && !m.isAnInstance) {\r\n                    const copy = storeMap[conversionMap[m.uniqueId]] as Mesh;\r\n                    if (!copy || copy.isAnInstance) {\r\n                        continue;\r\n                    }\r\n                    copy.skeleton = clone;\r\n\r\n                    if (alreadySwappedSkeletons.indexOf(clone) !== -1) {\r\n                        continue;\r\n                    }\r\n\r\n                    alreadySwappedSkeletons.push(clone);\r\n\r\n                    // Check if bones are mesh linked\r\n                    for (const bone of clone.bones) {\r\n                        if (bone._linkedTransformNode) {\r\n                            bone._linkedTransformNode = storeMap[conversionMap[bone._linkedTransformNode.uniqueId]];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            result.skeletons.push(clone);\r\n        });\r\n\r\n        this.animationGroups.forEach((o) => {\r\n            if (localOptions.predicate && !localOptions.predicate(o)) {\r\n                return;\r\n            }\r\n\r\n            const clone = o.clone(nameFunction ? nameFunction(o.name) : \"Clone of \" + o.name, (oldTarget) => {\r\n                const newTarget = storeMap[conversionMap[oldTarget.uniqueId]];\r\n\r\n                return newTarget || oldTarget;\r\n            });\r\n\r\n            result.animationGroups.push(clone);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds all the assets from the container to the scene.\r\n     */\r\n    public addAllToScene() {\r\n        if (this._wasAddedToScene) {\r\n            return;\r\n        }\r\n        if (!this._isValidHierarchy()) {\r\n            Tools.Warn(\"SceneSerializer.addAllToScene: The Asset Container hierarchy is not valid.\");\r\n        }\r\n\r\n        this._wasAddedToScene = true;\r\n\r\n        this.addToScene(null);\r\n\r\n        if (this.environmentTexture) {\r\n            this.scene.environmentTexture = this.environmentTexture;\r\n        }\r\n\r\n        for (const component of this.scene._serializableComponents) {\r\n            component.addFromContainer(this);\r\n        }\r\n\r\n        this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n        this._onContextRestoredObserver = null;\r\n    }\r\n\r\n    /**\r\n     * Adds assets from the container to the scene.\r\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\r\n     */\r\n    public addToScene(predicate: Nullable<(entity: any) => boolean> = null) {\r\n        const addedNodes: Node[] = [];\r\n        this.cameras.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addCamera(o);\r\n            addedNodes.push(o);\r\n        });\r\n        this.lights.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addLight(o);\r\n            addedNodes.push(o);\r\n        });\r\n        this.meshes.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addMesh(o);\r\n            addedNodes.push(o);\r\n        });\r\n        this.skeletons.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addSkeleton(o);\r\n        });\r\n        this.animations.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addAnimation(o);\r\n        });\r\n        this.animationGroups.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addAnimationGroup(o);\r\n        });\r\n        this.multiMaterials.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addMultiMaterial(o);\r\n        });\r\n        this.materials.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addMaterial(o);\r\n        });\r\n        this.morphTargetManagers.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addMorphTargetManager(o);\r\n        });\r\n        this.geometries.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addGeometry(o);\r\n        });\r\n        this.transformNodes.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addTransformNode(o);\r\n            addedNodes.push(o);\r\n        });\r\n        this.actionManagers.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addActionManager(o);\r\n        });\r\n        this.textures.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addTexture(o);\r\n        });\r\n        this.reflectionProbes.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.addReflectionProbe(o);\r\n        });\r\n\r\n        for (const addedNode of addedNodes) {\r\n            // If node was added to the scene, but parent is not in the scene, break the relationship\r\n            if (addedNode.parent && this.scene.getNodes().indexOf(addedNode.parent) === -1) {\r\n                // Use setParent to keep transform if possible\r\n                if ((addedNode as TransformNode).setParent) {\r\n                    (addedNode as TransformNode).setParent(null);\r\n                } else {\r\n                    addedNode.parent = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the assets in the container from the scene\r\n     */\r\n    public removeAllFromScene() {\r\n        if (!this._isValidHierarchy()) {\r\n            Tools.Warn(\"SceneSerializer.removeAllFromScene: The Asset Container hierarchy is not valid.\");\r\n        }\r\n\r\n        this._wasAddedToScene = false;\r\n\r\n        this.removeFromScene(null);\r\n\r\n        if (this.environmentTexture === this.scene.environmentTexture) {\r\n            this.scene.environmentTexture = null;\r\n        }\r\n\r\n        for (const component of this.scene._serializableComponents) {\r\n            component.removeFromContainer(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes assets in the container from the scene\r\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\r\n     */\r\n    public removeFromScene(predicate: Nullable<(entity: any) => boolean> = null) {\r\n        this.cameras.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeCamera(o);\r\n        });\r\n        this.lights.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeLight(o);\r\n        });\r\n        this.meshes.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeMesh(o, true);\r\n        });\r\n        this.skeletons.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeSkeleton(o);\r\n        });\r\n        this.animations.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeAnimation(o);\r\n        });\r\n        this.animationGroups.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeAnimationGroup(o);\r\n        });\r\n        this.multiMaterials.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeMultiMaterial(o);\r\n        });\r\n        this.materials.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeMaterial(o);\r\n        });\r\n        this.morphTargetManagers.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeMorphTargetManager(o);\r\n        });\r\n        this.geometries.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeGeometry(o);\r\n        });\r\n        this.transformNodes.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeTransformNode(o);\r\n        });\r\n        this.actionManagers.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeActionManager(o);\r\n        });\r\n        this.textures.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeTexture(o);\r\n        });\r\n        this.reflectionProbes.forEach((o) => {\r\n            if (predicate && !predicate(o)) {\r\n                return;\r\n            }\r\n            this.scene.removeReflectionProbe(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes all the assets in the container\r\n     */\r\n    public dispose() {\r\n        this.cameras.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.cameras.length = 0;\r\n\r\n        this.lights.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.lights.length = 0;\r\n\r\n        this.meshes.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.meshes.length = 0;\r\n\r\n        this.skeletons.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.skeletons.length = 0;\r\n\r\n        this.animationGroups.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.animationGroups.length = 0;\r\n\r\n        this.multiMaterials.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.multiMaterials.length = 0;\r\n\r\n        this.materials.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.materials.length = 0;\r\n\r\n        this.geometries.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.geometries.length = 0;\r\n\r\n        this.transformNodes.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.transformNodes.length = 0;\r\n\r\n        this.actionManagers.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.actionManagers.length = 0;\r\n\r\n        this.textures.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.textures.length = 0;\r\n\r\n        this.reflectionProbes.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.reflectionProbes.length = 0;\r\n\r\n        this.morphTargetManagers.slice(0).forEach((o) => {\r\n            o.dispose();\r\n        });\r\n        this.morphTargetManagers.length = 0;\r\n\r\n        if (this.environmentTexture) {\r\n            this.environmentTexture.dispose();\r\n            this.environmentTexture = null;\r\n        }\r\n\r\n        for (const component of this.scene._serializableComponents) {\r\n            component.removeFromContainer(this, true);\r\n        }\r\n\r\n        if (this._onContextRestoredObserver) {\r\n            this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n            this._onContextRestoredObserver = null;\r\n        }\r\n    }\r\n\r\n    private _moveAssets<T>(sourceAssets: T[], targetAssets: T[], keepAssets: T[]): void {\r\n        if (!sourceAssets || !targetAssets) {\r\n            return;\r\n        }\r\n\r\n        for (const asset of sourceAssets) {\r\n            let move = true;\r\n            if (keepAssets) {\r\n                for (const keepAsset of keepAssets) {\r\n                    if (asset === keepAsset) {\r\n                        move = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (move) {\r\n                targetAssets.push(asset);\r\n                (asset as any)._parentContainer = this;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the assets contained in the scene and adds them to the container.\r\n     * @param keepAssets Set of assets to keep in the scene. (default: empty)\r\n     */\r\n    public moveAllFromScene(keepAssets?: KeepAssets): void {\r\n        this._wasAddedToScene = false;\r\n\r\n        if (keepAssets === undefined) {\r\n            keepAssets = new KeepAssets();\r\n        }\r\n\r\n        for (const key in this) {\r\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\r\n                (<any>this)[key] = (<any>this)[key] || (key === \"_environmentTexture\" ? null : []);\r\n                this._moveAssets((<any>this.scene)[key], (<any>this)[key], (<any>keepAssets)[key]);\r\n            }\r\n        }\r\n\r\n        this.environmentTexture = this.scene.environmentTexture;\r\n\r\n        this.removeAllFromScene();\r\n    }\r\n\r\n    /**\r\n     * Adds all meshes in the asset container to a root mesh that can be used to position all the contained meshes. The root mesh is then added to the front of the meshes in the assetContainer.\r\n     * @returns the root mesh\r\n     */\r\n    public createRootMesh() {\r\n        const rootMesh = new Mesh(\"assetContainerRootMesh\", this.scene);\r\n        this.meshes.forEach((m) => {\r\n            if (!m.parent) {\r\n                rootMesh.addChild(m);\r\n            }\r\n        });\r\n        this.meshes.unshift(rootMesh);\r\n        return rootMesh;\r\n    }\r\n\r\n    /**\r\n     * Merge animations (direct and animation groups) from this asset container into a scene\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param animatables set of animatables to retarget to a node from the scene\r\n     * @param targetConverter defines a function used to convert animation targets from the asset container to the scene (default: search node by name)\r\n     * @returns an array of the new AnimationGroup added to the scene (empty array if none)\r\n     */\r\n    public mergeAnimationsTo(\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        animatables: Animatable[],\r\n        targetConverter: Nullable<(target: any) => Nullable<Node>> = null\r\n    ): AnimationGroup[] {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to merge animations to\");\r\n            return [];\r\n        }\r\n\r\n        const _targetConverter = targetConverter\r\n            ? targetConverter\r\n            : (target: any) => {\r\n                  let node = null;\r\n\r\n                  const targetProperty = target.animations.length ? target.animations[0].targetProperty : \"\";\r\n                  /*\r\n              BabylonJS adds special naming to targets that are children of nodes.\r\n              This name attempts to remove that special naming to get the parent nodes name in case the target\r\n              can't be found in the node tree\r\n\r\n              Ex: Torso_primitive0 likely points to a Mesh primitive. We take away primitive0 and are left with \"Torso\" which is the name\r\n              of the primitive's parent.\r\n          */\r\n                  const name = target.name.split(\".\").join(\"\").split(\"_primitive\")[0];\r\n\r\n                  switch (targetProperty) {\r\n                      case \"position\":\r\n                      case \"rotationQuaternion\":\r\n                          node = scene.getTransformNodeByName(target.name) || scene.getTransformNodeByName(name);\r\n                          break;\r\n                      case \"influence\":\r\n                          node = scene.getMorphTargetByName(target.name) || scene.getMorphTargetByName(name);\r\n                          break;\r\n                      default:\r\n                          node = scene.getNodeByName(target.name) || scene.getNodeByName(name);\r\n                  }\r\n\r\n                  return node;\r\n              };\r\n\r\n        // Copy new node animations\r\n        const nodesInAC = this.getNodes();\r\n        nodesInAC.forEach((nodeInAC) => {\r\n            const nodeInScene = _targetConverter(nodeInAC);\r\n            if (nodeInScene !== null) {\r\n                // Remove old animations with same target property as a new one\r\n                for (const animationInAC of nodeInAC.animations) {\r\n                    // Doing treatment on an array for safety measure\r\n                    const animationsWithSameProperty = nodeInScene.animations.filter((animationInScene) => {\r\n                        return animationInScene.targetProperty === animationInAC.targetProperty;\r\n                    });\r\n                    for (const animationWithSameProperty of animationsWithSameProperty) {\r\n                        const index = nodeInScene.animations.indexOf(animationWithSameProperty, 0);\r\n                        if (index > -1) {\r\n                            nodeInScene.animations.splice(index, 1);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Append new animations\r\n                nodeInScene.animations = nodeInScene.animations.concat(nodeInAC.animations);\r\n            }\r\n        });\r\n\r\n        const newAnimationGroups: AnimationGroup[] = [];\r\n\r\n        // Copy new animation groups\r\n        this.animationGroups.slice().forEach((animationGroupInAC) => {\r\n            // Clone the animation group and all its animatables\r\n            newAnimationGroups.push(animationGroupInAC.clone(animationGroupInAC.name, _targetConverter));\r\n\r\n            // Remove animatables related to the asset container\r\n            animationGroupInAC.animatables.forEach((animatable) => {\r\n                animatable.stop();\r\n            });\r\n        });\r\n\r\n        // Retarget animatables\r\n        animatables.forEach((animatable) => {\r\n            const target = _targetConverter(animatable.target);\r\n\r\n            if (target) {\r\n                // Clone the animatable and retarget it\r\n                scene.beginAnimation(\r\n                    target,\r\n                    animatable.fromFrame,\r\n                    animatable.toFrame,\r\n                    animatable.loopAnimation,\r\n                    animatable.speedRatio,\r\n                    animatable.onAnimationEnd ? animatable.onAnimationEnd : undefined,\r\n                    undefined,\r\n                    true,\r\n                    undefined,\r\n                    animatable.onAnimationLoop ? animatable.onAnimationLoop : undefined\r\n                );\r\n\r\n                // Stop animation for the target in the asset container\r\n                scene.stopAnimation(animatable.target);\r\n            }\r\n        });\r\n\r\n        return newAnimationGroups;\r\n    }\r\n\r\n    /**\r\n     * @since 6.15.0\r\n     * This method checks for any node that has no parent\r\n     * and is not in the rootNodes array, and adds the node\r\n     * there, if so.\r\n     */\r\n    public populateRootNodes() {\r\n        this.rootNodes.length = 0;\r\n        this.meshes.forEach((m) => {\r\n            if (!m.parent && this.rootNodes.indexOf(m) === -1) {\r\n                this.rootNodes.push(m);\r\n            }\r\n        });\r\n        this.transformNodes.forEach((t) => {\r\n            if (!t.parent && this.rootNodes.indexOf(t) === -1) {\r\n                this.rootNodes.push(t);\r\n            }\r\n        });\r\n        this.lights.forEach((l) => {\r\n            if (!l.parent && this.rootNodes.indexOf(l) === -1) {\r\n                this.rootNodes.push(l);\r\n            }\r\n        });\r\n        this.cameras.forEach((c) => {\r\n            if (!c.parent && this.rootNodes.indexOf(c) === -1) {\r\n                this.rootNodes.push(c);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @since 6.26.0\r\n     * Given a root asset, this method will traverse its hierarchy and add it, its children and any materials/skeletons/animation groups to the container.\r\n     * @param root root node\r\n     */\r\n    public addAllAssetsToContainer(root: Node) {\r\n        if (!root) {\r\n            return;\r\n        }\r\n\r\n        const nodesToVisit: Node[] = [];\r\n        const visitedNodes = new Set<Node>();\r\n\r\n        nodesToVisit.push(root);\r\n\r\n        while (nodesToVisit.length > 0) {\r\n            const nodeToVisit = nodesToVisit.pop()!;\r\n\r\n            if (nodeToVisit instanceof Mesh) {\r\n                if (nodeToVisit.geometry && this.geometries.indexOf(nodeToVisit.geometry) === -1) {\r\n                    this.geometries.push(nodeToVisit.geometry);\r\n                }\r\n                this.meshes.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof TransformNode) {\r\n                this.transformNodes.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof Light) {\r\n                this.lights.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof Camera) {\r\n                this.cameras.push(nodeToVisit);\r\n            }\r\n\r\n            if (nodeToVisit instanceof AbstractMesh) {\r\n                if (nodeToVisit.material && this.materials.indexOf(nodeToVisit.material) === -1) {\r\n                    this.materials.push(nodeToVisit.material);\r\n                    for (const texture of nodeToVisit.material.getActiveTextures()) {\r\n                        if (this.textures.indexOf(texture) === -1) {\r\n                            this.textures.push(texture);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (nodeToVisit.skeleton && this.skeletons.indexOf(nodeToVisit.skeleton) === -1) {\r\n                    this.skeletons.push(nodeToVisit.skeleton);\r\n                }\r\n\r\n                if (nodeToVisit.morphTargetManager && this.morphTargetManagers.indexOf(nodeToVisit.morphTargetManager) === -1) {\r\n                    this.morphTargetManagers.push(nodeToVisit.morphTargetManager);\r\n                }\r\n            }\r\n\r\n            for (const child of nodeToVisit.getChildren()) {\r\n                if (!visitedNodes.has(child)) {\r\n                    nodesToVisit.push(child);\r\n                }\r\n            }\r\n\r\n            visitedNodes.add(nodeToVisit);\r\n        }\r\n\r\n        this.populateRootNodes();\r\n    }\r\n}\r\n", "import { Decode } from \"./stringTools\";\r\n\r\n/**\r\n * Interface for a data buffer\r\n */\r\nexport interface IDataBuffer {\r\n    /**\r\n     * Reads bytes from the data buffer.\r\n     * @param byteOffset The byte offset to read\r\n     * @param byteLength The byte length to read\r\n     * @returns A promise that resolves when the bytes are read\r\n     */\r\n    readAsync(byteOffset: number, byteLength: number): Promise<ArrayBufferView>;\r\n\r\n    /**\r\n     * The byte length of the buffer.\r\n     */\r\n    readonly byteLength: number;\r\n}\r\n\r\n/**\r\n * Utility class for reading from a data buffer\r\n */\r\nexport class DataReader {\r\n    /**\r\n     * The data buffer associated with this data reader.\r\n     */\r\n    public readonly buffer: IDataBuffer;\r\n\r\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\r\n    public byteOffset = 0;\r\n\r\n    private _dataView: DataView;\r\n    private _dataByteOffset: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param buffer The buffer to read\r\n     */\r\n    constructor(buffer: IDataBuffer) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    /**\r\n     * Loads the given byte length.\r\n     * @param byteLength The byte length to load\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadAsync(byteLength: number): Promise<void> {\r\n        return this.buffer.readAsync(this.byteOffset, byteLength).then((data) => {\r\n            this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n            this._dataByteOffset = 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        this.byteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a byte array from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The byte array read\r\n     */\r\n    public readUint8Array(byteLength: number): Uint8Array {\r\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a string from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The string read\r\n     */\r\n    public readString(byteLength: number): string {\r\n        return Decode(this.readUint8Array(byteLength));\r\n    }\r\n\r\n    /**\r\n     * Skips the given byte length the currently loaded data range.\r\n     * @param byteLength The byte length to skip\r\n     */\r\n    public skipBytes(byteLength: number): void {\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n    }\r\n}\r\n", "import { serialize, serializeAsVector3, serializeAsMeshReference } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Camera } from \"./camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Node } from \"../node\";\r\n\r\nNode.AddNodeConstructor(\"TargetCamera\", (name, scene) => {\r\n    return () => new TargetCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A target camera takes a mesh or position as a target and continues to look at it while it moves.\r\n * This is the base of the follow, arc rotate cameras and Free camera\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class TargetCamera extends Camera {\r\n    private static _RigCamTransformMatrix = new Matrix();\r\n    private static _TargetTransformMatrix = new Matrix();\r\n    private static _TargetFocalPoint = new Vector3();\r\n\r\n    private _tmpUpVector = Vector3.Zero();\r\n    private _tmpTargetVector = Vector3.Zero();\r\n\r\n    /**\r\n     * Define the current direction the camera is moving to\r\n     */\r\n    public cameraDirection = new Vector3(0, 0, 0);\r\n    /**\r\n     * Define the current rotation the camera is rotating to\r\n     */\r\n    public cameraRotation = new Vector2(0, 0);\r\n\r\n    /** Gets or sets a boolean indicating that the scaling of the parent hierarchy will not be taken in account by the camera */\r\n    public ignoreParentScaling = false;\r\n\r\n    /**\r\n     * When set, the up vector of the camera will be updated by the rotation of the camera\r\n     */\r\n    public updateUpVectorFromRotation = false;\r\n    private _tmpQuaternion = new Quaternion();\r\n\r\n    /**\r\n     * Define the current rotation of the camera\r\n     */\r\n    @serializeAsVector3()\r\n    public rotation = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Define the current rotation of the camera as a quaternion to prevent Gimbal lock\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n\r\n    /**\r\n     * Define the current speed of the camera\r\n     */\r\n    @serialize()\r\n    public speed = 2.0;\r\n\r\n    /**\r\n     * Add constraint to the camera to prevent it to move freely in all directions and\r\n     * around all axis.\r\n     */\r\n    public noRotationConstraint = false;\r\n\r\n    /**\r\n     * Reverses mouselook direction to 'natural' panning as opposed to traditional direct\r\n     * panning\r\n     */\r\n    public invertRotation = false;\r\n\r\n    /**\r\n     * Speed multiplier for inverse camera panning\r\n     */\r\n    public inverseRotationSpeed = 0.2;\r\n\r\n    /**\r\n     * Define the current target of the camera as an object or a position.\r\n     * Please note that locking a target will disable panning.\r\n     */\r\n    @serializeAsMeshReference(\"lockedTargetId\")\r\n    public lockedTarget: any = null;\r\n\r\n    /** @internal */\r\n    public _currentTarget = Vector3.Zero();\r\n    /** @internal */\r\n    public _initialFocalDistance = 1;\r\n    /** @internal */\r\n    public _viewMatrix = Matrix.Zero();\r\n    /** @internal */\r\n    public _camMatrix = Matrix.Zero();\r\n    /** @internal */\r\n    public _cameraTransformMatrix = Matrix.Zero();\r\n    /** @internal */\r\n    public _cameraRotationMatrix = Matrix.Zero();\r\n\r\n    /** @internal */\r\n    public _referencePoint = new Vector3(0, 0, 1);\r\n    /** @internal */\r\n    public _transformedReferencePoint = Vector3.Zero();\r\n\r\n    protected _deferredPositionUpdate = new Vector3();\r\n    protected _deferredRotationQuaternionUpdate = new Quaternion();\r\n    protected _deferredRotationUpdate = new Vector3();\r\n    protected _deferredUpdated = false;\r\n    protected _deferOnly: boolean = false;\r\n\r\n    /** @internal */\r\n    public _reset: () => void;\r\n\r\n    private _defaultUp = Vector3.Up();\r\n\r\n    /**\r\n     * Instantiates a target camera that takes a mesh or position as a target and continues to look at it while it moves.\r\n     * This is the base of the follow, arc rotate cameras and Free camera\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     * @param name Defines the name of the camera in the scene\r\n     * @param position Defines the start position of the camera in the scene\r\n     * @param scene Defines the scene the camera belongs to\r\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\r\n    }\r\n\r\n    /**\r\n     * Gets the position in front of the camera at a given distance.\r\n     * @param distance The distance from the camera we want the position to be\r\n     * @returns the position\r\n     */\r\n    public getFrontPosition(distance: number): Vector3 {\r\n        this.getWorldMatrix();\r\n        const direction = this.getTarget().subtract(this.position);\r\n        direction.normalize();\r\n        direction.scaleInPlace(distance);\r\n        return this.globalPosition.add(direction);\r\n    }\r\n\r\n    /** @internal */\r\n    public _getLockedTargetPosition(): Nullable<Vector3> {\r\n        if (!this.lockedTarget) {\r\n            return null;\r\n        }\r\n\r\n        if (this.lockedTarget.absolutePosition) {\r\n            const lockedTarget = this.lockedTarget as AbstractMesh;\r\n            const m = lockedTarget.computeWorldMatrix();\r\n            // in some cases the absolute position resets externally, but doesn't update since the matrix is cached.\r\n            m.getTranslationToRef(lockedTarget.absolutePosition);\r\n        }\r\n\r\n        return this.lockedTarget.absolutePosition || this.lockedTarget;\r\n    }\r\n\r\n    private _storedPosition: Vector3;\r\n    private _storedRotation: Vector3;\r\n    private _storedRotationQuaternion: Quaternion;\r\n\r\n    /**\r\n     * Store current camera state of the camera (fov, position, rotation, etc..)\r\n     * @returns the camera\r\n     */\r\n    public storeState(): Camera {\r\n        this._storedPosition = this.position.clone();\r\n        this._storedRotation = this.rotation.clone();\r\n        if (this.rotationQuaternion) {\r\n            this._storedRotationQuaternion = this.rotationQuaternion.clone();\r\n        }\r\n\r\n        return super.storeState();\r\n    }\r\n\r\n    /**\r\n     * Restored camera state. You must call storeState() first\r\n     * @returns whether it was successful or not\r\n     * @internal\r\n     */\r\n    public _restoreStateValues(): boolean {\r\n        if (!super._restoreStateValues()) {\r\n            return false;\r\n        }\r\n\r\n        this.position = this._storedPosition.clone();\r\n        this.rotation = this._storedRotation.clone();\r\n\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion = this._storedRotationQuaternion.clone();\r\n        }\r\n\r\n        this.cameraDirection.copyFromFloats(0, 0, 0);\r\n        this.cameraRotation.copyFromFloats(0, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n        this._cache.lockedTarget = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.rotation = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.rotationQuaternion = new Quaternion(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        const lockedTargetPosition = this._getLockedTargetPosition();\r\n        if (!lockedTargetPosition) {\r\n            this._cache.lockedTarget = null;\r\n        } else {\r\n            if (!this._cache.lockedTarget) {\r\n                this._cache.lockedTarget = lockedTargetPosition.clone();\r\n            } else {\r\n                this._cache.lockedTarget.copyFrom(lockedTargetPosition);\r\n            }\r\n        }\r\n\r\n        this._cache.rotation.copyFrom(this.rotation);\r\n        if (this.rotationQuaternion) {\r\n            this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);\r\n        }\r\n    }\r\n\r\n    // Synchronized\r\n    /** @internal */\r\n    public _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronizedViewMatrix()) {\r\n            return false;\r\n        }\r\n\r\n        const lockedTargetPosition = this._getLockedTargetPosition();\r\n\r\n        return (\r\n            (this._cache.lockedTarget ? this._cache.lockedTarget.equals(lockedTargetPosition) : !lockedTargetPosition) &&\r\n            (this.rotationQuaternion ? this.rotationQuaternion.equals(this._cache.rotationQuaternion) : this._cache.rotation.equals(this.rotation))\r\n        );\r\n    }\r\n\r\n    // Methods\r\n    /** @internal */\r\n    public _computeLocalCameraSpeed(): number {\r\n        const engine = this.getEngine();\r\n        return this.speed * Math.sqrt(engine.getDeltaTime() / (engine.getFps() * 100.0));\r\n    }\r\n\r\n    // Target\r\n\r\n    /**\r\n     * Defines the target the camera should look at.\r\n     * @param target Defines the new target as a Vector\r\n     */\r\n    public setTarget(target: Vector3): void {\r\n        this.upVector.normalize();\r\n\r\n        this._initialFocalDistance = target.subtract(this.position).length();\r\n\r\n        if (this.position.z === target.z) {\r\n            this.position.z += Epsilon;\r\n        }\r\n\r\n        this._referencePoint.normalize().scaleInPlace(this._initialFocalDistance);\r\n\r\n        Matrix.LookAtLHToRef(this.position, target, this._defaultUp, this._camMatrix);\r\n        this._camMatrix.invert();\r\n\r\n        this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);\r\n\r\n        const vDir = target.subtract(this.position);\r\n\r\n        if (vDir.x >= 0.0) {\r\n            this.rotation.y = -Math.atan(vDir.z / vDir.x) + Math.PI / 2.0;\r\n        } else {\r\n            this.rotation.y = -Math.atan(vDir.z / vDir.x) - Math.PI / 2.0;\r\n        }\r\n\r\n        this.rotation.z = 0;\r\n\r\n        if (isNaN(this.rotation.x)) {\r\n            this.rotation.x = 0;\r\n        }\r\n\r\n        if (isNaN(this.rotation.y)) {\r\n            this.rotation.y = 0;\r\n        }\r\n\r\n        if (isNaN(this.rotation.z)) {\r\n            this.rotation.z = 0;\r\n        }\r\n\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the target point of the camera.\r\n     * The camera looks towards it form the radius distance.\r\n     */\r\n    public get target(): Vector3 {\r\n        return this.getTarget();\r\n    }\r\n    public set target(value: Vector3) {\r\n        this.setTarget(value);\r\n    }\r\n\r\n    /**\r\n     * Return the current target position of the camera. This value is expressed in local space.\r\n     * @returns the target position\r\n     */\r\n    public getTarget(): Vector3 {\r\n        return this._currentTarget;\r\n    }\r\n\r\n    /** @internal */\r\n    public _decideIfNeedsToMove(): boolean {\r\n        return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updatePosition(): void {\r\n        if (this.parent) {\r\n            this.parent.getWorldMatrix().invertToRef(TmpVectors.Matrix[0]);\r\n            Vector3.TransformNormalToRef(this.cameraDirection, TmpVectors.Matrix[0], TmpVectors.Vector3[0]);\r\n            this._deferredPositionUpdate.addInPlace(TmpVectors.Vector3[0]);\r\n            if (!this._deferOnly) {\r\n                this.position.copyFrom(this._deferredPositionUpdate);\r\n            } else {\r\n                this._deferredUpdated = true;\r\n            }\r\n            return;\r\n        }\r\n        this._deferredPositionUpdate.addInPlace(this.cameraDirection);\r\n        if (!this._deferOnly) {\r\n            this.position.copyFrom(this._deferredPositionUpdate);\r\n        } else {\r\n            this._deferredUpdated = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        const directionMultiplier = this.invertRotation ? -this.inverseRotationSpeed : 1.0;\r\n        const needToMove = this._decideIfNeedsToMove();\r\n        const needToRotate = this.cameraRotation.x || this.cameraRotation.y;\r\n\r\n        this._deferredUpdated = false;\r\n        this._deferredRotationUpdate.copyFrom(this.rotation);\r\n        this._deferredPositionUpdate.copyFrom(this.position);\r\n        if (this.rotationQuaternion) {\r\n            this._deferredRotationQuaternionUpdate.copyFrom(this.rotationQuaternion);\r\n        }\r\n\r\n        // Move\r\n        if (needToMove) {\r\n            this._updatePosition();\r\n        }\r\n\r\n        // Rotate\r\n        if (needToRotate) {\r\n            //rotate, if quaternion is set and rotation was used\r\n            if (this.rotationQuaternion) {\r\n                this.rotationQuaternion.toEulerAnglesToRef(this._deferredRotationUpdate);\r\n            }\r\n\r\n            this._deferredRotationUpdate.x += this.cameraRotation.x * directionMultiplier;\r\n            this._deferredRotationUpdate.y += this.cameraRotation.y * directionMultiplier;\r\n\r\n            // Apply constraints\r\n            if (!this.noRotationConstraint) {\r\n                const limit = 1.570796;\r\n\r\n                if (this._deferredRotationUpdate.x > limit) {\r\n                    this._deferredRotationUpdate.x = limit;\r\n                }\r\n                if (this._deferredRotationUpdate.x < -limit) {\r\n                    this._deferredRotationUpdate.x = -limit;\r\n                }\r\n            }\r\n\r\n            if (!this._deferOnly) {\r\n                this.rotation.copyFrom(this._deferredRotationUpdate);\r\n            } else {\r\n                this._deferredUpdated = true;\r\n            }\r\n\r\n            //rotate, if quaternion is set and rotation was used\r\n            if (this.rotationQuaternion) {\r\n                const len = this._deferredRotationUpdate.lengthSquared();\r\n                if (len) {\r\n                    Quaternion.RotationYawPitchRollToRef(\r\n                        this._deferredRotationUpdate.y,\r\n                        this._deferredRotationUpdate.x,\r\n                        this._deferredRotationUpdate.z,\r\n                        this._deferredRotationQuaternionUpdate\r\n                    );\r\n                    if (!this._deferOnly) {\r\n                        this.rotationQuaternion.copyFrom(this._deferredRotationQuaternionUpdate);\r\n                    } else {\r\n                        this._deferredUpdated = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Inertia\r\n        if (needToMove) {\r\n            if (Math.abs(this.cameraDirection.x) < this.speed * Epsilon) {\r\n                this.cameraDirection.x = 0;\r\n            }\r\n\r\n            if (Math.abs(this.cameraDirection.y) < this.speed * Epsilon) {\r\n                this.cameraDirection.y = 0;\r\n            }\r\n\r\n            if (Math.abs(this.cameraDirection.z) < this.speed * Epsilon) {\r\n                this.cameraDirection.z = 0;\r\n            }\r\n\r\n            this.cameraDirection.scaleInPlace(this.inertia);\r\n        }\r\n        if (needToRotate) {\r\n            if (Math.abs(this.cameraRotation.x) < this.speed * Epsilon) {\r\n                this.cameraRotation.x = 0;\r\n            }\r\n\r\n            if (Math.abs(this.cameraRotation.y) < this.speed * Epsilon) {\r\n                this.cameraRotation.y = 0;\r\n            }\r\n            this.cameraRotation.scaleInPlace(this.inertia);\r\n        }\r\n\r\n        super._checkInputs();\r\n    }\r\n\r\n    protected _updateCameraRotationMatrix() {\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion.toRotationMatrix(this._cameraRotationMatrix);\r\n        } else {\r\n            Matrix.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this._cameraRotationMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the up vector to apply the rotation of the camera (So if you changed the camera rotation.z this will let you update the up vector as well)\r\n     * @returns the current camera\r\n     */\r\n    private _rotateUpVectorWithCameraRotationMatrix(): TargetCamera {\r\n        Vector3.TransformNormalToRef(this._defaultUp, this._cameraRotationMatrix, this.upVector);\r\n        return this;\r\n    }\r\n\r\n    private _cachedRotationZ = 0;\r\n    private _cachedQuaternionRotationZ = 0;\r\n    /** @internal */\r\n    public _getViewMatrix(): Matrix {\r\n        if (this.lockedTarget) {\r\n            this.setTarget(this._getLockedTargetPosition()!);\r\n        }\r\n\r\n        // Compute\r\n        this._updateCameraRotationMatrix();\r\n\r\n        // Apply the changed rotation to the upVector\r\n        if (this.rotationQuaternion && this._cachedQuaternionRotationZ != this.rotationQuaternion.z) {\r\n            this._rotateUpVectorWithCameraRotationMatrix();\r\n            this._cachedQuaternionRotationZ = this.rotationQuaternion.z;\r\n        } else if (this._cachedRotationZ !== this.rotation.z) {\r\n            this._rotateUpVectorWithCameraRotationMatrix();\r\n            this._cachedRotationZ = this.rotation.z;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\r\n\r\n        // Computing target and final matrix\r\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\r\n        if (this.updateUpVectorFromRotation) {\r\n            if (this.rotationQuaternion) {\r\n                Axis.Y.rotateByQuaternionToRef(this.rotationQuaternion, this.upVector);\r\n            } else {\r\n                Quaternion.FromEulerVectorToRef(this.rotation, this._tmpQuaternion);\r\n                Axis.Y.rotateByQuaternionToRef(this._tmpQuaternion, this.upVector);\r\n            }\r\n        }\r\n        this._computeViewMatrix(this.position, this._currentTarget, this.upVector);\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    protected _computeViewMatrix(position: Vector3, target: Vector3, up: Vector3): void {\r\n        if (this.ignoreParentScaling) {\r\n            if (this.parent) {\r\n                const parentWorldMatrix = this.parent.getWorldMatrix();\r\n                Vector3.TransformCoordinatesToRef(position, parentWorldMatrix, this._globalPosition);\r\n                Vector3.TransformCoordinatesToRef(target, parentWorldMatrix, this._tmpTargetVector);\r\n                Vector3.TransformNormalToRef(up, parentWorldMatrix, this._tmpUpVector);\r\n                this._markSyncedWithParent();\r\n            } else {\r\n                this._globalPosition.copyFrom(position);\r\n                this._tmpTargetVector.copyFrom(target);\r\n                this._tmpUpVector.copyFrom(up);\r\n            }\r\n\r\n            if (this.getScene().useRightHandedSystem) {\r\n                Matrix.LookAtRHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\r\n            } else {\r\n                Matrix.LookAtLHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.getScene().useRightHandedSystem) {\r\n            Matrix.LookAtRHToRef(position, target, up, this._viewMatrix);\r\n        } else {\r\n            Matrix.LookAtLHToRef(position, target, up, this._viewMatrix);\r\n        }\r\n\r\n        if (this.parent) {\r\n            const parentWorldMatrix = this.parent.getWorldMatrix();\r\n            this._viewMatrix.invert();\r\n            this._viewMatrix.multiplyToRef(parentWorldMatrix, this._viewMatrix);\r\n            this._viewMatrix.getTranslationToRef(this._globalPosition);\r\n            this._viewMatrix.invert();\r\n            this._markSyncedWithParent();\r\n        } else {\r\n            this._globalPosition.copyFrom(position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            const rigCamera = new TargetCamera(name, this.position.clone(), this.getScene());\r\n            rigCamera.isRigCamera = true;\r\n            rigCamera.rigParent = this;\r\n            if (this.cameraRigMode === Camera.RIG_MODE_VR) {\r\n                if (!this.rotationQuaternion) {\r\n                    this.rotationQuaternion = new Quaternion();\r\n                }\r\n                rigCamera._cameraRigParams = {};\r\n                rigCamera.rotationQuaternion = new Quaternion();\r\n            }\r\n\r\n            rigCamera.mode = this.mode;\r\n            rigCamera.orthoLeft = this.orthoLeft;\r\n            rigCamera.orthoRight = this.orthoRight;\r\n            rigCamera.orthoTop = this.orthoTop;\r\n            rigCamera.orthoBottom = this.orthoBottom;\r\n\r\n            return rigCamera;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateRigCameras() {\r\n        const camLeft = <TargetCamera>this._rigCameras[0];\r\n        const camRight = <TargetCamera>this._rigCameras[1];\r\n\r\n        this.computeWorldMatrix();\r\n\r\n        switch (this.cameraRigMode) {\r\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED: {\r\n                //provisionnaly using _cameraRigParams.stereoHalfAngle instead of calculations based on _cameraRigParams.interaxialDistance:\r\n                const leftSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? 1 : -1;\r\n                const rightSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? -1 : 1;\r\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * leftSign, camLeft);\r\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * rightSign, camRight);\r\n                break;\r\n            }\r\n            case Camera.RIG_MODE_VR:\r\n                if (camLeft.rotationQuaternion) {\r\n                    camLeft.rotationQuaternion.copyFrom(this.rotationQuaternion);\r\n                    camRight.rotationQuaternion.copyFrom(this.rotationQuaternion);\r\n                } else {\r\n                    camLeft.rotation.copyFrom(this.rotation);\r\n                    camRight.rotation.copyFrom(this.rotation);\r\n                }\r\n                camLeft.position.copyFrom(this.position);\r\n                camRight.position.copyFrom(this.position);\r\n\r\n                break;\r\n        }\r\n        super._updateRigCameras();\r\n    }\r\n\r\n    private _getRigCamPositionAndTarget(halfSpace: number, rigCamera: TargetCamera) {\r\n        const target = this.getTarget();\r\n        target.subtractToRef(this.position, TargetCamera._TargetFocalPoint);\r\n\r\n        TargetCamera._TargetFocalPoint.normalize().scaleInPlace(this._initialFocalDistance);\r\n        const newFocalTarget = TargetCamera._TargetFocalPoint.addInPlace(this.position);\r\n\r\n        Matrix.TranslationToRef(-newFocalTarget.x, -newFocalTarget.y, -newFocalTarget.z, TargetCamera._TargetTransformMatrix);\r\n        TargetCamera._TargetTransformMatrix.multiplyToRef(Matrix.RotationAxis(rigCamera.upVector, halfSpace), TargetCamera._RigCamTransformMatrix);\r\n        Matrix.TranslationToRef(newFocalTarget.x, newFocalTarget.y, newFocalTarget.z, TargetCamera._TargetTransformMatrix);\r\n\r\n        TargetCamera._RigCamTransformMatrix.multiplyToRef(TargetCamera._TargetTransformMatrix, TargetCamera._RigCamTransformMatrix);\r\n\r\n        Vector3.TransformCoordinatesToRef(this.position, TargetCamera._RigCamTransformMatrix, rigCamera.position);\r\n        rigCamera.setTarget(newFocalTarget);\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"TargetCamera\";\r\n    }\r\n}\r\n", "import { Logger } from \"../Misc/logger\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Camera } from \"./camera\";\r\n/**\r\n * @ignore\r\n * This is a list of all the different input types that are available in the application.\r\n * Fo instance: ArcRotateCameraGamepadInput...\r\n */\r\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\r\nexport var CameraInputTypes = {};\r\n\r\n/**\r\n * This is the contract to implement in order to create a new input class.\r\n * Inputs are dealing with listening to user actions and moving the camera accordingly.\r\n */\r\nexport interface ICameraInput<TCamera extends Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    camera: Nullable<TCamera>;\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    getClassName(): string;\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    getSimpleName(): string;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    detachControl(): void;\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    checkInputs?: () => void;\r\n}\r\n\r\n/**\r\n * Represents a map of input types to input instance or input index to input instance.\r\n */\r\nexport interface CameraInputsMap<TCamera extends Camera> {\r\n    /**\r\n     * Accessor to the input by input type.\r\n     */\r\n    [name: string]: ICameraInput<TCamera>;\r\n    /**\r\n     * Accessor to the input by input index.\r\n     */\r\n    [idx: number]: ICameraInput<TCamera>;\r\n}\r\n\r\n/**\r\n * This represents the input manager used within a camera.\r\n * It helps dealing with all the different kind of input attached to a camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class CameraInputsManager<TCamera extends Camera> {\r\n    /**\r\n     * Defines the list of inputs attached to the camera.\r\n     */\r\n    public attached: CameraInputsMap<TCamera>;\r\n\r\n    /**\r\n     * Defines the dom element the camera is collecting inputs from.\r\n     * This is null if the controls have not been attached.\r\n     */\r\n    public attachedToElement: boolean = false;\r\n\r\n    /**\r\n     * Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public noPreventDefault: boolean;\r\n\r\n    /**\r\n     * Defined the camera the input manager belongs to.\r\n     */\r\n    public camera: TCamera;\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs: () => void;\r\n\r\n    /**\r\n     * Instantiate a new Camera Input Manager.\r\n     * @param camera Defines the camera the input manager belongs to\r\n     */\r\n    constructor(camera: TCamera) {\r\n        this.attached = {};\r\n        this.camera = camera;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Add an input method to a camera\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     * @param input Camera input method\r\n     */\r\n    public add(input: ICameraInput<TCamera>): void {\r\n        const type = input.getSimpleName();\r\n        if (this.attached[type]) {\r\n            Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\r\n            return;\r\n        }\r\n\r\n        this.attached[type] = input;\r\n\r\n        input.camera = this.camera;\r\n\r\n        // for checkInputs, we are dynamically creating a function\r\n        // the goal is to avoid the performance penalty of looping for inputs in the render loop\r\n        if (input.checkInputs) {\r\n            this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n        }\r\n\r\n        if (this.attachedToElement) {\r\n            input.attachControl(this.noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input method from a camera\r\n     * example: camera.inputs.remove(camera.inputs.attached.mouse);\r\n     * @param inputToRemove camera input method\r\n     */\r\n    public remove(inputToRemove: ICameraInput<TCamera>): void {\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input === inputToRemove) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input type from a camera\r\n     * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\r\n     * @param inputType the type of the input to remove\r\n     */\r\n    public removeByType(inputType: string): void {\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input.getClassName() === inputType) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _addCheckInputs(fn: () => void) {\r\n        const current = this.checkInputs;\r\n        return () => {\r\n            current();\r\n            fn();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to the currently attached dom element to listen the events from.\r\n     * @param input Defines the input to attach\r\n     */\r\n    public attachInput(input: ICameraInput<TCamera>): void {\r\n        if (this.attachedToElement) {\r\n            input.attachControl(this.noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the current manager inputs controls to a specific dom element to listen the events from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachElement(noPreventDefault: boolean = false): void {\r\n        if (this.attachedToElement) {\r\n            return;\r\n        }\r\n\r\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\r\n        this.attachedToElement = true;\r\n        this.noPreventDefault = noPreventDefault;\r\n\r\n        for (const cam in this.attached) {\r\n            this.attached[cam].attachControl(noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current manager inputs controls from a specific dom element.\r\n     * @param disconnect Defines whether the input should be removed from the current list of attached inputs\r\n     */\r\n    public detachElement(disconnect = false): void {\r\n        for (const cam in this.attached) {\r\n            this.attached[cam].detachControl();\r\n\r\n            if (disconnect) {\r\n                this.attached[cam].camera = null;\r\n            }\r\n        }\r\n        this.attachedToElement = false;\r\n    }\r\n\r\n    /**\r\n     * Rebuild the dynamic inputCheck function from the current list of\r\n     * defined inputs in the manager.\r\n     */\r\n    public rebuildInputCheck(): void {\r\n        this.checkInputs = () => {};\r\n\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input.checkInputs) {\r\n                this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        if (this.attachedToElement) {\r\n            this.detachElement(true);\r\n        }\r\n        this.attached = {};\r\n        this.attachedToElement = false;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Serialize the current input manager attached to a camera.\r\n     * This ensures than once parsed,\r\n     * the input associated to the camera will be identical to the current ones\r\n     * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\r\n     */\r\n    public serialize(serializedCamera: any): void {\r\n        const inputs: { [key: string]: any } = {};\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            const res = SerializationHelper.Serialize(input);\r\n            inputs[input.getClassName()] = res;\r\n        }\r\n\r\n        serializedCamera.inputsmgr = inputs;\r\n    }\r\n\r\n    /**\r\n     * Parses an input manager serialized JSON to restore the previous list of inputs\r\n     * and states associated to a camera.\r\n     * @param parsedCamera Defines the JSON to parse\r\n     */\r\n    public parse(parsedCamera: any): void {\r\n        const parsedInputs = parsedCamera.inputsmgr;\r\n        if (parsedInputs) {\r\n            this.clear();\r\n\r\n            for (const n in parsedInputs) {\r\n                const construct = (<any>CameraInputTypes)[n];\r\n                if (construct) {\r\n                    const parsedinput = parsedInputs[n];\r\n                    const input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedinput,\r\n                        null\r\n                    );\r\n                    this.add(input as any);\r\n                }\r\n            }\r\n        } else {\r\n            //2016-03-08 this part is for managing backward compatibility\r\n            for (const n in this.attached) {\r\n                const construct = (<any>CameraInputTypes)[this.attached[n].getClassName()];\r\n                if (construct) {\r\n                    const input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedCamera,\r\n                        null\r\n                    );\r\n                    this.remove(this.attached[n]);\r\n                    this.add(input as any);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n/**\r\n * Manage the keyboard inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraKeyboardMoveInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUpward = [33];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDownward = [34];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public rotationSpeed = 0.5;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateLeft: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateRight: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the up rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateUp: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the down rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateDown: number[] = [];\r\n\r\n    private _keys = new Array<number>();\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys.length = 0;\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateDown.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateDown.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n            // Keyboard\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                const speed = camera._computeLocalCameraSpeed();\r\n\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, speed);\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\r\n                } else if (this.keysUpward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, speed, 0);\r\n                } else if (this.keysDownward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\r\n                } else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y -= this._getLocalRotation();\r\n                } else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y += this._getLocalRotation();\r\n                } else if (this.keysRotateUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.x -= this._getLocalRotation();\r\n                } else if (this.keysRotateDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.x += this._getLocalRotation();\r\n                }\r\n\r\n                if (camera.getScene().useRightHandedSystem) {\r\n                    camera._localDirection.z *= -1;\r\n                }\r\n\r\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\r\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\r\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /** @internal */\r\n    public _onLostFocus(): void {\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    private _getLocalRotation(): number {\r\n        const handednessMultiplier = this.camera._calculateHandednessMultiplier();\r\n        const rotation = ((this.rotationSpeed * this._engine.getDeltaTime()) / 1000) * handednessMultiplier;\r\n\r\n        return rotation;\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;\r\n", "import type { Observer, EventState } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { IMouseEvent, IPointerEvent } from \"../../Events/deviceInputEvents\";\r\n/**\r\n * Manage the mouse inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraMouseInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Defines the buttons associated with the input to handle camera move.\r\n     */\r\n    @serialize()\r\n    public buttons = [0, 1, 2];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public angularSensibility = 2000.0;\r\n\r\n    private _pointerInput: (p: PointerInfo, s: EventState) => void;\r\n    private _onMouseMove: Nullable<(e: IMouseEvent) => any>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private _previousPosition: Nullable<{ x: number; y: number }> = null;\r\n\r\n    /**\r\n     * Observable for when a pointer move event occurs containing the move offset\r\n     */\r\n    public onPointerMovedObservable = new Observable<{ offsetX: number; offsetY: number }>();\r\n    /**\r\n     * @internal\r\n     * If the camera should be rotated automatically based on pointer movement\r\n     */\r\n    public _allowCameraRotation = true;\r\n\r\n    private _currentActiveButton: number = -1;\r\n    private _activePointerId: number = -1;\r\n    private _contextMenuBind: (evt: MouseEvent) => void;\r\n\r\n    /**\r\n     * Manage the mouse inputs to control the movement of a free camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     * @param touchEnabled Defines if touch is enabled or not\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define if touch is enabled in the mouse input\r\n         */\r\n        public touchEnabled = true\r\n    ) {}\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        const engine = this.camera.getEngine();\r\n        const element = engine.getInputElement();\r\n\r\n        if (!this._pointerInput) {\r\n            this._pointerInput = (p) => {\r\n                const evt = <IPointerEvent>p.event;\r\n                const isTouch = evt.pointerType === \"touch\";\r\n\r\n                if (!this.touchEnabled && isTouch) {\r\n                    return;\r\n                }\r\n\r\n                if (p.type !== PointerEventTypes.POINTERMOVE && this.buttons.indexOf(evt.button) === -1) {\r\n                    return;\r\n                }\r\n\r\n                const srcElement = <HTMLElement>evt.target;\r\n\r\n                if (p.type === PointerEventTypes.POINTERDOWN) {\r\n                    // If the input is touch with more than one touch OR if the input is mouse and there is already an active button, return\r\n                    if ((isTouch && this._activePointerId !== -1) || (!isTouch && this._currentActiveButton !== -1)) {\r\n                        return;\r\n                    }\r\n\r\n                    this._activePointerId = evt.pointerId;\r\n                    try {\r\n                        srcElement?.setPointerCapture(evt.pointerId);\r\n                    } catch (e) {\r\n                        //Nothing to do with the error. Execution will continue.\r\n                    }\r\n\r\n                    if (this._currentActiveButton === -1) {\r\n                        this._currentActiveButton = evt.button;\r\n                    }\r\n\r\n                    this._previousPosition = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                    };\r\n\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                        element && element.focus();\r\n                    }\r\n\r\n                    // This is required to move while pointer button is down\r\n                    if (engine.isPointerLock && this._onMouseMove) {\r\n                        this._onMouseMove(p.event);\r\n                    }\r\n                } else if (p.type === PointerEventTypes.POINTERUP) {\r\n                    // If input is touch with a different touch id OR if input is mouse with a different button, return\r\n                    if ((isTouch && this._activePointerId !== evt.pointerId) || (!isTouch && this._currentActiveButton !== evt.button)) {\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        srcElement?.releasePointerCapture(evt.pointerId);\r\n                    } catch (e) {\r\n                        //Nothing to do with the error.\r\n                    }\r\n                    this._currentActiveButton = -1;\r\n\r\n                    this._previousPosition = null;\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    this._activePointerId = -1;\r\n                } else if (p.type === PointerEventTypes.POINTERMOVE && (this._activePointerId === evt.pointerId || !isTouch)) {\r\n                    if (engine.isPointerLock && this._onMouseMove) {\r\n                        this._onMouseMove(p.event);\r\n                    } else if (this._previousPosition) {\r\n                        const handednessMultiplier = this.camera._calculateHandednessMultiplier();\r\n                        const offsetX = (evt.clientX - this._previousPosition.x) * handednessMultiplier;\r\n                        const offsetY = evt.clientY - this._previousPosition.y;\r\n\r\n                        if (this._allowCameraRotation) {\r\n                            this.camera.cameraRotation.y += offsetX / this.angularSensibility;\r\n                            this.camera.cameraRotation.x += offsetY / this.angularSensibility;\r\n                        }\r\n                        this.onPointerMovedObservable.notifyObservers({ offsetX: offsetX, offsetY: offsetY });\r\n\r\n                        this._previousPosition = {\r\n                            x: evt.clientX,\r\n                            y: evt.clientY,\r\n                        };\r\n\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        this._onMouseMove = (evt) => {\r\n            if (!engine.isPointerLock) {\r\n                return;\r\n            }\r\n\r\n            const handednessMultiplier = this.camera._calculateHandednessMultiplier();\r\n            const offsetX = evt.movementX * handednessMultiplier;\r\n\r\n            this.camera.cameraRotation.y += offsetX / this.angularSensibility;\r\n\r\n            const offsetY = evt.movementY;\r\n            this.camera.cameraRotation.x += offsetY / this.angularSensibility;\r\n\r\n            this._previousPosition = null;\r\n\r\n            if (!noPreventDefault) {\r\n                evt.preventDefault();\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera\r\n            .getScene()\r\n            ._inputManager._addCameraPointerObserver(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\r\n\r\n        if (element) {\r\n            this._contextMenuBind = (evt: MouseEvent) => this.onContextMenu(evt as PointerEvent);\r\n            element.addEventListener(\"contextmenu\", this._contextMenuBind, false); // TODO: We need to figure out how to handle this for Native\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on JS contextmenu event.\r\n     * Override this method to provide functionality.\r\n     * @param evt the context menu event\r\n     */\r\n    public onContextMenu(evt: PointerEvent): void {\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n\r\n            if (this._contextMenuBind) {\r\n                const engine = this.camera.getEngine();\r\n                const element = engine.getInputElement();\r\n                element && element.removeEventListener(\"contextmenu\", this._contextMenuBind);\r\n            }\r\n\r\n            if (this.onPointerMovedObservable) {\r\n                this.onPointerMovedObservable.clear();\r\n            }\r\n\r\n            this._observer = null;\r\n            this._onMouseMove = null;\r\n            this._previousPosition = null;\r\n        }\r\n\r\n        this._activePointerId = -1;\r\n        this._currentActiveButton = -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraMouseInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mouse\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseInput\"] = FreeCameraMouseInput;\r\n", "import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { IWheelEvent } from \"../../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../../Events/deviceInputEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Base class for mouse wheel input..\r\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\r\n * for example usage.\r\n */\r\nexport abstract class BaseCameraMouseWheelInput implements ICameraInput<Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public abstract camera: Camera;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to X axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionX = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionY = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionZ = 3.0;\r\n\r\n    /**\r\n     * Observable for when a mouse wheel move event occurs.\r\n     */\r\n    public onChangedObservable = new Observable<{ wheelDeltaX: number; wheelDeltaY: number; wheelDeltaZ: number }>();\r\n\r\n    private _wheel: Nullable<(pointer: PointerInfo) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls\r\n     *   should call preventdefault().\r\n     *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this._wheel = (pointer) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n\r\n            const event = <IWheelEvent>pointer.event;\r\n\r\n            const platformScale = event.deltaMode === EventConstants.DOM_DELTA_LINE ? this._ffMultiplier : 1; // If this happens to be set to DOM_DELTA_LINE, adjust accordingly\r\n\r\n            this._wheelDeltaX += (this.wheelPrecisionX * platformScale * event.deltaX) / this._normalize;\r\n            this._wheelDeltaY -= (this.wheelPrecisionY * platformScale * event.deltaY) / this._normalize;\r\n            this._wheelDeltaZ += (this.wheelPrecisionZ * platformScale * event.deltaZ) / this._normalize;\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene()._inputManager._addCameraPointerObserver(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n        if (this.onChangedObservable) {\r\n            this.onChangedObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        this.onChangedObservable.notifyObservers({\r\n            wheelDeltaX: this._wheelDeltaX,\r\n            wheelDeltaY: this._wheelDeltaY,\r\n            wheelDeltaZ: this._wheelDeltaZ,\r\n        });\r\n\r\n        // Clear deltas.\r\n        this._wheelDeltaX = 0;\r\n        this._wheelDeltaY = 0;\r\n        this._wheelDeltaZ = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"BaseCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the X axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaX: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Y axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaY: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Z axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaZ: number = 0;\r\n\r\n    /**\r\n     * Firefox uses a different scheme to report scroll distances to other\r\n     * browsers. Rather than use complicated methods to calculate the exact\r\n     * multiple we need to apply, let's just cheat and use a constant.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\r\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\r\n     */\r\n    private readonly _ffMultiplier = 12;\r\n\r\n    /**\r\n     * Different event attributes for wheel data fall into a few set ranges.\r\n     * Some relevant but dated date here:\r\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n     */\r\n    private readonly _normalize = 120;\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Coordinate } from \"../../Maths/math.axis\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum _CameraProperty {\r\n    MoveRelative,\r\n    RotateRelative,\r\n    MoveScene,\r\n}\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.RotateRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.RotateRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.RotateRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveScene;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveScene;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveScene;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\r\n            return;\r\n        }\r\n\r\n        // Clear the camera properties that we might be updating.\r\n        this._moveRelative.setAll(0);\r\n        this._rotateRelative.setAll(0);\r\n        this._moveScene.setAll(0);\r\n\r\n        // Set the camera properties that are to be updated.\r\n        this._updateCamera();\r\n\r\n        if (this.camera.getScene().useRightHandedSystem) {\r\n            // TODO: Does this need done for worldUpdate too?\r\n            this._moveRelative.z *= -1;\r\n        }\r\n\r\n        // Convert updates relative to camera to world position update.\r\n        const cameraTransformMatrix = Matrix.Zero();\r\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\r\n\r\n        const transformedDirection = Vector3.Zero();\r\n        Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection);\r\n\r\n        // Apply updates to camera position.\r\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\r\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\r\n        this.camera.cameraDirection.addInPlace(transformedDirection);\r\n        this.camera.cameraDirection.addInPlace(this._moveScene);\r\n\r\n        // Call the base class implementation to handle observers and do cleanup.\r\n        super.checkInputs();\r\n    }\r\n\r\n    private _moveRelative = Vector3.Zero();\r\n    private _rotateRelative = Vector3.Zero();\r\n    private _moveScene = Vector3.Zero();\r\n\r\n    /**\r\n     * These are set to the desired default behaviour.\r\n     */\r\n    private _wheelXAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelXActionCoordinate: Nullable<Coordinate> = Coordinate.X;\r\n    private _wheelYAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelYActionCoordinate: Nullable<Coordinate> = Coordinate.Z;\r\n    private _wheelZAction: Nullable<_CameraProperty> = null;\r\n    private _wheelZActionCoordinate: Nullable<Coordinate> = null;\r\n\r\n    /**\r\n     * Update the camera according to any configured properties for the 3\r\n     * mouse-wheel axis.\r\n     */\r\n    private _updateCamera(): void {\r\n        // Do the camera updates for each of the 3 touch-wheel axis.\r\n        this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\r\n    }\r\n\r\n    /**\r\n     * Update one property of the camera.\r\n     * @param value\r\n     * @param cameraProperty\r\n     * @param coordinate\r\n     */\r\n    private _updateCameraProperty(\r\n        /* Mouse-wheel delta. */\r\n        value: number,\r\n        /* Camera property to be changed. */\r\n        cameraProperty: Nullable<_CameraProperty>,\r\n        /* Axis of Camera property to be changed. */\r\n        coordinate: Nullable<Coordinate>\r\n    ): void {\r\n        if (value === 0) {\r\n            // Mouse wheel has not moved.\r\n            return;\r\n        }\r\n        if (cameraProperty === null || coordinate === null) {\r\n            // Mouse wheel axis not configured.\r\n            return;\r\n        }\r\n\r\n        let action = null;\r\n        switch (cameraProperty) {\r\n            case _CameraProperty.MoveRelative:\r\n                action = this._moveRelative;\r\n                break;\r\n            case _CameraProperty.RotateRelative:\r\n                action = this._rotateRelative;\r\n                break;\r\n            case _CameraProperty.MoveScene:\r\n                action = this._moveScene;\r\n                break;\r\n        }\r\n\r\n        switch (coordinate) {\r\n            case Coordinate.X:\r\n                action.set(value, 0, 0);\r\n                break;\r\n            case Coordinate.Y:\r\n                action.set(0, value, 0);\r\n                break;\r\n            case Coordinate.Z:\r\n                action.set(0, 0, value);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\r\n", "import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer, EventState } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\n/**\r\n * Manage the touch inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraTouchInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Defines the touch sensibility for rotation.\r\n     * The lower the faster.\r\n     */\r\n    @serialize()\r\n    public touchAngularSensibility: number = 200000.0;\r\n\r\n    /**\r\n     * Defines the touch sensibility for move.\r\n     * The lower the faster.\r\n     */\r\n    @serialize()\r\n    public touchMoveSensibility: number = 250.0;\r\n\r\n    /**\r\n     * Swap touch actions so that one touch is used for rotation and multiple for movement\r\n     */\r\n    public singleFingerRotate: boolean = false;\r\n\r\n    private _offsetX: Nullable<number> = null;\r\n    private _offsetY: Nullable<number> = null;\r\n\r\n    private _pointerPressed = new Array<number>();\r\n    private _pointerInput?: (p: PointerInfo, s: EventState) => void;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private _onLostFocus: Nullable<(e: FocusEvent) => any>;\r\n    private _isSafari: boolean;\r\n\r\n    /**\r\n     * Manage the touch inputs to control the movement of a free camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     * @param allowMouse Defines if mouse events can be treated as touch events\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define if mouse events can be treated as touch events\r\n         */\r\n        public allowMouse = false\r\n    ) {\r\n        this._isSafari = Tools.IsSafari();\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        let previousPosition: Nullable<{ x: number; y: number }> = null;\r\n\r\n        if (this._pointerInput === undefined) {\r\n            this._onLostFocus = () => {\r\n                this._offsetX = null;\r\n                this._offsetY = null;\r\n            };\r\n\r\n            this._pointerInput = (p) => {\r\n                const evt = <IPointerEvent>p.event;\r\n\r\n                const isMouseEvent = evt.pointerType === \"mouse\" || (this._isSafari && typeof evt.pointerType === \"undefined\");\r\n\r\n                if (!this.allowMouse && isMouseEvent) {\r\n                    return;\r\n                }\r\n\r\n                if (p.type === PointerEventTypes.POINTERDOWN) {\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    this._pointerPressed.push(evt.pointerId);\r\n\r\n                    if (this._pointerPressed.length !== 1) {\r\n                        return;\r\n                    }\r\n\r\n                    previousPosition = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                    };\r\n                } else if (p.type === PointerEventTypes.POINTERUP) {\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    const index: number = this._pointerPressed.indexOf(evt.pointerId);\r\n\r\n                    if (index === -1) {\r\n                        return;\r\n                    }\r\n                    this._pointerPressed.splice(index, 1);\r\n\r\n                    if (index != 0) {\r\n                        return;\r\n                    }\r\n                    previousPosition = null;\r\n                    this._offsetX = null;\r\n                    this._offsetY = null;\r\n                } else if (p.type === PointerEventTypes.POINTERMOVE) {\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    if (!previousPosition) {\r\n                        return;\r\n                    }\r\n\r\n                    const index: number = this._pointerPressed.indexOf(evt.pointerId);\r\n\r\n                    if (index != 0) {\r\n                        return;\r\n                    }\r\n\r\n                    this._offsetX = evt.clientX - previousPosition.x;\r\n                    this._offsetY = -(evt.clientY - previousPosition.y);\r\n                }\r\n            };\r\n        }\r\n\r\n        this._observer = this.camera\r\n            .getScene()\r\n            ._inputManager._addCameraPointerObserver(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\r\n\r\n        if (this._onLostFocus) {\r\n            const engine = this.camera.getEngine();\r\n            const element = engine.getInputElement();\r\n            element && element.addEventListener(\"blur\", this._onLostFocus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._pointerInput) {\r\n            if (this._observer) {\r\n                this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n                this._observer = null;\r\n            }\r\n\r\n            if (this._onLostFocus) {\r\n                const engine = this.camera.getEngine();\r\n                const element = engine.getInputElement();\r\n                element && element.removeEventListener(\"blur\", this._onLostFocus);\r\n                this._onLostFocus = null;\r\n            }\r\n            this._pointerPressed.length = 0;\r\n            this._offsetX = null;\r\n            this._offsetY = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._offsetX === null || this._offsetY === null) {\r\n            return;\r\n        }\r\n        if (this._offsetX === 0 && this._offsetY === 0) {\r\n            return;\r\n        }\r\n\r\n        const camera = this.camera;\r\n        const handednessMultiplier = camera._calculateHandednessMultiplier();\r\n        camera.cameraRotation.y = (handednessMultiplier * this._offsetX) / this.touchAngularSensibility;\r\n\r\n        const rotateCamera = (this.singleFingerRotate && this._pointerPressed.length === 1) || (!this.singleFingerRotate && this._pointerPressed.length > 1);\r\n\r\n        if (rotateCamera) {\r\n            camera.cameraRotation.x = -this._offsetY / this.touchAngularSensibility;\r\n        } else {\r\n            const speed = camera._computeLocalCameraSpeed();\r\n            const direction = new Vector3(0, 0, this.touchMoveSensibility !== 0 ? (speed * this._offsetY) / this.touchMoveSensibility : 0);\r\n\r\n            Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, camera._cameraRotationMatrix);\r\n            camera.cameraDirection.addInPlace(Vector3.TransformCoordinates(direction, camera._cameraRotationMatrix));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraTouchInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"touch\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraTouchInput\"] = FreeCameraTouchInput;\r\n", "import type { FreeCamera } from \"./freeCamera\";\r\nimport { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\r\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraInputsManager extends CameraInputsManager<FreeCamera> {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _mouseInput: Nullable<FreeCameraMouseInput> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _mouseWheelInput: Nullable<FreeCameraMouseWheelInput> = null;\r\n    /**\r\n     * Instantiates a new FreeCameraInputsManager.\r\n     * @param camera Defines the camera the inputs belong to\r\n     */\r\n    constructor(camera: FreeCamera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Add keyboard input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addKeyboard(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraKeyboardMoveInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse input support to the input manager.\r\n     * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n     * @returns the current input manager\r\n     */\r\n    addMouse(touchEnabled = true): FreeCameraInputsManager {\r\n        if (!this._mouseInput) {\r\n            this._mouseInput = new FreeCameraMouseInput(touchEnabled);\r\n            this.add(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouse(): FreeCameraInputsManager {\r\n        if (this._mouseInput) {\r\n            this.remove(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse wheel input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addMouseWheel(): FreeCameraInputsManager {\r\n        if (!this._mouseWheelInput) {\r\n            this._mouseWheelInput = new FreeCameraMouseWheelInput();\r\n            this.add(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse wheel input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouseWheel(): FreeCameraInputsManager {\r\n        if (this._mouseWheelInput) {\r\n            this.remove(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add touch input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addTouch(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraTouchInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        super.clear();\r\n        this._mouseInput = null;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport { serializeAsVector3, serialize } from \"../Misc/decorators\";\r\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { TargetCamera } from \"./targetCamera\";\r\nimport { FreeCameraInputsManager } from \"./freeCameraInputsManager\";\r\nimport type { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport type { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { Tools } from \"../Misc/tools\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\n\r\n/**\r\n * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\r\n * Please consider using the new UniversalCamera instead as it adds more functionality like the gamepad.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n */\r\nexport class FreeCamera extends TargetCamera {\r\n    /**\r\n     * Define the collision ellipsoid of the camera.\r\n     * This is helpful to simulate a camera body like the player body around the camera\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions#arcrotatecamera\r\n     */\r\n    @serializeAsVector3()\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n\r\n    /**\r\n     * Define an offset for the position of the ellipsoid around the camera.\r\n     * This can be helpful to determine the center of the body near the gravity center of the body\r\n     * instead of its head.\r\n     */\r\n    @serializeAsVector3()\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Enable or disable collisions of the camera with the rest of the scene objects.\r\n     */\r\n    @serialize()\r\n    public checkCollisions = false;\r\n\r\n    /**\r\n     * Enable or disable gravity on the camera.\r\n     */\r\n    @serialize()\r\n    public applyGravity = false;\r\n\r\n    /**\r\n     * Define the input manager associated to the camera.\r\n     */\r\n    public inputs: FreeCameraInputsManager;\r\n\r\n    /**\r\n     * Gets the input sensibility for a mouse input. (default is 2000.0)\r\n     * Higher values reduce sensitivity.\r\n     */\r\n    public get angularSensibility(): number {\r\n        const mouse = <FreeCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            return mouse.angularSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the input sensibility for a mouse input. (default is 2000.0)\r\n     * Higher values reduce sensitivity.\r\n     */\r\n    public set angularSensibility(value: number) {\r\n        const mouse = <FreeCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            mouse.angularSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    public get keysUp(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysUp;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysUp(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysUp = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\r\n    public get keysUpward(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysUpward;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysUpward(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysUpward = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    public get keysDown(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysDown;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysDown(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysDown = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\r\n    public get keysDownward(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysDownward;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysDownward(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysDownward = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    public get keysLeft(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysLeft;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysLeft(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysLeft = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    public get keysRight(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRight;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRight(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRight = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\r\n     */\r\n    public get keysRotateLeft(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateLeft;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateLeft(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateLeft = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\r\n     */\r\n    public get keysRotateRight(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateRight;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateRight(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateRight = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the up rotation move of the camera.\r\n     */\r\n    public get keysRotateUp(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateUp;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateUp(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateUp = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the down rotation move of the camera.\r\n     */\r\n    public get keysRotateDown(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateDown;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateDown(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateDown = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event raised when the camera collide with a mesh in the scene.\r\n     */\r\n    public onCollide: (collidedMesh: AbstractMesh) => void;\r\n\r\n    private _collider: Collider;\r\n    private _needMoveForGravity = false;\r\n    private _oldPosition = Vector3.Zero();\r\n    private _diffPosition = Vector3.Zero();\r\n    private _newPosition = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _localDirection: Vector3;\r\n    /** @internal */\r\n    public _transformedDirection: Vector3;\r\n\r\n    /**\r\n     * Instantiates a Free Camera.\r\n     * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\r\n     * Please consider using the new UniversalCamera instead as it adds more functionality like touch to this camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the start position of the camera in the scene\r\n     * @param scene Define the scene the camera belongs to\r\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\r\n        this.inputs = new FreeCameraInputsManager(this);\r\n        this.inputs.addKeyboard().addMouse();\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * BACK COMPAT SIGNATURE ONLY.\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(ignored?: any, noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this.inputs.attachElement(noPreventDefault);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this.inputs.detachElement();\r\n\r\n        this.cameraDirection = new Vector3(0, 0, 0);\r\n        this.cameraRotation = new Vector2(0, 0);\r\n    }\r\n\r\n    // Collisions\r\n    private _collisionMask = -1;\r\n\r\n    /**\r\n     * Define a collision mask to limit the list of object the camera can collide with\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _collideWithWorld(displacement: Vector3): void {\r\n        let globalPosition: Vector3;\r\n\r\n        if (this.parent) {\r\n            globalPosition = Vector3.TransformCoordinates(this.position, this.parent.getWorldMatrix());\r\n        } else {\r\n            globalPosition = this.position;\r\n        }\r\n\r\n        globalPosition.subtractFromFloatsToRef(0, this.ellipsoid.y, 0, this._oldPosition);\r\n        this._oldPosition.addInPlace(this.ellipsoidOffset);\r\n\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n        if (!this._collider) {\r\n            this._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._collider._radius = this.ellipsoid;\r\n        this._collider.collisionMask = this._collisionMask;\r\n\r\n        //no need for clone, as long as gravity is not on.\r\n        let actualDisplacement = displacement;\r\n\r\n        //add gravity to the direction to prevent the dual-collision checking\r\n        if (this.applyGravity) {\r\n            //this prevents mending with cameraDirection, a global variable of the free camera class.\r\n            actualDisplacement = displacement.add(this.getScene().gravity);\r\n        }\r\n\r\n        coordinator.getNewPosition(this._oldPosition, actualDisplacement, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        this._newPosition.copyFrom(newPosition);\r\n\r\n        this._newPosition.subtractToRef(this._oldPosition, this._diffPosition);\r\n\r\n        if (this._diffPosition.length() > Engine.CollisionsEpsilon) {\r\n            this.position.addToRef(this._diffPosition, this._deferredPositionUpdate);\r\n            if (!this._deferOnly) {\r\n                this.position.copyFrom(this._deferredPositionUpdate);\r\n            } else {\r\n                this._deferredUpdated = true;\r\n            }\r\n            // call onCollide, if defined. Note that in case of deferred update, the actual position change might happen in the next frame.\r\n            if (this.onCollide && collidedMesh) {\r\n                this.onCollide(collidedMesh);\r\n            }\r\n        }\r\n    };\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        if (!this._localDirection) {\r\n            this._localDirection = Vector3.Zero();\r\n            this._transformedDirection = Vector3.Zero();\r\n        }\r\n\r\n        this.inputs.checkInputs();\r\n\r\n        super._checkInputs();\r\n    }\r\n\r\n    /**\r\n     * Enable movement without a user input. This allows gravity to always be applied.\r\n     */\r\n    public set needMoveForGravity(value: boolean) {\r\n        this._needMoveForGravity = value;\r\n    }\r\n\r\n    /**\r\n     * When true, gravity is applied whether there is user input or not.\r\n     */\r\n    public get needMoveForGravity(): boolean {\r\n        return this._needMoveForGravity;\r\n    }\r\n\r\n    /** @internal */\r\n    public _decideIfNeedsToMove(): boolean {\r\n        return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updatePosition(): void {\r\n        if (this.checkCollisions && this.getScene().collisionsEnabled) {\r\n            this._collideWithWorld(this.cameraDirection);\r\n        } else {\r\n            super._updatePosition();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the camera and release the current resources hold by it.\r\n     */\r\n    public dispose(): void {\r\n        this.inputs.clear();\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCamera\";\r\n    }\r\n}\r\n", "import type { IEasingFunction } from \"./easing\";\r\n\r\n/**\r\n * Defines an interface which represents an animation key frame\r\n */\r\nexport interface IAnimationKey {\r\n    /**\r\n     * Frame of the key frame\r\n     */\r\n    frame: number;\r\n    /**\r\n     * Value at the specifies key frame\r\n     */\r\n    value: any;\r\n    /**\r\n     * The input tangent for the cubic hermite spline\r\n     */\r\n    inTangent?: any;\r\n    /**\r\n     * The output tangent for the cubic hermite spline\r\n     */\r\n    outTangent?: any;\r\n    /**\r\n     * The animation interpolation type\r\n     */\r\n    interpolation?: AnimationKeyInterpolation;\r\n    /**\r\n     * Property defined by UI tools to link (or not ) the tangents\r\n     */\r\n    lockedTangent?: boolean;\r\n    /**\r\n     * The easing function associated with the key frame (optional). If not defined, the easing function defined at the animation level (if any) will be used instead\r\n     */\r\n    easingFunction?: IEasingFunction;\r\n}\r\n\r\n/**\r\n * Enum for the animation key frame interpolation type\r\n */\r\nexport enum AnimationKeyInterpolation {\r\n    /**\r\n     * Use tangents to interpolate between start and end values.\r\n     */\r\n    NONE = 0,\r\n    /**\r\n     * Do not interpolate between keys and use the start key value only. Tangents are ignored\r\n     */\r\n    STEP = 1,\r\n}\r\n", "/**\r\n * Represents the range of an animation\r\n */\r\nexport class AnimationRange {\r\n    /**\r\n     * Initializes the range of an animation\r\n     * @param name The name of the animation range\r\n     * @param from The starting frame of the animation\r\n     * @param to The ending frame of the animation\r\n     */\r\n    constructor(\r\n        /**The name of the animation range**/\r\n        public name: string,\r\n        /**The starting frame of the animation */\r\n        public from: number,\r\n        /**The ending frame of the animation*/\r\n        public to: number\r\n    ) {}\r\n\r\n    /**\r\n     * Makes a copy of the animation range\r\n     * @returns A copy of the animation range\r\n     */\r\n    public clone(): AnimationRange {\r\n        return new AnimationRange(this.name, this.from, this.to);\r\n    }\r\n}\r\n", "import type { IEasingFunction, EasingFunction } from \"./easing\";\r\nimport { Vector3, Quaternion, Vector2, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\nimport { AnimationKeyInterpolation } from \"./animationKey\";\r\nimport { AnimationRange } from \"./animationRange\";\r\nimport type { AnimationEvent } from \"./animationEvent\";\r\nimport { Node } from \"../node\";\r\nimport type { IAnimatable } from \"./animatable.interface\";\r\nimport { Size } from \"../Maths/math.size\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Animatable } from \"./animatable\";\r\nimport type { RuntimeAnimation } from \"./runtimeAnimation\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n// Static values to help the garbage collector\r\n\r\n// Quaternion\r\nexport const _staticOffsetValueQuaternion: DeepImmutable<Quaternion> = Object.freeze(new Quaternion(0, 0, 0, 0));\r\n\r\n// Vector3\r\nexport const _staticOffsetValueVector3: DeepImmutable<Vector3> = Object.freeze(Vector3.Zero());\r\n\r\n// Vector2\r\nexport const _staticOffsetValueVector2: DeepImmutable<Vector2> = Object.freeze(Vector2.Zero());\r\n\r\n// Size\r\nexport const _staticOffsetValueSize: DeepImmutable<Size> = Object.freeze(Size.Zero());\r\n\r\n// Color3\r\nexport const _staticOffsetValueColor3: DeepImmutable<Color3> = Object.freeze(Color3.Black());\r\n\r\n// Color4\r\nexport const _staticOffsetValueColor4: DeepImmutable<Color4> = Object.freeze(new Color4(0, 0, 0, 0));\r\n\r\n/**\r\n * Options to be used when creating an additive animation\r\n */\r\nexport interface IMakeAnimationAdditiveOptions {\r\n    /**\r\n     * The frame that the animation should be relative to (if not provided, 0 will be used)\r\n     */\r\n    referenceFrame?: number;\r\n    /**\r\n     * The name of the animation range to convert to additive. If not provided, fromFrame / toFrame will be used\r\n     * If fromFrame / toFrame are not provided either, the whole animation will be converted to additive\r\n     */\r\n    range?: string;\r\n    /**\r\n     * If true, the original animation will be cloned and converted to additive. If false, the original animation will be converted to additive (default is false)\r\n     */\r\n    cloneOriginalAnimation?: boolean;\r\n    /**\r\n     * The name of the cloned animation if cloneOriginalAnimation is true. If not provided, use the original animation name\r\n     */\r\n    clonedAnimationName?: string;\r\n    /**\r\n     * Together with toFrame, defines the range of the animation to convert to additive. Will only be used if range is not provided\r\n     * If range and fromFrame / toFrame are not provided, the whole animation will be converted to additive\r\n     */\r\n    fromFrame?: number;\r\n    /**\r\n     * Together with fromFrame, defines the range of the animation to convert to additive.\r\n     */\r\n    toFrame?: number;\r\n    /**\r\n     * If true, the key frames will be clipped to the range specified by range or fromFrame / toFrame (default is false)\r\n     */\r\n    clipKeys?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationState {\r\n    key: number;\r\n    repeatCount: number;\r\n    workValue?: any;\r\n    loopMode?: number;\r\n    offsetValue?: any;\r\n    highLimitValue?: any;\r\n}\r\n\r\nconst evaluateAnimationState: _IAnimationState = {\r\n    key: 0,\r\n    repeatCount: 0,\r\n    loopMode: 2 /*Animation.ANIMATIONLOOPMODE_CONSTANT*/,\r\n};\r\n\r\n/**\r\n * Class used to store any kind of animation\r\n */\r\nexport class Animation {\r\n    private static _UniqueIdGenerator = 0;\r\n\r\n    /**\r\n     * Use matrix interpolation instead of using direct key value when animating matrices\r\n     */\r\n    public static AllowMatricesInterpolation = false;\r\n\r\n    /**\r\n     * When matrix interpolation is enabled, this boolean forces the system to use Matrix.DecomposeLerp instead of Matrix.Lerp. Interpolation is more precise but slower\r\n     */\r\n    public static AllowMatrixDecomposeForInterpolation = true;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the animation (the uniqueness is solely among other animations)\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the animation was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Stores the key frames of the animation\r\n     */\r\n    private _keys: Array<IAnimationKey>;\r\n\r\n    /**\r\n     * Stores the easing function of the animation\r\n     */\r\n    private _easingFunction: Nullable<IEasingFunction> = null;\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _runtimeAnimations = new Array<RuntimeAnimation>();\r\n\r\n    /**\r\n     * The set of event that will be linked to this animation\r\n     */\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * Stores an array of target property paths\r\n     */\r\n    public targetPropertyPath: string[];\r\n\r\n    /**\r\n     * Stores the blending speed of the animation\r\n     */\r\n    public blendingSpeed = 0.01;\r\n\r\n    /**\r\n     * Stores the animation ranges for the animation\r\n     */\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * @internal Internal use\r\n     */\r\n    public static _PrepareAnimation(\r\n        name: string,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction\r\n    ): Nullable<Animation> {\r\n        let dataType = undefined;\r\n\r\n        if (!isNaN(parseFloat(from)) && isFinite(from)) {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (from instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else if (from instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (from instanceof Vector2) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR2;\r\n        } else if (from instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (from instanceof Color4) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR4;\r\n        } else if (from instanceof Size) {\r\n            dataType = Animation.ANIMATIONTYPE_SIZE;\r\n        }\r\n\r\n        if (dataType == undefined) {\r\n            return null;\r\n        }\r\n\r\n        const animation = new Animation(name, targetProperty, framePerSecond, dataType, loopMode);\r\n\r\n        const keys: Array<IAnimationKey> = [\r\n            { frame: 0, value: from },\r\n            { frame: totalFrame, value: to },\r\n        ];\r\n        animation.setKeys(keys);\r\n\r\n        if (easingFunction !== undefined) {\r\n            animation.setEasingFunction(easingFunction);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Sets up an animation\r\n     * @param property The property to animate\r\n     * @param animationType The animation type to apply\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param easingFunction The easing function used in the animation\r\n     * @returns The created animation\r\n     */\r\n    public static CreateAnimation(property: string, animationType: number, framePerSecond: number, easingFunction: EasingFunction): Animation {\r\n        const animation: Animation = new Animation(property + \"Animation\", property, framePerSecond, animationType, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setEasingFunction(easingFunction);\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param target defines the target where the animation will take place\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second yo use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when animation end\r\n     * @param scene defines the hosting scene\r\n     * @returns the animatable created for this animation\r\n     */\r\n    public static CreateAndStartAnimation(\r\n        name: string,\r\n        target: any,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void,\r\n        scene?: Scene\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        if (target.getScene) {\r\n            scene = target.getScene();\r\n        }\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        return scene.beginDirectAnimation(target, [animation], 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node and its descendants\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param node defines the root node where the animation will take place\r\n     * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second to use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n     * @returns the list of animatables created for all nodes\r\n     * @example https://www.babylonjs-playground.com/#MH0VLI\r\n     */\r\n    public static CreateAndStartHierarchyAnimation(\r\n        name: string,\r\n        node: Node,\r\n        directDescendantsOnly: boolean,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable[]> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        const scene = node.getScene();\r\n        return scene.beginDirectHierarchyAnimation(node, directDescendantsOnly, [animation], 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, merges it with the existing animations and starts it\r\n     * @param name Name of the animation\r\n     * @param node Node which contains the scene that begins the animations\r\n     * @param targetProperty Specifies which property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param totalFrame The total number of frames\r\n     * @param from The frame at the beginning of the animation\r\n     * @param to The frame at the end of the animation\r\n     * @param loopMode Specifies the loop mode of the animation\r\n     * @param easingFunction (Optional) The easing function of the animation, which allow custom mathematical formulas for animations\r\n     * @param onAnimationEnd Callback to run once the animation is complete\r\n     * @returns Nullable animation\r\n     */\r\n    public static CreateMergeAndStartAnimation(\r\n        name: string,\r\n        node: Node,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        node.animations.push(animation);\r\n\r\n        return node.getScene().beginAnimation(node, 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes of an animation to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to (default: 0)\r\n     * @param range defines the name of the AnimationRange belonging to the Animation to convert\r\n     * @param cloneOriginal defines whether or not to clone the animation and convert the clone or convert the original animation (default is false)\r\n     * @param clonedName defines the name of the resulting cloned Animation if cloneOriginal is true\r\n     * @returns a new Animation if cloneOriginal is true or the original Animation if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, referenceFrame?: number, range?: string, cloneOriginal?: boolean, clonedName?: string): Animation;\r\n\r\n    /**\r\n     * Convert the keyframes of an animation to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param options defines the options to use when converting ey keyframes\r\n     * @returns a new Animation if options.cloneOriginalAnimation is true or the original Animation if options.cloneOriginalAnimation is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, options?: IMakeAnimationAdditiveOptions): Animation;\r\n\r\n    /** @internal */\r\n    public static MakeAnimationAdditive(\r\n        sourceAnimation: Animation,\r\n        referenceFrameOrOptions?: number | IMakeAnimationAdditiveOptions,\r\n        range?: string,\r\n        cloneOriginal = false,\r\n        clonedName?: string\r\n    ): Animation {\r\n        let options: IMakeAnimationAdditiveOptions;\r\n\r\n        if (typeof referenceFrameOrOptions === \"object\") {\r\n            options = referenceFrameOrOptions;\r\n        } else {\r\n            options = {\r\n                referenceFrame: referenceFrameOrOptions ?? 0,\r\n                range: range,\r\n                cloneOriginalAnimation: cloneOriginal,\r\n                clonedAnimationName: clonedName,\r\n            };\r\n        }\r\n\r\n        let animation = sourceAnimation;\r\n\r\n        if (options.cloneOriginalAnimation) {\r\n            animation = sourceAnimation.clone();\r\n            animation.name = options.clonedAnimationName || animation.name;\r\n        }\r\n\r\n        if (!animation._keys.length) {\r\n            return animation;\r\n        }\r\n\r\n        const referenceFrame = options.referenceFrame && options.referenceFrame >= 0 ? options.referenceFrame : 0;\r\n        let startIndex = 0;\r\n        const firstKey = animation._keys[0];\r\n        let endIndex = animation._keys.length - 1;\r\n        const lastKey = animation._keys[endIndex];\r\n        const valueStore = {\r\n            referenceValue: firstKey.value,\r\n            referencePosition: TmpVectors.Vector3[0],\r\n            referenceQuaternion: TmpVectors.Quaternion[0],\r\n            referenceScaling: TmpVectors.Vector3[1],\r\n            keyPosition: TmpVectors.Vector3[2],\r\n            keyQuaternion: TmpVectors.Quaternion[1],\r\n            keyScaling: TmpVectors.Vector3[3],\r\n        };\r\n        let from = firstKey.frame;\r\n        let to = lastKey.frame;\r\n        if (options.range) {\r\n            const rangeValue = animation.getRange(options.range);\r\n\r\n            if (rangeValue) {\r\n                from = rangeValue.from;\r\n                to = rangeValue.to;\r\n            }\r\n        } else {\r\n            from = options.fromFrame ?? from;\r\n            to = options.toFrame ?? to;\r\n        }\r\n\r\n        if (from !== firstKey.frame) {\r\n            startIndex = animation.createKeyForFrame(from);\r\n        }\r\n\r\n        if (to !== lastKey.frame) {\r\n            endIndex = animation.createKeyForFrame(to);\r\n        }\r\n\r\n        // There's only one key, so use it\r\n        if (animation._keys.length === 1) {\r\n            const value = animation._getKeyValue(animation._keys[0]);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Reference frame is before the first frame, so just use the first frame\r\n        else if (referenceFrame <= firstKey.frame) {\r\n            const value = animation._getKeyValue(firstKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Reference frame is after the last frame, so just use the last frame\r\n        else if (referenceFrame >= lastKey.frame) {\r\n            const value = animation._getKeyValue(lastKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Interpolate the reference value from the animation\r\n        else {\r\n            evaluateAnimationState.key = 0;\r\n            const value = animation._interpolate(referenceFrame, evaluateAnimationState);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Conjugate the quaternion\r\n        if (animation.dataType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            valueStore.referenceValue.normalize().conjugateInPlace();\r\n        }\r\n\r\n        // Decompose matrix and conjugate the quaternion\r\n        else if (animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\r\n            valueStore.referenceValue.decompose(valueStore.referenceScaling, valueStore.referenceQuaternion, valueStore.referencePosition);\r\n            valueStore.referenceQuaternion.normalize().conjugateInPlace();\r\n        }\r\n\r\n        let startFrame = Number.MAX_VALUE;\r\n        const clippedKeys: Nullable<IAnimationKey[]> = options.clipKeys ? [] : null;\r\n\r\n        // Subtract the reference value from all of the key values\r\n        for (let index = startIndex; index <= endIndex; index++) {\r\n            let key = animation._keys[index];\r\n\r\n            if (clippedKeys) {\r\n                key = {\r\n                    frame: key.frame,\r\n                    value: key.value.clone ? key.value.clone() : key.value,\r\n                    inTangent: key.inTangent,\r\n                    outTangent: key.outTangent,\r\n                    interpolation: key.interpolation,\r\n                    lockedTangent: key.lockedTangent,\r\n                };\r\n                if (startFrame === Number.MAX_VALUE) {\r\n                    startFrame = key.frame;\r\n                }\r\n                key.frame -= startFrame;\r\n                clippedKeys.push(key);\r\n            }\r\n\r\n            // If this key was duplicated to create a frame 0 key, skip it because its value has already been updated\r\n            if (index && animation.dataType !== Animation.ANIMATIONTYPE_FLOAT && key.value === firstKey.value) {\r\n                continue;\r\n            }\r\n\r\n            switch (animation.dataType) {\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    key.value.decompose(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition);\r\n                    valueStore.keyPosition.subtractInPlace(valueStore.referencePosition);\r\n                    valueStore.keyScaling.divideInPlace(valueStore.referenceScaling);\r\n                    valueStore.referenceQuaternion.multiplyToRef(valueStore.keyQuaternion, valueStore.keyQuaternion);\r\n                    Matrix.ComposeToRef(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    valueStore.referenceValue.multiplyToRef(key.value, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_VECTOR2:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.value.subtractToRef(valueStore.referenceValue, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_SIZE:\r\n                    key.value.width -= valueStore.referenceValue.width;\r\n                    key.value.height -= valueStore.referenceValue.height;\r\n                    break;\r\n\r\n                default:\r\n                    key.value -= valueStore.referenceValue;\r\n            }\r\n        }\r\n\r\n        if (clippedKeys) {\r\n            animation.setKeys(clippedKeys, true);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Transition property of an host to the target Value\r\n     * @param property The property to transition\r\n     * @param targetValue The target Value of the property\r\n     * @param host The object where the property to animate belongs\r\n     * @param scene Scene used to run the animation\r\n     * @param frameRate Framerate (in frame/s) to use\r\n     * @param transition The transition type we want to use\r\n     * @param duration The duration of the animation, in milliseconds\r\n     * @param onAnimationEnd Callback trigger at the end of the animation\r\n     * @returns Nullable animation\r\n     */\r\n    public static TransitionTo(\r\n        property: string,\r\n        targetValue: any,\r\n        host: any,\r\n        scene: Scene,\r\n        frameRate: number,\r\n        transition: Animation,\r\n        duration: number,\r\n        onAnimationEnd: Nullable<() => void> = null\r\n    ): Nullable<Animatable> {\r\n        if (duration <= 0) {\r\n            host[property] = targetValue;\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const endFrame: number = frameRate * (duration / 1000);\r\n\r\n        transition.setKeys([\r\n            {\r\n                frame: 0,\r\n                value: host[property].clone ? host[property].clone() : host[property],\r\n            },\r\n            {\r\n                frame: endFrame,\r\n                value: targetValue,\r\n            },\r\n        ]);\r\n\r\n        if (!host.animations) {\r\n            host.animations = [];\r\n        }\r\n\r\n        host.animations.push(transition);\r\n\r\n        const animation: Animatable = scene.beginAnimation(host, 0, endFrame, false);\r\n        animation.onAnimationEnd = onAnimationEnd;\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Return the array of runtime animations currently using this animation\r\n     */\r\n    public get runtimeAnimations(): RuntimeAnimation[] {\r\n        return this._runtimeAnimations;\r\n    }\r\n\r\n    /**\r\n     * Specifies if any of the runtime animations are currently running\r\n     */\r\n    public get hasRunningRuntimeAnimations(): boolean {\r\n        for (const runtimeAnimation of this._runtimeAnimations) {\r\n            if (!runtimeAnimation.isStopped()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the animation\r\n     * @param name Name of the animation\r\n     * @param targetProperty Property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param dataType The data type of the animation\r\n     * @param loopMode The loop mode of the animation\r\n     * @param enableBlending Specifies if blending should be enabled\r\n     */\r\n    constructor(\r\n        /**Name of the animation */\r\n        public name: string,\r\n        /**Property to animate */\r\n        public targetProperty: string,\r\n        /**The frames per second of the animation */\r\n        public framePerSecond: number,\r\n        /**The data type of the animation */\r\n        public dataType: number,\r\n        /**The loop mode of the animation */\r\n        public loopMode?: number,\r\n        /**Specifies if blending should be enabled */\r\n        public enableBlending?: boolean\r\n    ) {\r\n        this.targetPropertyPath = targetProperty.split(\".\");\r\n        this.dataType = dataType;\r\n        this.loopMode = loopMode === undefined ? Animation.ANIMATIONLOOPMODE_CYCLE : loopMode;\r\n        this.uniqueId = Animation._UniqueIdGenerator++;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Converts the animation to a string\r\n     * @param fullDetails support for multiple levels of logging within scene loading\r\n     * @returns String form of the animation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", property: \" + this.targetProperty;\r\n        ret += \", datatype: \" + [\"Float\", \"Vector3\", \"Quaternion\", \"Matrix\", \"Color3\", \"Vector2\"][this.dataType];\r\n        ret += \", nKeys: \" + (this._keys ? this._keys.length : \"none\");\r\n        ret += \", nRanges: \" + (this._ranges ? Object.keys(this._ranges).length : \"none\");\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            let first = true;\r\n            for (const name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Add an event to this animation\r\n     * @param event Event to add\r\n     */\r\n    public addEvent(event: AnimationEvent): void {\r\n        this._events.push(event);\r\n        this._events.sort((a, b) => a.frame - b.frame);\r\n    }\r\n\r\n    /**\r\n     * Remove all events found at the given frame\r\n     * @param frame The frame to remove events from\r\n     */\r\n    public removeEvents(frame: number): void {\r\n        for (let index = 0; index < this._events.length; index++) {\r\n            if (this._events[index].frame === frame) {\r\n                this._events.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all the events from the animation\r\n     * @returns Events from the animation\r\n     */\r\n    public getEvents(): AnimationEvent[] {\r\n        return this._events;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range\r\n     * @param name Name of the animation range\r\n     * @param from Starting frame of the animation range\r\n     * @param to Ending frame of the animation\r\n     */\r\n    public createRange(name: string, from: number, to: number): void {\r\n        // check name not already in use; could happen for bones after serialized\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes an animation range by name\r\n     * @param name Name of the animation range to delete\r\n     * @param deleteFrames Specifies if the key frames for the range should also be deleted (true) or not (false)\r\n     */\r\n    public deleteRange(name: string, deleteFrames = true): void {\r\n        const range = this._ranges[name];\r\n        if (!range) {\r\n            return;\r\n        }\r\n        if (deleteFrames) {\r\n            const from = range.from;\r\n            const to = range.to;\r\n\r\n            // this loop MUST go high to low for multiple splices to work\r\n            for (let key = this._keys.length - 1; key >= 0; key--) {\r\n                if (this._keys[key].frame >= from && this._keys[key].frame <= to) {\r\n                    this._keys.splice(key, 1);\r\n                }\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Gets the animation range by name, or null if not defined\r\n     * @param name Name of the animation range\r\n     * @returns Nullable animation range\r\n     */\r\n    public getRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name];\r\n    }\r\n\r\n    /**\r\n     * Gets the key frames from the animation\r\n     * @returns The key frames of the animation\r\n     */\r\n    public getKeys(): Array<IAnimationKey> {\r\n        return this._keys;\r\n    }\r\n\r\n    /**\r\n     * Gets the highest frame rate of the animation\r\n     * @returns Highest frame rate of the animation\r\n     */\r\n    public getHighestFrame(): number {\r\n        let ret = 0;\r\n\r\n        for (let key = 0, nKeys = this._keys.length; key < nKeys; key++) {\r\n            if (ret < this._keys[key].frame) {\r\n                ret = this._keys[key].frame;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the easing function of the animation\r\n     * @returns Easing function of the animation\r\n     */\r\n    public getEasingFunction(): Nullable<IEasingFunction> {\r\n        return this._easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Sets the easing function of the animation\r\n     * @param easingFunction A custom mathematical formula for animation\r\n     */\r\n    public setEasingFunction(easingFunction: Nullable<IEasingFunction>): void {\r\n        this._easingFunction = easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunction(startValue: number, endValue: number, gradient: number): number {\r\n        return Scalar.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunctionWithTangents(startValue: number, outTangent: number, endValue: number, inTangent: number, gradient: number): number {\r\n        return Scalar.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion using a spherical linear interpolation\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Slerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunctionWithTangents(startValue: Quaternion, outTangent: Quaternion, endValue: Quaternion, inTangent: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Hermite(startValue, outTangent, endValue, inTangent, gradient).normalize();\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns InterpolatedVector3 value\r\n     */\r\n    public vector3InterpolateFunctionWithTangents(startValue: Vector3, outTangent: Vector3, endValue: Vector3, inTangent: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunctionWithTangents(startValue: Vector2, outTangent: Vector2, endValue: Vector2, inTangent: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a size linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Size value\r\n     */\r\n    public sizeInterpolateFunction(startValue: Size, endValue: Size, gradient: number): Size {\r\n        return Size.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: number): Color3 {\r\n        return Color3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color3InterpolateFunctionWithTangents(startValue: Color3, outTangent: Color3, endValue: Color3, inTangent: Color3, gradient: number): Color3 {\r\n        return Color3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color4InterpolateFunction(startValue: Color4, endValue: Color4, gradient: number): Color4 {\r\n        return Color4.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color4InterpolateFunctionWithTangents(startValue: Color4, outTangent: Color4, endValue: Color4, inTangent: Color4, gradient: number): Color4 {\r\n        return Color4.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _getKeyValue(value: any): any {\r\n        if (typeof value === \"function\") {\r\n            return value();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Evaluate the animation value at a given frame\r\n     * @param currentFrame defines the frame where we want to evaluate the animation\r\n     * @returns the animation value\r\n     */\r\n    public evaluate(currentFrame: number) {\r\n        evaluateAnimationState.key = 0;\r\n        return this._interpolate(currentFrame, evaluateAnimationState);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _interpolate(currentFrame: number, state: _IAnimationState, searchClosestKeyOnly = false): any {\r\n        if (state.loopMode === Animation.ANIMATIONLOOPMODE_CONSTANT && state.repeatCount > 0) {\r\n            return state.highLimitValue.clone ? state.highLimitValue.clone() : state.highLimitValue;\r\n        }\r\n\r\n        const keys = this._keys;\r\n        const keysLength = keys.length;\r\n\r\n        let key = state.key;\r\n\r\n        while (key >= 0 && currentFrame < keys[key].frame) {\r\n            --key;\r\n        }\r\n\r\n        while (key + 1 <= keysLength - 1 && currentFrame >= keys[key + 1].frame) {\r\n            ++key;\r\n        }\r\n\r\n        state.key = key;\r\n\r\n        if (key < 0) {\r\n            return searchClosestKeyOnly ? undefined : this._getKeyValue(keys[0].value);\r\n        } else if (key + 1 > keysLength - 1) {\r\n            return searchClosestKeyOnly ? undefined : this._getKeyValue(keys[keysLength - 1].value);\r\n        }\r\n\r\n        const startKey = keys[key];\r\n        const endKey = keys[key + 1];\r\n\r\n        if (searchClosestKeyOnly && (currentFrame === startKey.frame || currentFrame === endKey.frame)) {\r\n            return undefined;\r\n        }\r\n\r\n        const startValue = this._getKeyValue(startKey.value);\r\n        const endValue = this._getKeyValue(endKey.value);\r\n        if (startKey.interpolation === AnimationKeyInterpolation.STEP) {\r\n            if (endKey.frame > currentFrame) {\r\n                return startValue;\r\n            } else {\r\n                return endValue;\r\n            }\r\n        }\r\n\r\n        const useTangent = startKey.outTangent !== undefined && endKey.inTangent !== undefined;\r\n        const frameDelta = endKey.frame - startKey.frame;\r\n\r\n        // gradient : percent of currentFrame between the frame inf and the frame sup\r\n        let gradient = (currentFrame - startKey.frame) / frameDelta;\r\n\r\n        // check for easingFunction and correction of gradient\r\n        const easingFunction = startKey.easingFunction || this.getEasingFunction();\r\n        if (easingFunction !== null) {\r\n            gradient = easingFunction.ease(gradient);\r\n        }\r\n\r\n        switch (this.dataType) {\r\n            // Float\r\n            case Animation.ANIMATIONTYPE_FLOAT: {\r\n                const floatValue = useTangent\r\n                    ? this.floatInterpolateFunctionWithTangents(startValue, startKey.outTangent * frameDelta, endValue, endKey.inTangent * frameDelta, gradient)\r\n                    : this.floatInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return floatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return (state.offsetValue ?? 0) * state.repeatCount + floatValue;\r\n                }\r\n                break;\r\n            }\r\n            // Quaternion\r\n            case Animation.ANIMATIONTYPE_QUATERNION: {\r\n                const quatValue = useTangent\r\n                    ? this.quaternionInterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.quaternionInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return quatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return quatValue.addInPlace((state.offsetValue || _staticOffsetValueQuaternion).scale(state.repeatCount));\r\n                }\r\n\r\n                return quatValue;\r\n            }\r\n            // Vector3\r\n            case Animation.ANIMATIONTYPE_VECTOR3: {\r\n                const vec3Value = useTangent\r\n                    ? this.vector3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return vec3Value.add((state.offsetValue || _staticOffsetValueVector3).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Vector2\r\n            case Animation.ANIMATIONTYPE_VECTOR2: {\r\n                const vec2Value = useTangent\r\n                    ? this.vector2InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector2InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec2Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return vec2Value.add((state.offsetValue || _staticOffsetValueVector2).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Size\r\n            case Animation.ANIMATIONTYPE_SIZE: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient);\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient).add((state.offsetValue || _staticOffsetValueSize).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color3\r\n            case Animation.ANIMATIONTYPE_COLOR3: {\r\n                const color3Value = useTangent\r\n                    ? this.color3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return color3Value.add((state.offsetValue || _staticOffsetValueColor3).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color4\r\n            case Animation.ANIMATIONTYPE_COLOR4: {\r\n                const color4Value = useTangent\r\n                    ? this.color4InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color4InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color4Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return color4Value.add((state.offsetValue || _staticOffsetValueColor4).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Matrix\r\n            case Animation.ANIMATIONTYPE_MATRIX: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO: {\r\n                        if (Animation.AllowMatricesInterpolation) {\r\n                            return this.matrixInterpolateFunction(startValue, endValue, gradient, state.workValue);\r\n                        }\r\n                        return startValue;\r\n                    }\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT: {\r\n                        return startValue;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Defines the function to use to interpolate matrices\r\n     * @param startValue defines the start matrix\r\n     * @param endValue defines the end matrix\r\n     * @param gradient defines the gradient between both matrices\r\n     * @param result defines an optional target matrix where to store the interpolation\r\n     * @returns the interpolated matrix\r\n     */\r\n    public matrixInterpolateFunction(startValue: Matrix, endValue: Matrix, gradient: number, result?: Matrix): Matrix {\r\n        if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n            if (result) {\r\n                Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n                return result;\r\n            }\r\n            return Matrix.DecomposeLerp(startValue, endValue, gradient);\r\n        }\r\n\r\n        if (result) {\r\n            Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n            return result;\r\n        }\r\n        return Matrix.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of the animation\r\n     * @returns Cloned animation\r\n     */\r\n    public clone(): Animation {\r\n        const clone = new Animation(this.name, this.targetPropertyPath.join(\".\"), this.framePerSecond, this.dataType, this.loopMode);\r\n\r\n        clone.enableBlending = this.enableBlending;\r\n        clone.blendingSpeed = this.blendingSpeed;\r\n\r\n        if (this._keys) {\r\n            clone.setKeys(this._keys);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            clone._ranges = {};\r\n            for (const name in this._ranges) {\r\n                const range = this._ranges[name];\r\n                if (!range) {\r\n                    continue;\r\n                }\r\n                clone._ranges[name] = range.clone();\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Sets the key frames of the animation\r\n     * @param values The animation key frames to set\r\n     * @param dontClone Whether to clone the keys or not (default is false, so the array of keys is cloned)\r\n     */\r\n    public setKeys(values: Array<IAnimationKey>, dontClone = false): void {\r\n        this._keys = !dontClone ? values.slice(0) : values;\r\n    }\r\n\r\n    /**\r\n     * Creates a key for the frame passed as a parameter and adds it to the animation IF a key doesn't already exist for that frame\r\n     * @param frame Frame number\r\n     * @returns The key index if the key was added or the index of the pre existing key if the frame passed as parameter already has a corresponding key\r\n     */\r\n    public createKeyForFrame(frame: number) {\r\n        // Find the key corresponding to frame\r\n        evaluateAnimationState.key = 0;\r\n        const value = this._interpolate(frame, evaluateAnimationState, true);\r\n\r\n        if (!value) {\r\n            // A key corresponding to this frame already exists\r\n            return this._keys[evaluateAnimationState.key].frame === frame ? evaluateAnimationState.key : evaluateAnimationState.key + 1;\r\n        }\r\n\r\n        // The frame is between two keys, so create a new key\r\n        const newKey: IAnimationKey = {\r\n            frame,\r\n            value: value.clone ? value.clone() : value,\r\n        };\r\n\r\n        this._keys.splice(evaluateAnimationState.key + 1, 0, newKey);\r\n\r\n        return evaluateAnimationState.key + 1;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animation to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.property = this.targetProperty;\r\n        serializationObject.framePerSecond = this.framePerSecond;\r\n        serializationObject.dataType = this.dataType;\r\n        serializationObject.loopBehavior = this.loopMode;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        const dataType = this.dataType;\r\n        serializationObject.keys = [];\r\n        const keys = this.getKeys();\r\n        for (let index = 0; index < keys.length; index++) {\r\n            const animationKey = keys[index];\r\n\r\n            const key: any = {};\r\n            key.frame = animationKey.frame;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    key.values = [animationKey.value];\r\n                    if (animationKey.inTangent !== undefined) {\r\n                        key.values.push(animationKey.inTangent);\r\n                    }\r\n                    if (animationKey.outTangent !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent);\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.values = animationKey.value.asArray();\r\n                    if (animationKey.inTangent != undefined) {\r\n                        key.values.push(animationKey.inTangent.asArray());\r\n                    }\r\n                    if (animationKey.outTangent != undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent.asArray());\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            serializationObject.keys.push(key);\r\n        }\r\n\r\n        serializationObject.ranges = [];\r\n        for (const name in this._ranges) {\r\n            const source = this._ranges[name];\r\n\r\n            if (!source) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = source.from;\r\n            range.to = source.to;\r\n            serializationObject.ranges.push(range);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Float animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_FLOAT = 0;\r\n    /**\r\n     * Vector3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR3 = 1;\r\n    /**\r\n     * Quaternion animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_QUATERNION = 2;\r\n    /**\r\n     * Matrix animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_MATRIX = 3;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR3 = 4;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR4 = 7;\r\n    /**\r\n     * Vector2 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR2 = 5;\r\n    /**\r\n     * Size animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_SIZE = 6;\r\n    /**\r\n     * Relative Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE = 0;\r\n    /**\r\n     * Cycle Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CYCLE = 1;\r\n    /**\r\n     * Constant Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CONSTANT = 2;\r\n    /**\r\n     * Yoyo Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_YOYO = 4;\r\n    /**\r\n     * Relative Loop Mode (add to current value of animated object, unlike ANIMATIONLOOPMODE_RELATIVE)\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT = 5;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _UniversalLerp(left: any, right: any, amount: number): any {\r\n        const constructor = left.constructor;\r\n        if (constructor.Lerp) {\r\n            // Lerp supported\r\n            return constructor.Lerp(left, right, amount);\r\n        } else if (constructor.Slerp) {\r\n            // Slerp supported\r\n            return constructor.Slerp(left, right, amount);\r\n        } else if (left.toFixed) {\r\n            // Number\r\n            return left * (1.0 - amount) + amount * right;\r\n        } else {\r\n            // Blending not supported\r\n            return right;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses an animation object and creates an animation\r\n     * @param parsedAnimation Parsed animation object\r\n     * @returns Animation object\r\n     */\r\n    public static Parse(parsedAnimation: any): Animation {\r\n        const animation = new Animation(parsedAnimation.name, parsedAnimation.property, parsedAnimation.framePerSecond, parsedAnimation.dataType, parsedAnimation.loopBehavior);\r\n\r\n        const dataType = parsedAnimation.dataType;\r\n        const keys: Array<IAnimationKey> = [];\r\n        let data;\r\n        let index: number;\r\n\r\n        if (parsedAnimation.enableBlending) {\r\n            animation.enableBlending = parsedAnimation.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimation.blendingSpeed) {\r\n            animation.blendingSpeed = parsedAnimation.blendingSpeed;\r\n        }\r\n\r\n        for (index = 0; index < parsedAnimation.keys.length; index++) {\r\n            const key = parsedAnimation.keys[index];\r\n            let inTangent: any = undefined;\r\n            let outTangent: any = undefined;\r\n            let interpolation: any = undefined;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    data = key.values[0];\r\n                    if (key.values.length >= 2) {\r\n                        inTangent = key.values[1];\r\n                    }\r\n                    if (key.values.length >= 3) {\r\n                        outTangent = key.values[2];\r\n                    }\r\n                    if (key.values.length >= 4) {\r\n                        interpolation = key.values[3];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    data = Quaternion.FromArray(key.values);\r\n                    if (key.values.length >= 8) {\r\n                        const _inTangent = Quaternion.FromArray(key.values.slice(4, 8));\r\n                        if (!_inTangent.equals(Quaternion.Zero())) {\r\n                            inTangent = _inTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 12) {\r\n                        const _outTangent = Quaternion.FromArray(key.values.slice(8, 12));\r\n                        if (!_outTangent.equals(Quaternion.Zero())) {\r\n                            outTangent = _outTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 13) {\r\n                        interpolation = key.values[12];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    data = Matrix.FromArray(key.values);\r\n                    if (key.values.length >= 17) {\r\n                        interpolation = key.values[16];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    data = Color3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Color3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Color3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    data = Color4.FromArray(key.values);\r\n                    if (key.values[4]) {\r\n                        inTangent = Color4.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        outTangent = Color4.FromArray(key.values[5]);\r\n                    }\r\n                    if (key.values[6]) {\r\n                        interpolation = Color4.FromArray(key.values[6]);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                default:\r\n                    data = Vector3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Vector3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Vector3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            const keyData: any = {};\r\n            keyData.frame = key.frame;\r\n            keyData.value = data;\r\n\r\n            if (inTangent != undefined) {\r\n                keyData.inTangent = inTangent;\r\n            }\r\n            if (outTangent != undefined) {\r\n                keyData.outTangent = outTangent;\r\n            }\r\n            if (interpolation != undefined) {\r\n                keyData.interpolation = interpolation;\r\n            }\r\n            keys.push(keyData);\r\n        }\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (parsedAnimation.ranges) {\r\n            for (index = 0; index < parsedAnimation.ranges.length; index++) {\r\n                data = parsedAnimation.ranges[index];\r\n                animation.createRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        SerializationHelper.AppendSerializedAnimations(source, destination);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation or an array of animations from a snippet saved in a remote file\r\n     * @param name defines the name of the animation to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @returns a promise that will resolve to the new animation or an array of animations\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let serializationObject = JSON.parse(request.responseText);\r\n                        if (serializationObject.animations) {\r\n                            serializationObject = serializationObject.animations;\r\n                        }\r\n\r\n                        if (serializationObject.length) {\r\n                            const output: Animation[] = [];\r\n                            for (const serializedAnimation of serializationObject) {\r\n                                output.push(this.Parse(serializedAnimation));\r\n                            }\r\n\r\n                            resolve(output);\r\n                        } else {\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            if (name) {\r\n                                output.name = name;\r\n                            }\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the animation\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static ParseFromSnippetAsync(snippetId: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n\r\n                        if (snippet.animations) {\r\n                            const serializationObject = JSON.parse(snippet.animations);\r\n                            const outputs: Animation[] = [];\r\n                            for (const serializedAnimation of serializationObject.animations) {\r\n                                const output = this.Parse(serializedAnimation);\r\n                                output.snippetId = snippetId;\r\n                                outputs.push(output);\r\n                            }\r\n\r\n                            resolve(outputs);\r\n                        } else {\r\n                            const serializationObject = JSON.parse(snippet.animation);\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            output.snippetId = snippetId;\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static CreateFromSnippetAsync = Animation.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.Animation\", Animation);\r\nNode._AnimationRangeFactory = (name: string, from: number, to: number) => new AnimationRange(name, from, to);\r\n", "import type { Skeleton } from \"./skeleton\";\r\nimport { Vector3, Quaternion, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Node } from \"../node\";\r\nimport { Space } from \"../Maths/math.axis\";\r\n\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { AnimationPropertiesOverride } from \"../Animations/animationPropertiesOverride\";\r\n\r\n/**\r\n * Class used to store bone information\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n */\r\nexport class Bone extends Node {\r\n    private static _TmpVecs: Vector3[] = ArrayTools.BuildArray(2, Vector3.Zero);\r\n    private static _TmpQuat = Quaternion.Identity();\r\n    private static _TmpMats: Matrix[] = ArrayTools.BuildArray(5, Matrix.Identity);\r\n\r\n    /**\r\n     * Gets the list of child bones\r\n     */\r\n    public children: Bone[] = [];\r\n\r\n    /** Gets the animations associated with this bone */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * Gets or sets bone length\r\n     */\r\n    public length: number;\r\n\r\n    /**\r\n     * @internal Internal only\r\n     * Set this value to map this bone to a different index in the transform matrices\r\n     * Set this value to -1 to exclude the bone from the transform matrices\r\n     */\r\n    public _index: Nullable<number> = null;\r\n\r\n    private _skeleton: Skeleton;\r\n    private _localMatrix: Matrix; // transformation of the bone, in local space\r\n    private _absoluteMatrix: Matrix; // transformation of the bone, in world space (relative to the skeleton root)\r\n    private _bindMatrix: Matrix; // the bind matrix, in local space\r\n    private _absoluteBindMatrix: Matrix; // the bind matrix, in world space (relative to the skeleton root)\r\n    private _absoluteInverseBindMatrix: Matrix; // the inverse of the bind matrix, in world space (relative to the skeleton root)\r\n    private _finalMatrix: Matrix; // the final matrix used to transform vertices of the mesh according to the bone, in world space (relative to the skeleton root). It is the multiplication of _absoluteInverseBindMatrix with _absoluteMatrix.\r\n    private _restMatrix: Matrix; // a matrix for the exclusive use of the end user (not used internally by the framework), in local space\r\n    private _scalingDeterminant = 1;\r\n\r\n    private _localScaling: Vector3;\r\n    private _localRotation: Quaternion;\r\n    private _localPosition: Vector3;\r\n    private _needToDecompose = true;\r\n    private _needToCompose = false;\r\n\r\n    /** @internal */\r\n    public _linkedTransformNode: Nullable<TransformNode> = null;\r\n\r\n    /** @internal */\r\n    public _waitingTransformNodeId: Nullable<string> = null;\r\n\r\n    /** @internal */\r\n    get _matrix(): Matrix {\r\n        this._compose();\r\n        return this._localMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    set _matrix(value: Matrix) {\r\n        // skip if the matrices are the same\r\n        if (value.updateFlag === this._localMatrix.updateFlag && !this._needToCompose) {\r\n            return;\r\n        }\r\n\r\n        this._needToCompose = false; // in case there was a pending compose\r\n\r\n        this._localMatrix.copyFrom(value);\r\n        this._markAsDirtyAndDecompose();\r\n    }\r\n\r\n    /**\r\n     * Create a new bone\r\n     * @param name defines the bone name\r\n     * @param skeleton defines the parent skeleton\r\n     * @param parentBone defines the parent (can be null if the bone is the root)\r\n     * @param localMatrix defines the local matrix (default: identity)\r\n     * @param restMatrix defines the rest matrix (default: localMatrix)\r\n     * @param bindMatrix defines the bind matrix (default: localMatrix)\r\n     * @param index defines index of the bone in the hierarchy (default: null)\r\n     */\r\n    constructor(\r\n        /**\r\n         * defines the bone name\r\n         */\r\n        public name: string,\r\n        skeleton: Skeleton,\r\n        parentBone: Nullable<Bone> = null,\r\n        localMatrix: Nullable<Matrix> = null,\r\n        restMatrix: Nullable<Matrix> = null,\r\n        bindMatrix: Nullable<Matrix> = null,\r\n        index: Nullable<number> = null\r\n    ) {\r\n        super(name, skeleton.getScene());\r\n        this._skeleton = skeleton;\r\n        this._localMatrix = localMatrix?.clone() ?? Matrix.Identity();\r\n        this._restMatrix = restMatrix ?? this._localMatrix.clone();\r\n        this._bindMatrix = bindMatrix ?? this._localMatrix.clone();\r\n        this._index = index;\r\n\r\n        this._absoluteMatrix = new Matrix();\r\n        this._absoluteBindMatrix = new Matrix();\r\n        this._absoluteInverseBindMatrix = new Matrix();\r\n        this._finalMatrix = new Matrix();\r\n\r\n        skeleton.bones.push(this);\r\n\r\n        this.setParent(parentBone, false);\r\n\r\n        this._updateAbsoluteBindMatrices();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Bone\";\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets the parent skeleton\r\n     * @returns a skeleton\r\n     */\r\n    public getSkeleton(): Skeleton {\r\n        return this._skeleton;\r\n    }\r\n\r\n    public get parent(): Bone {\r\n        return this._parentNode as Bone;\r\n    }\r\n\r\n    /**\r\n     * Gets parent bone\r\n     * @returns a bone or null if the bone is the root of the bone hierarchy\r\n     */\r\n    public getParent(): Nullable<Bone> {\r\n        return this.parent;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the children of the bone\r\n     * @returns an array containing the children of the bone (can be empty if the bone has no children)\r\n     */\r\n    public getChildren(): Array<Bone> {\r\n        return this.children;\r\n    }\r\n\r\n    /**\r\n     * Gets the node index in matrix array generated for rendering\r\n     * @returns the node index\r\n     */\r\n    public getIndex(): number {\r\n        return this._index === null ? this.getSkeleton().bones.indexOf(this) : this._index;\r\n    }\r\n\r\n    public set parent(newParent: Nullable<Bone>) {\r\n        this.setParent(newParent);\r\n    }\r\n\r\n    /**\r\n     * Sets the parent bone\r\n     * @param parent defines the parent (can be null if the bone is the root)\r\n     * @param updateAbsoluteBindMatrices defines if the absolute bind and absolute inverse bind matrices must be updated\r\n     */\r\n    public setParent(parent: Nullable<Bone>, updateAbsoluteBindMatrices: boolean = true): void {\r\n        if (this.parent === parent) {\r\n            return;\r\n        }\r\n\r\n        if (this.parent) {\r\n            const index = this.parent.children.indexOf(this);\r\n            if (index !== -1) {\r\n                this.parent.children.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        this._parentNode = parent;\r\n\r\n        if (this.parent) {\r\n            this.parent.children.push(this);\r\n        }\r\n\r\n        if (updateAbsoluteBindMatrices) {\r\n            this._updateAbsoluteBindMatrices();\r\n        }\r\n\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the local matrix\r\n     * @returns the local matrix\r\n     */\r\n    public getLocalMatrix(): Matrix {\r\n        this._compose();\r\n        return this._localMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the bind matrix\r\n     * @returns the bind matrix\r\n     */\r\n    public getBindMatrix(): Matrix {\r\n        return this._bindMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the bind matrix.\r\n     * @returns the bind matrix\r\n     * @deprecated Please use getBindMatrix instead\r\n     */\r\n    public getBaseMatrix(): Matrix {\r\n        return this.getBindMatrix();\r\n    }\r\n\r\n    /**\r\n     * Gets the rest matrix\r\n     * @returns the rest matrix\r\n     */\r\n    public getRestMatrix(): Matrix {\r\n        return this._restMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the rest matrix\r\n     * @returns the rest matrix\r\n     * @deprecated Please use getRestMatrix instead\r\n     */\r\n    public getRestPose(): Matrix {\r\n        return this.getRestMatrix();\r\n    }\r\n\r\n    /**\r\n     * Sets the rest matrix\r\n     * @param matrix the local-space rest matrix to set for this bone\r\n     */\r\n    public setRestMatrix(matrix: Matrix): void {\r\n        this._restMatrix.copyFrom(matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets the rest matrix\r\n     * @param matrix the local-space rest to set for this bone\r\n     * @deprecated Please use setRestMatrix instead\r\n     */\r\n    public setRestPose(matrix: Matrix): void {\r\n        this.setRestMatrix(matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the bind matrix\r\n     * @returns the bind matrix\r\n     * @deprecated Please use getBindMatrix instead\r\n     */\r\n    public getBindPose(): Matrix {\r\n        return this.getBindMatrix();\r\n    }\r\n\r\n    /**\r\n     * Sets the bind matrix\r\n     * This will trigger a recomputation of the absolute bind and absolute inverse bind matrices for this bone and its children\r\n     * Note that the local matrix will also be set with the matrix passed in parameter!\r\n     * @param matrix the local-space bind matrix to set for this bone\r\n     */\r\n    public setBindMatrix(matrix: Matrix): void {\r\n        this.updateMatrix(matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets the bind matrix\r\n     * @param matrix the local-space bind to set for this bone\r\n     * @deprecated Please use setBindMatrix instead\r\n     */\r\n    public setBindPose(matrix: Matrix): void {\r\n        this.setBindMatrix(matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix used to store the final world transformation of the bone (ie. the matrix sent to shaders)\r\n     * @returns the final world matrix\r\n     */\r\n    public getFinalMatrix(): Matrix {\r\n        return this._finalMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix used to store the final world transformation of the bone (ie. the matrix sent to shaders)\r\n     * @deprecated Please use getFinalMatrix instead\r\n     * @returns the final world matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        return this.getFinalMatrix();\r\n    }\r\n\r\n    /**\r\n     * Sets the local matrix to the rest matrix\r\n     */\r\n    public returnToRest(): void {\r\n        if (this._linkedTransformNode) {\r\n            const localScaling = TmpVectors.Vector3[0];\r\n            const localRotation = TmpVectors.Quaternion[0];\r\n            const localPosition = TmpVectors.Vector3[1];\r\n\r\n            this.getRestMatrix().decompose(localScaling, localRotation, localPosition);\r\n\r\n            this._linkedTransformNode.position.copyFrom(localPosition);\r\n            this._linkedTransformNode.rotationQuaternion = this._linkedTransformNode.rotationQuaternion ?? Quaternion.Identity();\r\n            this._linkedTransformNode.rotationQuaternion.copyFrom(localRotation);\r\n            this._linkedTransformNode.scaling.copyFrom(localScaling);\r\n        } else {\r\n            this._matrix = this._restMatrix;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the inverse of the bind matrix, in world space (relative to the skeleton root)\r\n     * @returns the inverse bind matrix, in world space\r\n     */\r\n    public getAbsoluteInverseBindMatrix(): Matrix {\r\n        return this._absoluteInverseBindMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the inverse of the bind matrix, in world space (relative to the skeleton root)\r\n     * @returns the inverse bind matrix, in world space\r\n     * @deprecated Please use getAbsoluteInverseBindMatrix instead\r\n     */\r\n    public getInvertedAbsoluteTransform(): Matrix {\r\n        return this.getAbsoluteInverseBindMatrix();\r\n    }\r\n\r\n    /**\r\n     * Gets the bone matrix, in world space (relative to the skeleton root)\r\n     * @returns the bone matrix, in world space\r\n     */\r\n    public getAbsoluteMatrix(): Matrix {\r\n        return this._absoluteMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the bone matrix, in world space (relative to the skeleton root)\r\n     * @returns the bone matrix, in world space\r\n     * @deprecated Please use getAbsoluteMatrix instead\r\n     */\r\n    public getAbsoluteTransform(): Matrix {\r\n        return this._absoluteMatrix;\r\n    }\r\n\r\n    /**\r\n     * Links with the given transform node.\r\n     * The local matrix of this bone is overwritten by the transform of the node every frame.\r\n     * @param transformNode defines the transform node to link to\r\n     */\r\n    public linkTransformNode(transformNode: Nullable<TransformNode>): void {\r\n        if (this._linkedTransformNode) {\r\n            this._skeleton._numBonesWithLinkedTransformNode--;\r\n        }\r\n\r\n        this._linkedTransformNode = transformNode;\r\n\r\n        if (this._linkedTransformNode) {\r\n            this._skeleton._numBonesWithLinkedTransformNode++;\r\n        }\r\n    }\r\n\r\n    // Properties (matches TransformNode properties)\r\n\r\n    /**\r\n     * Gets the node used to drive the bone's transformation\r\n     * @returns a transform node or null\r\n     */\r\n    public getTransformNode() {\r\n        return this._linkedTransformNode;\r\n    }\r\n\r\n    /** Gets or sets current position (in local space) */\r\n    public get position(): Vector3 {\r\n        this._decompose();\r\n        return this._localPosition;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._decompose();\r\n        this._localPosition.copyFrom(newPosition);\r\n\r\n        this._markAsDirtyAndCompose();\r\n    }\r\n\r\n    /** Gets or sets current rotation (in local space) */\r\n    public get rotation(): Vector3 {\r\n        return this.getRotation();\r\n    }\r\n\r\n    public set rotation(newRotation: Vector3) {\r\n        this.setRotation(newRotation);\r\n    }\r\n\r\n    /** Gets or sets current rotation quaternion (in local space) */\r\n    public get rotationQuaternion() {\r\n        this._decompose();\r\n        return this._localRotation;\r\n    }\r\n\r\n    public set rotationQuaternion(newRotation: Quaternion) {\r\n        this.setRotationQuaternion(newRotation);\r\n    }\r\n\r\n    /** Gets or sets current scaling (in local space) */\r\n    public get scaling(): Vector3 {\r\n        return this.getScale();\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this.setScale(newScaling);\r\n    }\r\n\r\n    /**\r\n     * Gets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        return this._skeleton.animationPropertiesOverride;\r\n    }\r\n\r\n    // Methods\r\n    private _decompose() {\r\n        if (!this._needToDecompose) {\r\n            return;\r\n        }\r\n\r\n        this._needToDecompose = false;\r\n\r\n        if (!this._localScaling) {\r\n            this._localScaling = Vector3.Zero();\r\n            this._localRotation = Quaternion.Zero();\r\n            this._localPosition = Vector3.Zero();\r\n        }\r\n        this._localMatrix.decompose(this._localScaling, this._localRotation, this._localPosition);\r\n    }\r\n\r\n    private _compose() {\r\n        if (!this._needToCompose) {\r\n            return;\r\n        }\r\n\r\n        if (!this._localScaling) {\r\n            this._needToCompose = false;\r\n            return;\r\n        }\r\n\r\n        this._needToCompose = false;\r\n        Matrix.ComposeToRef(this._localScaling, this._localRotation, this._localPosition, this._localMatrix);\r\n    }\r\n\r\n    /**\r\n     * Update the bind (and optionally the local) matrix\r\n     * @param bindMatrix defines the new matrix to set to the bind/local matrix, in local space\r\n     * @param updateAbsoluteBindMatrices defines if the absolute bind and absolute inverse bind matrices must be recomputed (default: true)\r\n     * @param updateLocalMatrix defines if the local matrix should also be updated with the matrix passed in parameter (default: true)\r\n     */\r\n    public updateMatrix(bindMatrix: Matrix, updateAbsoluteBindMatrices = true, updateLocalMatrix = true): void {\r\n        this._bindMatrix.copyFrom(bindMatrix);\r\n\r\n        if (updateAbsoluteBindMatrices) {\r\n            this._updateAbsoluteBindMatrices();\r\n        }\r\n\r\n        if (updateLocalMatrix) {\r\n            this._matrix = bindMatrix;\r\n        } else {\r\n            this.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateAbsoluteBindMatrices(bindMatrix?: Matrix, updateChildren = true): void {\r\n        if (!bindMatrix) {\r\n            bindMatrix = this._bindMatrix;\r\n        }\r\n\r\n        if (this.parent) {\r\n            bindMatrix.multiplyToRef(this.parent._absoluteBindMatrix, this._absoluteBindMatrix);\r\n        } else {\r\n            this._absoluteBindMatrix.copyFrom(bindMatrix);\r\n        }\r\n\r\n        this._absoluteBindMatrix.invertToRef(this._absoluteInverseBindMatrix);\r\n\r\n        if (updateChildren) {\r\n            for (let index = 0; index < this.children.length; index++) {\r\n                this.children[index]._updateAbsoluteBindMatrices();\r\n            }\r\n        }\r\n\r\n        this._scalingDeterminant = this._absoluteBindMatrix.determinant() < 0 ? -1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Flag the bone as dirty (Forcing it to update everything)\r\n     * @returns this bone\r\n     */\r\n    public markAsDirty(): Bone {\r\n        this._currentRenderId++;\r\n        this._childUpdateId++;\r\n        this._skeleton._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAsDirtyAndCompose() {\r\n        this.markAsDirty();\r\n        this._needToCompose = true;\r\n    }\r\n\r\n    private _markAsDirtyAndDecompose() {\r\n        this.markAsDirty();\r\n        this._needToDecompose = true;\r\n    }\r\n\r\n    private _updatePosition(vec: Vector3, space = Space.LOCAL, tNode?: TransformNode, translationMode = true): void {\r\n        const lm = this.getLocalMatrix();\r\n\r\n        if (space == Space.LOCAL) {\r\n            if (translationMode) {\r\n                lm.addAtIndex(12, vec.x);\r\n                lm.addAtIndex(13, vec.y);\r\n                lm.addAtIndex(14, vec.z);\r\n            } else {\r\n                lm.setTranslationFromFloats(vec.x, vec.y, vec.z);\r\n            }\r\n        } else {\r\n            let wm: Nullable<Matrix> = null;\r\n\r\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n            if (tNode) {\r\n                wm = tNode.getWorldMatrix();\r\n            }\r\n\r\n            this._skeleton.computeAbsoluteMatrices();\r\n\r\n            const tmat = Bone._TmpMats[0];\r\n            const tvec = Bone._TmpVecs[0];\r\n\r\n            if (this.parent) {\r\n                if (tNode && wm) {\r\n                    tmat.copyFrom(this.parent.getAbsoluteMatrix());\r\n                    tmat.multiplyToRef(wm, tmat);\r\n                } else {\r\n                    tmat.copyFrom(this.parent.getAbsoluteMatrix());\r\n                }\r\n            } else {\r\n                Matrix.IdentityToRef(tmat);\r\n            }\r\n\r\n            if (translationMode) {\r\n                tmat.setTranslationFromFloats(0, 0, 0);\r\n            }\r\n            tmat.invert();\r\n            Vector3.TransformCoordinatesToRef(vec, tmat, tvec);\r\n\r\n            if (translationMode) {\r\n                lm.addAtIndex(12, tvec.x);\r\n                lm.addAtIndex(13, tvec.y);\r\n                lm.addAtIndex(14, tvec.z);\r\n            } else {\r\n                lm.setTranslationFromFloats(tvec.x, tvec.y, tvec.z);\r\n            }\r\n        }\r\n\r\n        this._markAsDirtyAndDecompose();\r\n    }\r\n\r\n    /**\r\n     * Translate the bone in local or world space\r\n     * @param vec The amount to translate the bone\r\n     * @param space The space that the translation is in (default: Space.LOCAL)\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public translate(vec: Vector3, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        this._updatePosition(vec, space, tNode, true);\r\n    }\r\n\r\n    /**\r\n     * Set the position of the bone in local or world space\r\n     * @param position The position to set the bone\r\n     * @param space The space that the position is in (default: Space.LOCAL)\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setPosition(position: Vector3, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        this._updatePosition(position, space, tNode, false);\r\n    }\r\n\r\n    /**\r\n     * Set the absolute position of the bone (world space)\r\n     * @param position The position to set the bone\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setAbsolutePosition(position: Vector3, tNode?: TransformNode) {\r\n        this.setPosition(position, Space.WORLD, tNode);\r\n    }\r\n\r\n    /**\r\n     * Scale the bone on the x, y and z axes (in local space)\r\n     * @param x The amount to scale the bone on the x axis\r\n     * @param y The amount to scale the bone on the y axis\r\n     * @param z The amount to scale the bone on the z axis\r\n     * @param scaleChildren sets this to true if children of the bone should be scaled as well (false by default)\r\n     */\r\n    public scale(x: number, y: number, z: number, scaleChildren = false): void {\r\n        const locMat = this.getLocalMatrix();\r\n\r\n        // Apply new scaling on top of current local matrix\r\n        const scaleMat = Bone._TmpMats[0];\r\n        Matrix.ScalingToRef(x, y, z, scaleMat);\r\n        scaleMat.multiplyToRef(locMat, locMat);\r\n\r\n        // Invert scaling matrix and apply the inverse to all children\r\n        scaleMat.invert();\r\n\r\n        for (const child of this.children) {\r\n            const cm = child.getLocalMatrix();\r\n            cm.multiplyToRef(scaleMat, cm);\r\n            cm.multiplyAtIndex(12, x);\r\n            cm.multiplyAtIndex(13, y);\r\n            cm.multiplyAtIndex(14, z);\r\n\r\n            child._markAsDirtyAndDecompose();\r\n        }\r\n\r\n        this._markAsDirtyAndDecompose();\r\n\r\n        if (scaleChildren) {\r\n            for (const child of this.children) {\r\n                child.scale(x, y, z, scaleChildren);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the bone scaling in local space\r\n     * @param scale defines the scaling vector\r\n     */\r\n    public setScale(scale: Vector3): void {\r\n        this._decompose();\r\n        this._localScaling.copyFrom(scale);\r\n        this._markAsDirtyAndCompose();\r\n    }\r\n\r\n    /**\r\n     * Gets the current scaling in local space\r\n     * @returns the current scaling vector\r\n     */\r\n    public getScale(): Vector3 {\r\n        this._decompose();\r\n        return this._localScaling;\r\n    }\r\n\r\n    /**\r\n     * Gets the current scaling in local space and stores it in a target vector\r\n     * @param result defines the target vector\r\n     */\r\n    public getScaleToRef(result: Vector3) {\r\n        this._decompose();\r\n        result.copyFrom(this._localScaling);\r\n    }\r\n\r\n    /**\r\n     * Set the yaw, pitch, and roll of the bone in local or world space\r\n     * @param yaw The rotation of the bone on the y axis\r\n     * @param pitch The rotation of the bone on the x axis\r\n     * @param roll The rotation of the bone on the z axis\r\n     * @param space The space that the axes of rotation are in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setYawPitchRoll(yaw: number, pitch: number, roll: number, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            const quat = Bone._TmpQuat;\r\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, quat);\r\n            this.setRotationQuaternion(quat, space, tNode);\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat = Bone._TmpMats[1];\r\n        Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat);\r\n        this._rotateWithMatrix(rotMat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Add a rotation to the bone on an axis in local or world space\r\n     * @param axis The axis to rotate the bone on\r\n     * @param amount The amount to rotate the bone\r\n     * @param space The space that the axis is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public rotate(axis: Vector3, amount: number, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        const rmat = Bone._TmpMats[0];\r\n        rmat.setTranslationFromFloats(0, 0, 0);\r\n        Matrix.RotationAxisToRef(axis, amount, rmat);\r\n        this._rotateWithMatrix(rmat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the rotation of the bone to a particular axis angle in local or world space\r\n     * @param axis The axis to rotate the bone on\r\n     * @param angle The angle that the bone should be rotated to\r\n     * @param space The space that the axis is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setAxisAngle(axis: Vector3, angle: number, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            const quat = Bone._TmpQuat;\r\n            Quaternion.RotationAxisToRef(axis, angle, quat);\r\n\r\n            this.setRotationQuaternion(quat, space, tNode);\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat = Bone._TmpMats[1];\r\n        Matrix.RotationAxisToRef(axis, angle, rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat);\r\n        this._rotateWithMatrix(rotMat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the euler rotation of the bone in local or world space\r\n     * @param rotation The euler rotation that the bone should be set to\r\n     * @param space The space that the rotation is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setRotation(rotation: Vector3, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        this.setYawPitchRoll(rotation.y, rotation.x, rotation.z, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the quaternion rotation of the bone in local or world space\r\n     * @param quat The quaternion rotation that the bone should be set to\r\n     * @param space The space that the rotation is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setRotationQuaternion(quat: Quaternion, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            this._decompose();\r\n            this._localRotation.copyFrom(quat);\r\n\r\n            this._markAsDirtyAndCompose();\r\n\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat = Bone._TmpMats[1];\r\n        Matrix.FromQuaternionToRef(quat, rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat);\r\n\r\n        this._rotateWithMatrix(rotMat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the rotation matrix of the bone in local or world space\r\n     * @param rotMat The rotation matrix that the bone should be set to\r\n     * @param space The space that the rotation is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setRotationMatrix(rotMat: Matrix, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            const quat = Bone._TmpQuat;\r\n            Quaternion.FromRotationMatrixToRef(rotMat, quat);\r\n            this.setRotationQuaternion(quat, space, tNode);\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat2 = Bone._TmpMats[1];\r\n        rotMat2.copyFrom(rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat2);\r\n\r\n        this._rotateWithMatrix(rotMat2, space, tNode);\r\n    }\r\n\r\n    private _rotateWithMatrix(rmat: Matrix, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        const lmat = this.getLocalMatrix();\r\n        const lx = lmat.m[12];\r\n        const ly = lmat.m[13];\r\n        const lz = lmat.m[14];\r\n        const parent = this.getParent();\r\n        const parentScale = Bone._TmpMats[3];\r\n        const parentScaleInv = Bone._TmpMats[4];\r\n\r\n        if (parent && space == Space.WORLD) {\r\n            if (tNode) {\r\n                parentScale.copyFrom(tNode.getWorldMatrix());\r\n                parent.getAbsoluteMatrix().multiplyToRef(parentScale, parentScale);\r\n            } else {\r\n                parentScale.copyFrom(parent.getAbsoluteMatrix());\r\n            }\r\n            parentScaleInv.copyFrom(parentScale);\r\n            parentScaleInv.invert();\r\n            lmat.multiplyToRef(parentScale, lmat);\r\n            lmat.multiplyToRef(rmat, lmat);\r\n            lmat.multiplyToRef(parentScaleInv, lmat);\r\n        } else {\r\n            if (space == Space.WORLD && tNode) {\r\n                parentScale.copyFrom(tNode.getWorldMatrix());\r\n                parentScaleInv.copyFrom(parentScale);\r\n                parentScaleInv.invert();\r\n                lmat.multiplyToRef(parentScale, lmat);\r\n                lmat.multiplyToRef(rmat, lmat);\r\n                lmat.multiplyToRef(parentScaleInv, lmat);\r\n            } else {\r\n                lmat.multiplyToRef(rmat, lmat);\r\n            }\r\n        }\r\n\r\n        lmat.setTranslationFromFloats(lx, ly, lz);\r\n\r\n        this.computeAbsoluteMatrices();\r\n        this._markAsDirtyAndDecompose();\r\n    }\r\n\r\n    private _getAbsoluteInverseMatrixUnscaledToRef(rotMatInv: Matrix, tNode?: TransformNode): boolean {\r\n        const scaleMatrix = Bone._TmpMats[2];\r\n        rotMatInv.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode) {\r\n            rotMatInv.multiplyToRef(tNode.getWorldMatrix(), rotMatInv);\r\n            Matrix.ScalingToRef(tNode.scaling.x, tNode.scaling.y, tNode.scaling.z, scaleMatrix);\r\n        } else {\r\n            Matrix.IdentityToRef(scaleMatrix);\r\n        }\r\n\r\n        rotMatInv.invert();\r\n        if (isNaN(rotMatInv.m[0])) {\r\n            // Matrix failed to invert.\r\n            // This can happen if scale is zero for example.\r\n            return false;\r\n        }\r\n\r\n        scaleMatrix.multiplyAtIndex(0, this._scalingDeterminant);\r\n        rotMatInv.multiplyToRef(scaleMatrix, rotMatInv);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the position of the bone in local or world space\r\n     * @param space The space that the returned position is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The position of the bone\r\n     */\r\n    public getPosition(space = Space.LOCAL, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const pos = Vector3.Zero();\r\n\r\n        this.getPositionToRef(space, tNode, pos);\r\n\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Copy the position of the bone to a vector3 in local or world space\r\n     * @param space The space that the returned position is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 to copy the position to\r\n     */\r\n    public getPositionToRef(space = Space.LOCAL, tNode: Nullable<TransformNode>, result: Vector3): void {\r\n        if (space == Space.LOCAL) {\r\n            const lm = this.getLocalMatrix();\r\n\r\n            result.x = lm.m[12];\r\n            result.y = lm.m[13];\r\n            result.z = lm.m[14];\r\n        } else {\r\n            let wm: Nullable<Matrix> = null;\r\n\r\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n            if (tNode) {\r\n                wm = tNode.getWorldMatrix();\r\n            }\r\n\r\n            this._skeleton.computeAbsoluteMatrices();\r\n\r\n            let tmat = Bone._TmpMats[0];\r\n\r\n            if (tNode && wm) {\r\n                tmat.copyFrom(this.getAbsoluteMatrix());\r\n                tmat.multiplyToRef(wm, tmat);\r\n            } else {\r\n                tmat = this.getAbsoluteMatrix();\r\n            }\r\n\r\n            result.x = tmat.m[12];\r\n            result.y = tmat.m[13];\r\n            result.z = tmat.m[14];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the absolute position of the bone (world space)\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The absolute position of the bone\r\n     */\r\n    public getAbsolutePosition(tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const pos = Vector3.Zero();\r\n\r\n        this.getPositionToRef(Space.WORLD, tNode, pos);\r\n\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Copy the absolute position of the bone (world space) to the result param\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 to copy the absolute position to\r\n     */\r\n    public getAbsolutePositionToRef(tNode: TransformNode, result: Vector3) {\r\n        this.getPositionToRef(Space.WORLD, tNode, result);\r\n    }\r\n\r\n    /**\r\n     * Compute the absolute matrices of this bone and its children\r\n     */\r\n    public computeAbsoluteMatrices(): void {\r\n        this._compose();\r\n\r\n        if (this.parent) {\r\n            this._localMatrix.multiplyToRef(this.parent._absoluteMatrix, this._absoluteMatrix);\r\n        } else {\r\n            this._absoluteMatrix.copyFrom(this._localMatrix);\r\n\r\n            const poseMatrix = this._skeleton.getPoseMatrix();\r\n\r\n            if (poseMatrix) {\r\n                this._absoluteMatrix.multiplyToRef(poseMatrix, this._absoluteMatrix);\r\n            }\r\n        }\r\n\r\n        const children = this.children;\r\n        const len = children.length;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            children[i].computeAbsoluteMatrices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the absolute matrices of this bone and its children\r\n     * @deprecated Please use computeAbsoluteMatrices instead\r\n     */\r\n    public computeAbsoluteTransforms(): void {\r\n        this.computeAbsoluteMatrices();\r\n    }\r\n\r\n    /**\r\n     * Get the world direction from an axis that is in the local space of the bone\r\n     * @param localAxis The local direction that is used to compute the world direction\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The world direction\r\n     */\r\n    public getDirection(localAxis: Vector3, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the world direction to a vector3 from an axis that is in the local space of the bone\r\n     * @param localAxis The local direction that is used to compute the world direction\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the world direction will be copied to\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        let wm: Nullable<Matrix> = null;\r\n\r\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n        if (tNode) {\r\n            wm = tNode.getWorldMatrix();\r\n        }\r\n\r\n        this._skeleton.computeAbsoluteMatrices();\r\n\r\n        const mat = Bone._TmpMats[0];\r\n\r\n        mat.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode && wm) {\r\n            mat.multiplyToRef(wm, mat);\r\n        }\r\n\r\n        Vector3.TransformNormalToRef(localAxis, mat, result);\r\n\r\n        result.normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the euler rotation of the bone in local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The euler rotation\r\n     */\r\n    public getRotation(space = Space.LOCAL, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getRotationToRef(space, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the euler rotation of the bone to a vector3.  The rotation can be in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the rotation should be copied to\r\n     */\r\n    public getRotationToRef(space = Space.LOCAL, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        const quat = Bone._TmpQuat;\r\n\r\n        this.getRotationQuaternionToRef(space, tNode, quat);\r\n\r\n        quat.toEulerAnglesToRef(result);\r\n    }\r\n\r\n    /**\r\n     * Get the quaternion rotation of the bone in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The quaternion rotation\r\n     */\r\n    public getRotationQuaternion(space = Space.LOCAL, tNode: Nullable<TransformNode> = null): Quaternion {\r\n        const result = Quaternion.Identity();\r\n\r\n        this.getRotationQuaternionToRef(space, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the quaternion rotation of the bone to a quaternion.  The rotation can be in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The quaternion that the rotation should be copied to\r\n     */\r\n    public getRotationQuaternionToRef(space = Space.LOCAL, tNode: Nullable<TransformNode> = null, result: Quaternion): void {\r\n        if (space == Space.LOCAL) {\r\n            this._decompose();\r\n            result.copyFrom(this._localRotation);\r\n        } else {\r\n            const mat = Bone._TmpMats[0];\r\n            const amat = this.getAbsoluteMatrix();\r\n\r\n            if (tNode) {\r\n                amat.multiplyToRef(tNode.getWorldMatrix(), mat);\r\n            } else {\r\n                mat.copyFrom(amat);\r\n            }\r\n\r\n            mat.multiplyAtIndex(0, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(1, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(2, this._scalingDeterminant);\r\n\r\n            mat.decompose(undefined, result, undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the rotation matrix of the bone in local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The rotation matrix\r\n     */\r\n    public getRotationMatrix(space = Space.LOCAL, tNode: TransformNode): Matrix {\r\n        const result = Matrix.Identity();\r\n\r\n        this.getRotationMatrixToRef(space, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the rotation matrix of the bone to a matrix.  The rotation can be in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The quaternion that the rotation should be copied to\r\n     */\r\n    public getRotationMatrixToRef(space = Space.LOCAL, tNode: TransformNode, result: Matrix): void {\r\n        if (space == Space.LOCAL) {\r\n            this.getLocalMatrix().getRotationMatrixToRef(result);\r\n        } else {\r\n            const mat = Bone._TmpMats[0];\r\n            const amat = this.getAbsoluteMatrix();\r\n\r\n            if (tNode) {\r\n                amat.multiplyToRef(tNode.getWorldMatrix(), mat);\r\n            } else {\r\n                mat.copyFrom(amat);\r\n            }\r\n\r\n            mat.multiplyAtIndex(0, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(1, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(2, this._scalingDeterminant);\r\n\r\n            mat.getRotationMatrixToRef(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the world position of a point that is in the local space of the bone\r\n     * @param position The local position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The world position\r\n     */\r\n    public getAbsolutePositionFromLocal(position: Vector3, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getAbsolutePositionFromLocalToRef(position, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the world position of a point that is in the local space of the bone and copy it to the result param\r\n     * @param position The local position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the world position should be copied to\r\n     */\r\n    public getAbsolutePositionFromLocalToRef(position: Vector3, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        let wm: Nullable<Matrix> = null;\r\n\r\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n        if (tNode) {\r\n            wm = tNode.getWorldMatrix();\r\n        }\r\n\r\n        this._skeleton.computeAbsoluteMatrices();\r\n\r\n        const tmat = Bone._TmpMats[0];\r\n\r\n        tmat.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode && wm) {\r\n            tmat.multiplyToRef(wm, tmat);\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(position, tmat, result);\r\n    }\r\n\r\n    /**\r\n     * Get the local position of a point that is in world space\r\n     * @param position The world position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The local position\r\n     */\r\n    public getLocalPositionFromAbsolute(position: Vector3, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getLocalPositionFromAbsoluteToRef(position, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the local position of a point that is in world space and copy it to the result param\r\n     * @param position The world position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the local position should be copied to\r\n     */\r\n    public getLocalPositionFromAbsoluteToRef(position: Vector3, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        let wm: Nullable<Matrix> = null;\r\n\r\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n        if (tNode) {\r\n            wm = tNode.getWorldMatrix();\r\n        }\r\n\r\n        this._skeleton.computeAbsoluteMatrices();\r\n\r\n        const tmat = Bone._TmpMats[0];\r\n\r\n        tmat.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode && wm) {\r\n            tmat.multiplyToRef(wm, tmat);\r\n        }\r\n\r\n        tmat.invert();\r\n\r\n        Vector3.TransformCoordinatesToRef(position, tmat, result);\r\n    }\r\n\r\n    /**\r\n     * Set the current local matrix as the restMatrix for this bone.\r\n     */\r\n    public setCurrentPoseAsRest(): void {\r\n        this.setRestMatrix(this.getLocalMatrix());\r\n    }\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { IWebRequest } from \"../../Misc/interfaces/iWebRequest\";\r\nimport { IsExponentOfTwo } from \"../../Misc/tools.functions\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a raw texture\r\n         * @param data defines the data to store in the texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param format defines the format of the data\r\n         * @param generateMipMaps defines if the engine should generate the mip levels\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param samplingMode defines the required sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n         * @param compression defines the compression used (null by default)\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n         * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n         * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n         * @returns the raw texture inside an InternalTexture\r\n         */\r\n        createRawTexture(\r\n            data: Nullable<ArrayBufferView>,\r\n            width: number,\r\n            height: number,\r\n            format: number,\r\n            generateMipMaps: boolean,\r\n            invertY: boolean,\r\n            samplingMode: number,\r\n            compression: Nullable<string>,\r\n            type: number,\r\n            creationFlags?: number,\r\n            useSRGBBuffer?: boolean\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Update a raw texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store in the texture\r\n         * @param format defines the format of the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawTexture(texture: Nullable<InternalTexture>, data: Nullable<ArrayBufferView>, format: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store in the texture\r\n         * @param format defines the format of the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the compression used (null by default)\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n         * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n         */\r\n        updateRawTexture(\r\n            texture: Nullable<InternalTexture>,\r\n            data: Nullable<ArrayBufferView>,\r\n            format: number,\r\n            invertY: boolean,\r\n            compression: Nullable<string>,\r\n            type: number,\r\n            useSRGBBuffer: boolean\r\n        ): void;\r\n\r\n        /**\r\n         * Creates a new raw cube texture\r\n         * @param data defines the array of data to use to create each face\r\n         * @param size defines the size of the textures\r\n         * @param format defines the format of the data\r\n         * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_INT)\r\n         * @param generateMipMaps  defines if the engine should generate the mip levels\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n         * @param compression defines the compression used (null by default)\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createRawCubeTexture(\r\n            data: Nullable<ArrayBufferView[]>,\r\n            size: number,\r\n            format: number,\r\n            type: number,\r\n            generateMipMaps: boolean,\r\n            invertY: boolean,\r\n            samplingMode: number,\r\n            compression: Nullable<string>\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Update a raw cube texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawCubeTexture(texture: InternalTexture, data: ArrayBufferView[], format: number, type: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw cube texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the compression used (null by default)\r\n         */\r\n        updateRawCubeTexture(texture: InternalTexture, data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string>): void;\r\n\r\n        /**\r\n         * Update a raw cube texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the compression used (null by default)\r\n         * @param level defines which level of the texture to update\r\n         */\r\n        updateRawCubeTexture(texture: InternalTexture, data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string>, level: number): void;\r\n\r\n        /**\r\n         * Creates a new raw cube texture from a specified url\r\n         * @param url defines the url where the data is located\r\n         * @param scene defines the current scene\r\n         * @param size defines the size of the textures\r\n         * @param format defines the format of the data\r\n         * @param type defines the type fo the data (like Engine.TEXTURETYPE_UNSIGNED_INT)\r\n         * @param noMipmap defines if the engine should avoid generating the mip levels\r\n         * @param callback defines a callback used to extract texture data from loaded data\r\n         * @param mipmapGenerator defines to provide an optional tool to generate mip levels\r\n         * @param onLoad defines a callback called when texture is loaded\r\n         * @param onError defines a callback called if there is an error\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createRawCubeTextureFromUrl(\r\n            url: string,\r\n            scene: Nullable<Scene>,\r\n            size: number,\r\n            format: number,\r\n            type: number,\r\n            noMipmap: boolean,\r\n            callback: (ArrayBuffer: ArrayBuffer) => Nullable<ArrayBufferView[]>,\r\n            mipmapGenerator: Nullable<(faces: ArrayBufferView[]) => ArrayBufferView[][]>,\r\n            onLoad: Nullable<() => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Creates a new raw cube texture from a specified url\r\n         * @param url defines the url where the data is located\r\n         * @param scene defines the current scene\r\n         * @param size defines the size of the textures\r\n         * @param format defines the format of the data\r\n         * @param type defines the type fo the data (like Engine.TEXTURETYPE_UNSIGNED_INT)\r\n         * @param noMipmap defines if the engine should avoid generating the mip levels\r\n         * @param callback defines a callback used to extract texture data from loaded data\r\n         * @param mipmapGenerator defines to provide an optional tool to generate mip levels\r\n         * @param onLoad defines a callback called when texture is loaded\r\n         * @param onError defines a callback called if there is an error\r\n         * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createRawCubeTextureFromUrl(\r\n            url: string,\r\n            scene: Nullable<Scene>,\r\n            size: number,\r\n            format: number,\r\n            type: number,\r\n            noMipmap: boolean,\r\n            callback: (ArrayBuffer: ArrayBuffer) => Nullable<ArrayBufferView[]>,\r\n            mipmapGenerator: Nullable<(faces: ArrayBufferView[]) => ArrayBufferView[][]>,\r\n            onLoad: Nullable<() => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            samplingMode: number,\r\n            invertY: boolean\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Creates a new raw 3D texture\r\n         * @param data defines the data used to create the texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param depth defines the depth of the texture\r\n         * @param format defines the format of the texture\r\n         * @param generateMipMaps defines if the engine must generate mip levels\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n         * @param compression defines the compressed used (can be null)\r\n         * @param textureType defines the compressed used (can be null)\r\n         * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n         * @returns a new raw 3D texture (stored in an InternalTexture)\r\n         */\r\n        createRawTexture3D(\r\n            data: Nullable<ArrayBufferView>,\r\n            width: number,\r\n            height: number,\r\n            depth: number,\r\n            format: number,\r\n            generateMipMaps: boolean,\r\n            invertY: boolean,\r\n            samplingMode: number,\r\n            compression: Nullable<string>,\r\n            textureType: number,\r\n            creationFlags?: number\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Update a raw 3D texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawTexture3D(texture: InternalTexture, data: Nullable<ArrayBufferView>, format: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw 3D texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the used compression (can be null)\r\n         * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n         */\r\n        updateRawTexture3D(texture: InternalTexture, data: Nullable<ArrayBufferView>, format: number, invertY: boolean, compression: Nullable<string>, textureType: number): void;\r\n\r\n        /**\r\n         * Creates a new raw 2D array texture\r\n         * @param data defines the data used to create the texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param depth defines the number of layers of the texture\r\n         * @param format defines the format of the texture\r\n         * @param generateMipMaps defines if the engine must generate mip levels\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n         * @param compression defines the compressed used (can be null)\r\n         * @param textureType defines the compressed used (can be null)\r\n         * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n         * @returns a new raw 2D array texture (stored in an InternalTexture)\r\n         */\r\n        createRawTexture2DArray(\r\n            data: Nullable<ArrayBufferView>,\r\n            width: number,\r\n            height: number,\r\n            depth: number,\r\n            format: number,\r\n            generateMipMaps: boolean,\r\n            invertY: boolean,\r\n            samplingMode: number,\r\n            compression: Nullable<string>,\r\n            textureType: number,\r\n            creationFlags?: number\r\n        ): InternalTexture;\r\n\r\n        /**\r\n         * Update a raw 2D array texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         */\r\n        updateRawTexture2DArray(texture: InternalTexture, data: Nullable<ArrayBufferView>, format: number, invertY: boolean): void;\r\n\r\n        /**\r\n         * Update a raw 2D array texture\r\n         * @param texture defines the texture to update\r\n         * @param data defines the data to store\r\n         * @param format defines the data format\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param compression defines the used compression (can be null)\r\n         * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n         */\r\n        updateRawTexture2DArray(\r\n            texture: InternalTexture,\r\n            data: Nullable<ArrayBufferView>,\r\n            format: number,\r\n            invertY: boolean,\r\n            compression: Nullable<string>,\r\n            textureType: number\r\n        ): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.updateRawTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    data: Nullable<ArrayBufferView>,\r\n    format: number,\r\n    invertY: boolean,\r\n    compression: Nullable<string> = null,\r\n    type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n    useSRGBBuffer: boolean = false\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n    // Babylon's internalSizedFomat but gl's texImage2D internalFormat\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type, format, useSRGBBuffer);\r\n\r\n    // Babylon's internalFormat but gl's texImage2D format\r\n    const internalFormat = this._getInternalFormat(format);\r\n    const textureType = this._getWebGLTextureType(type);\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n    this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._bufferView = data;\r\n        texture.format = format;\r\n        texture.type = type;\r\n        texture.invertY = invertY;\r\n        texture._compression = compression;\r\n    }\r\n\r\n    if (texture.width % 4 !== 0) {\r\n        this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\r\n    }\r\n\r\n    if (compression && data) {\r\n        this._gl.compressedTexImage2D(this._gl.TEXTURE_2D, 0, (<any>this.getCaps().s3tc)[compression], texture.width, texture.height, 0, <DataView>data);\r\n    } else {\r\n        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, data);\r\n    }\r\n\r\n    if (texture.generateMipMaps) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_2D);\r\n    }\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n    //  this.resetTextureCache();\r\n    texture.isReady = true;\r\n};\r\n\r\nThinEngine.prototype.createRawTexture = function (\r\n    data: Nullable<ArrayBufferView>,\r\n    width: number,\r\n    height: number,\r\n    format: number,\r\n    generateMipMaps: boolean,\r\n    invertY: boolean,\r\n    samplingMode: number,\r\n    compression: Nullable<string> = null,\r\n    type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    creationFlags = 0,\r\n    useSRGBBuffer = false\r\n): InternalTexture {\r\n    const texture = new InternalTexture(this, InternalTextureSource.Raw);\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.format = format;\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n    texture.invertY = invertY;\r\n    texture._compression = compression;\r\n    texture.type = type;\r\n    texture._useSRGBBuffer = this._getUseSRGBBuffer(useSRGBBuffer, !generateMipMaps);\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._bufferView = data;\r\n    }\r\n\r\n    this.updateRawTexture(texture, data, format, invertY, compression, type, texture._useSRGBBuffer);\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n    // Filters\r\n    const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, filters.min);\r\n\r\n    if (generateMipMaps) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_2D);\r\n    }\r\n\r\n    this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.createRawCubeTexture = function (\r\n    data: Nullable<ArrayBufferView[]>,\r\n    size: number,\r\n    format: number,\r\n    type: number,\r\n    generateMipMaps: boolean,\r\n    invertY: boolean,\r\n    samplingMode: number,\r\n    compression: Nullable<string> = null\r\n): InternalTexture {\r\n    const gl = this._gl;\r\n    const texture = new InternalTexture(this, InternalTextureSource.CubeRaw);\r\n    texture.isCube = true;\r\n    texture.format = format;\r\n    texture.type = type;\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._bufferViewArray = data;\r\n    }\r\n\r\n    const textureType = this._getWebGLTextureType(type);\r\n    let internalFormat = this._getInternalFormat(format);\r\n\r\n    if (internalFormat === gl.RGB) {\r\n        internalFormat = gl.RGBA;\r\n    }\r\n\r\n    // Mipmap generation needs a sized internal format that is both color-renderable and texture-filterable\r\n    if (textureType === gl.FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n        generateMipMaps = false;\r\n        samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        Logger.Warn(\"Float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\r\n    } else if (textureType === this._gl.HALF_FLOAT_OES && !this._caps.textureHalfFloatLinearFiltering) {\r\n        generateMipMaps = false;\r\n        samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        Logger.Warn(\"Half float texture filtering is not supported. Mipmap generation and sampling mode are forced to false and TEXTURE_NEAREST_SAMPLINGMODE, respectively.\");\r\n    } else if (textureType === gl.FLOAT && !this._caps.textureFloatRender) {\r\n        generateMipMaps = false;\r\n        Logger.Warn(\"Render to float textures is not supported. Mipmap generation forced to false.\");\r\n    } else if (textureType === gl.HALF_FLOAT && !this._caps.colorBufferFloat) {\r\n        generateMipMaps = false;\r\n        Logger.Warn(\"Render to half float textures is not supported. Mipmap generation forced to false.\");\r\n    }\r\n\r\n    const width = size;\r\n    const height = width;\r\n\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.invertY = invertY;\r\n    texture._compression = compression;\r\n\r\n    // Double check on POT to generate Mips.\r\n    const isPot = !this.needPOTTextures || (IsExponentOfTwo(texture.width) && IsExponentOfTwo(texture.height));\r\n    if (!isPot) {\r\n        generateMipMaps = false;\r\n    }\r\n\r\n    // Upload data if needed. The texture won't be ready until then.\r\n    if (data) {\r\n        this.updateRawCubeTexture(texture, data, format, type, invertY, compression);\r\n    } else {\r\n        const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\r\n        const level = 0;\r\n\r\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n        for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n            if (compression) {\r\n                gl.compressedTexImage2D(\r\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\r\n                    level,\r\n                    (<any>this.getCaps().s3tc)[compression],\r\n                    texture.width,\r\n                    texture.height,\r\n                    0,\r\n                    undefined as any\r\n                );\r\n            } else {\r\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, null);\r\n            }\r\n        }\r\n\r\n        this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    // Filters\r\n    if (data && generateMipMaps) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n    texture.isReady = true;\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.updateRawCubeTexture = function (\r\n    texture: InternalTexture,\r\n    data: ArrayBufferView[],\r\n    format: number,\r\n    type: number,\r\n    invertY: boolean,\r\n    compression: Nullable<string> = null,\r\n    level: number = 0\r\n): void {\r\n    texture._bufferViewArray = data;\r\n    texture.format = format;\r\n    texture.type = type;\r\n    texture.invertY = invertY;\r\n    texture._compression = compression;\r\n\r\n    const gl = this._gl;\r\n    const textureType = this._getWebGLTextureType(type);\r\n    let internalFormat = this._getInternalFormat(format);\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\r\n\r\n    let needConversion = false;\r\n    if (internalFormat === gl.RGB) {\r\n        internalFormat = gl.RGBA;\r\n        needConversion = true;\r\n    }\r\n\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n    this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\r\n\r\n    if (texture.width % 4 !== 0) {\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n    }\r\n\r\n    // Data are known to be in +X +Y +Z -X -Y -Z\r\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n        let faceData = data[faceIndex];\r\n\r\n        if (compression) {\r\n            gl.compressedTexImage2D(\r\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex,\r\n                level,\r\n                (<any>this.getCaps().s3tc)[compression],\r\n                texture.width,\r\n                texture.height,\r\n                0,\r\n                <DataView>faceData\r\n            );\r\n        } else {\r\n            if (needConversion) {\r\n                faceData = _convertRGBtoRGBATextureData(faceData, texture.width, texture.height, type);\r\n            }\r\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, level, internalSizedFomat, texture.width, texture.height, 0, internalFormat, textureType, faceData);\r\n        }\r\n    }\r\n\r\n    const isPot = !this.needPOTTextures || (IsExponentOfTwo(texture.width) && IsExponentOfTwo(texture.height));\r\n    if (isPot && texture.generateMipMaps && level === 0) {\r\n        this._gl.generateMipmap(this._gl.TEXTURE_CUBE_MAP);\r\n    }\r\n    this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n\r\n    // this.resetTextureCache();\r\n    texture.isReady = true;\r\n};\r\n\r\nThinEngine.prototype.createRawCubeTextureFromUrl = function (\r\n    url: string,\r\n    scene: Nullable<Scene>,\r\n    size: number,\r\n    format: number,\r\n    type: number,\r\n    noMipmap: boolean,\r\n    callback: (ArrayBuffer: ArrayBuffer) => Nullable<ArrayBufferView[]>,\r\n    mipmapGenerator: Nullable<(faces: ArrayBufferView[]) => ArrayBufferView[][]>,\r\n    onLoad: Nullable<() => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n    invertY: boolean = false\r\n): InternalTexture {\r\n    const gl = this._gl;\r\n    const texture = this.createRawCubeTexture(null, size, format, type, !noMipmap, invertY, samplingMode, null);\r\n    scene?.addPendingData(texture);\r\n    texture.url = url;\r\n    texture.isReady = false;\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    const onerror = (request?: IWebRequest, exception?: any) => {\r\n        scene?.removePendingData(texture);\r\n        if (onError && request) {\r\n            onError(request.status + \" \" + request.statusText, exception);\r\n        }\r\n    };\r\n\r\n    const internalCallback = (data: any) => {\r\n        const width = texture.width;\r\n        const faceDataArrays = callback(data);\r\n\r\n        if (!faceDataArrays) {\r\n            return;\r\n        }\r\n\r\n        if (mipmapGenerator) {\r\n            const textureType = this._getWebGLTextureType(type);\r\n            let internalFormat = this._getInternalFormat(format);\r\n            const internalSizedFomat = this._getRGBABufferInternalSizedFormat(type);\r\n\r\n            let needConversion = false;\r\n            if (internalFormat === gl.RGB) {\r\n                internalFormat = gl.RGBA;\r\n                needConversion = true;\r\n            }\r\n\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            this._unpackFlipY(false);\r\n\r\n            const mipData = mipmapGenerator(faceDataArrays);\r\n            for (let level = 0; level < mipData.length; level++) {\r\n                const mipSize = width >> level;\r\n\r\n                for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n                    let mipFaceData = mipData[level][faceIndex];\r\n                    if (needConversion) {\r\n                        mipFaceData = _convertRGBtoRGBATextureData(mipFaceData, mipSize, mipSize, type);\r\n                    }\r\n                    gl.texImage2D(faceIndex, level, internalSizedFomat, mipSize, mipSize, 0, internalFormat, textureType, mipFaceData);\r\n                }\r\n            }\r\n\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this.updateRawCubeTexture(texture, faceDataArrays, format, type, invertY);\r\n        }\r\n\r\n        texture.isReady = true;\r\n        // this.resetTextureCache();\r\n        scene?.removePendingData(texture);\r\n\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad();\r\n        }\r\n    };\r\n\r\n    this._loadFile(\r\n        url,\r\n        (data) => {\r\n            internalCallback(data);\r\n        },\r\n        undefined,\r\n        scene?.offlineProvider,\r\n        true,\r\n        onerror\r\n    );\r\n\r\n    return texture;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction _convertRGBtoRGBATextureData(rgbData: any, width: number, height: number, textureType: number): ArrayBufferView {\r\n    // Create new RGBA data container.\r\n    let rgbaData: any;\r\n    let val1 = 1;\r\n    if (textureType === Constants.TEXTURETYPE_FLOAT) {\r\n        rgbaData = new Float32Array(width * height * 4);\r\n    } else if (textureType === Constants.TEXTURETYPE_HALF_FLOAT) {\r\n        rgbaData = new Uint16Array(width * height * 4);\r\n        val1 = 15360; // 15360 is the encoding of 1 in half float\r\n    } else if (textureType === Constants.TEXTURETYPE_UNSIGNED_INTEGER) {\r\n        rgbaData = new Uint32Array(width * height * 4);\r\n    } else {\r\n        rgbaData = new Uint8Array(width * height * 4);\r\n    }\r\n\r\n    // Convert each pixel.\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const index = (y * width + x) * 3;\r\n            const newIndex = (y * width + x) * 4;\r\n\r\n            // Map Old Value to new value.\r\n            rgbaData[newIndex + 0] = rgbData[index + 0];\r\n            rgbaData[newIndex + 1] = rgbData[index + 1];\r\n            rgbaData[newIndex + 2] = rgbData[index + 2];\r\n\r\n            // Add fully opaque alpha channel.\r\n            rgbaData[newIndex + 3] = val1;\r\n        }\r\n    }\r\n\r\n    return rgbaData;\r\n}\r\n\r\n/**\r\n * Create a function for createRawTexture3D/createRawTexture2DArray\r\n * @param is3D true for TEXTURE_3D and false for TEXTURE_2D_ARRAY\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction _makeCreateRawTextureFunction(is3D: boolean) {\r\n    return function (\r\n        this: ThinEngine,\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        format: number,\r\n        generateMipMaps: boolean,\r\n        invertY: boolean,\r\n        samplingMode: number,\r\n        compression: Nullable<string> = null,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ): InternalTexture {\r\n        const target = is3D ? this._gl.TEXTURE_3D : this._gl.TEXTURE_2D_ARRAY;\r\n        const source = is3D ? InternalTextureSource.Raw3D : InternalTextureSource.Raw2DArray;\r\n        const texture = new InternalTexture(this, source);\r\n        texture.baseWidth = width;\r\n        texture.baseHeight = height;\r\n        texture.baseDepth = depth;\r\n        texture.width = width;\r\n        texture.height = height;\r\n        texture.depth = depth;\r\n        texture.format = format;\r\n        texture.type = textureType;\r\n        texture.generateMipMaps = generateMipMaps;\r\n        texture.samplingMode = samplingMode;\r\n        if (is3D) {\r\n            texture.is3D = true;\r\n        } else {\r\n            texture.is2DArray = true;\r\n        }\r\n\r\n        if (!this._doNotHandleContextLost) {\r\n            texture._bufferView = data;\r\n        }\r\n\r\n        if (is3D) {\r\n            this.updateRawTexture3D(texture, data, format, invertY, compression, textureType);\r\n        } else {\r\n            this.updateRawTexture2DArray(texture, data, format, invertY, compression, textureType);\r\n        }\r\n        this._bindTextureDirectly(target, texture, true);\r\n\r\n        // Filters\r\n        const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n\r\n        this._gl.texParameteri(target, this._gl.TEXTURE_MAG_FILTER, filters.mag);\r\n        this._gl.texParameteri(target, this._gl.TEXTURE_MIN_FILTER, filters.min);\r\n\r\n        if (generateMipMaps) {\r\n            this._gl.generateMipmap(target);\r\n        }\r\n\r\n        this._bindTextureDirectly(target, null);\r\n\r\n        this._internalTexturesCache.push(texture);\r\n\r\n        return texture;\r\n    };\r\n}\r\n\r\nThinEngine.prototype.createRawTexture2DArray = _makeCreateRawTextureFunction(false);\r\nThinEngine.prototype.createRawTexture3D = _makeCreateRawTextureFunction(true);\r\n\r\n/**\r\n * Create a function for updateRawTexture3D/updateRawTexture2DArray\r\n * @param is3D true for TEXTURE_3D and false for TEXTURE_2D_ARRAY\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction _makeUpdateRawTextureFunction(is3D: boolean) {\r\n    return function (\r\n        this: ThinEngine,\r\n        texture: InternalTexture,\r\n        data: Nullable<ArrayBufferView>,\r\n        format: number,\r\n        invertY: boolean,\r\n        compression: Nullable<string> = null,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ): void {\r\n        const target = is3D ? this._gl.TEXTURE_3D : this._gl.TEXTURE_2D_ARRAY;\r\n        const internalType = this._getWebGLTextureType(textureType);\r\n        const internalFormat = this._getInternalFormat(format);\r\n        const internalSizedFomat = this._getRGBABufferInternalSizedFormat(textureType, format);\r\n\r\n        this._bindTextureDirectly(target, texture, true);\r\n        this._unpackFlipY(invertY === undefined ? true : invertY ? true : false);\r\n\r\n        if (!this._doNotHandleContextLost) {\r\n            texture._bufferView = data;\r\n            texture.format = format;\r\n            texture.invertY = invertY;\r\n            texture._compression = compression;\r\n        }\r\n\r\n        if (texture.width % 4 !== 0) {\r\n            this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 1);\r\n        }\r\n\r\n        if (compression && data) {\r\n            this._gl.compressedTexImage3D(target, 0, (<any>this.getCaps().s3tc)[compression], texture.width, texture.height, texture.depth, 0, data);\r\n        } else {\r\n            this._gl.texImage3D(target, 0, internalSizedFomat, texture.width, texture.height, texture.depth, 0, internalFormat, internalType, data);\r\n        }\r\n\r\n        if (texture.generateMipMaps) {\r\n            this._gl.generateMipmap(target);\r\n        }\r\n        this._bindTextureDirectly(target, null);\r\n        // this.resetTextureCache();\r\n        texture.isReady = true;\r\n    };\r\n}\r\n\r\nThinEngine.prototype.updateRawTexture2DArray = _makeUpdateRawTextureFunction(false);\r\nThinEngine.prototype.updateRawTexture3D = _makeUpdateRawTextureFunction(true);\r\n", "import { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Raw texture can help creating a texture directly from an array of data.\r\n * This can be super useful if you either get the data from an uncompressed source or\r\n * if you wish to create your texture pixel by pixel.\r\n */\r\nexport class RawTexture extends Texture {\r\n    /**\r\n     * Instantiates a new RawTexture.\r\n     * Raw texture can help creating a texture directly from an array of data.\r\n     * This can be super useful if you either get the data from an uncompressed source or\r\n     * if you wish to create your texture pixel by pixel.\r\n     * @param data define the array of data to use to create the texture (null to create an empty texture)\r\n     * @param width define the width of the texture\r\n     * @param height define the height of the texture\r\n     * @param format define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps define whether mip maps should be generated or not\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     */\r\n    constructor(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        /**\r\n         * Define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n         */\r\n        public format: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        creationFlags?: number,\r\n        useSRGBBuffer?: boolean\r\n    ) {\r\n        super(null, sceneOrEngine, !generateMipMaps, invertY, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, creationFlags);\r\n\r\n        if (!this._engine) {\r\n            return;\r\n        }\r\n\r\n        if (!this._engine._caps.textureFloatLinearFiltering && type === Constants.TEXTURETYPE_FLOAT) {\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n        if (!this._engine._caps.textureHalfFloatLinearFiltering && type === Constants.TEXTURETYPE_HALF_FLOAT) {\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n\r\n        this._texture = this._engine.createRawTexture(data, width, height, format, generateMipMaps, invertY, samplingMode, null, type, creationFlags ?? 0, useSRGBBuffer ?? false);\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n    }\r\n\r\n    /**\r\n     * Updates the texture underlying data.\r\n     * @param data Define the new data of the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        this._getEngine()!.updateRawTexture(this._texture, data, this._texture!.format, this._texture!.invertY, null, this._texture!.type, this._texture!._useSRGBBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance texture\r\n     */\r\n    public static CreateLuminanceTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_LUMINANCE, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance alpha texture\r\n     */\r\n    public static CreateLuminanceAlphaTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_LUMINANCE_ALPHA, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates an alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the alpha texture\r\n     */\r\n    public static CreateAlphaTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_ALPHA, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGB texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGB alpha texture\r\n     */\r\n    public static CreateRGBTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        creationFlags: number = 0,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_RGB, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        creationFlags: number = 0,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA storage texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBAStorageTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(\r\n            data,\r\n            width,\r\n            height,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            generateMipMaps,\r\n            invertY,\r\n            samplingMode,\r\n            type,\r\n            Constants.TEXTURE_CREATIONFLAG_STORAGE,\r\n            useSRGBBuffer\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a R texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    public static CreateRTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_FLOAT\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_R, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a R storage texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    public static CreateRStorageTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | ThinEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_FLOAT\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_R, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, Constants.TEXTURE_CREATIONFLAG_STORAGE);\r\n    }\r\n}\r\n", "import { Bone } from \"./bone\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport type { Animatable } from \"../Animations/animatable\";\r\nimport type { AnimationPropertiesOverride } from \"../Animations/animationPropertiesOverride\";\r\nimport { Animation } from \"../Animations/animation\";\r\nimport { AnimationRange } from \"../Animations/animationRange\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\n\r\n/**\r\n * Class used to handle skinning animations\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n */\r\nexport class Skeleton implements IAnimatable {\r\n    /**\r\n     * Defines the list of child bones\r\n     */\r\n    public bones: Bone[] = [];\r\n    /**\r\n     * Defines an estimate of the dimension of the skeleton at rest\r\n     */\r\n    public dimensionsAtRest: Vector3;\r\n    /**\r\n     * Defines a boolean indicating if the root matrix is provided by meshes or by the current skeleton (this is the default value)\r\n     */\r\n    public needInitialSkinMatrix = false;\r\n\r\n    /**\r\n     * Gets the list of animations attached to this skeleton\r\n     */\r\n    public animations: Array<Animation>;\r\n\r\n    private _scene: Scene;\r\n    private _isDirty = true;\r\n    private _transformMatrices: Float32Array;\r\n    private _transformMatrixTexture: Nullable<RawTexture>;\r\n    private _meshesWithPoseMatrix = new Array<AbstractMesh>();\r\n    private _animatables: IAnimatable[];\r\n    private _identity = Matrix.Identity();\r\n    private _synchronizedWithMesh: AbstractMesh;\r\n    private _currentRenderId = -1;\r\n\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    private _absoluteTransformIsDirty = true;\r\n\r\n    private _canUseTextureForBones = false;\r\n    private _uniqueId = 0;\r\n\r\n    /** @internal */\r\n    public _numBonesWithLinkedTransformNode = 0;\r\n\r\n    /** @internal */\r\n    public _hasWaitingData: Nullable<boolean> = null;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     * Specifies if the skeleton should be serialized\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    private _useTextureToStoreBoneMatrices = true;\r\n    /**\r\n     * Gets or sets a boolean indicating that bone matrices should be stored as a texture instead of using shader uniforms (default is true).\r\n     * Please note that this option is not available if the hardware does not support it\r\n     */\r\n    public get useTextureToStoreBoneMatrices(): boolean {\r\n        return this._useTextureToStoreBoneMatrices;\r\n    }\r\n\r\n    public set useTextureToStoreBoneMatrices(value: boolean) {\r\n        this._useTextureToStoreBoneMatrices = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An observable triggered before computing the skeleton's matrices\r\n     */\r\n    public onBeforeComputeObservable = new Observable<Skeleton>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the skeleton effectively stores matrices into a texture\r\n     */\r\n    public get isUsingTextureForMatrices() {\r\n        return this.useTextureToStoreBoneMatrices && this._canUseTextureForBones;\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this skeleton\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Creates a new skeleton\r\n     * @param name defines the skeleton name\r\n     * @param id defines the skeleton Id\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(\r\n        /** defines the skeleton name */\r\n        public name: string,\r\n        /** defines the skeleton Id */\r\n        public id: string,\r\n        scene: Scene\r\n    ) {\r\n        this.bones = [];\r\n\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        this._uniqueId = this._scene.getUniqueId();\r\n\r\n        this._scene.addSkeleton(this);\r\n\r\n        //make sure it will recalculate the matrix next time prepare is called.\r\n        this._isDirty = true;\r\n\r\n        const engineCaps = this._scene.getEngine().getCaps();\r\n        this._canUseTextureForBones = engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Skeleton\";\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root bones\r\n     * @returns an array containing the root bones\r\n     */\r\n    public getChildren(): Array<Bone> {\r\n        return this.bones.filter((b) => !b.getParent());\r\n    }\r\n\r\n    // Members\r\n    /**\r\n     * Gets the list of transform matrices to send to shaders (one matrix per bone)\r\n     * @param mesh defines the mesh to use to get the root matrix (if needInitialSkinMatrix === true)\r\n     * @returns a Float32Array containing matrices data\r\n     */\r\n    public getTransformMatrices(mesh: Nullable<AbstractMesh>): Float32Array {\r\n        if (this.needInitialSkinMatrix) {\r\n            if (!mesh) {\r\n                throw new Error(\"getTransformMatrices: When using the needInitialSkinMatrix flag, a mesh must be provided\");\r\n            }\r\n            if (!mesh._bonesTransformMatrices) {\r\n                this.prepare(true);\r\n            }\r\n\r\n            return mesh._bonesTransformMatrices!;\r\n        }\r\n\r\n        if (!this._transformMatrices || this._isDirty) {\r\n            this.prepare(!this._transformMatrices);\r\n        }\r\n\r\n        return this._transformMatrices;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of transform matrices to send to shaders inside a texture (one matrix per bone)\r\n     * @param mesh defines the mesh to use to get the root matrix (if needInitialSkinMatrix === true)\r\n     * @returns a raw texture containing the data\r\n     */\r\n    public getTransformMatrixTexture(mesh: AbstractMesh): Nullable<RawTexture> {\r\n        if (this.needInitialSkinMatrix && mesh._transformMatrixTexture) {\r\n            return mesh._transformMatrixTexture;\r\n        }\r\n\r\n        return this._transformMatrixTexture;\r\n    }\r\n\r\n    /**\r\n     * Gets the current hosting scene\r\n     * @returns a scene object\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Gets a string representing the current skeleton data\r\n     * @param fullDetails defines a boolean indicating if we want a verbose version\r\n     * @returns a string representing the current skeleton data\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = `Name: ${this.name}, nBones: ${this.bones.length}`;\r\n        ret += `, nAnimationRanges: ${this._ranges ? Object.keys(this._ranges).length : \"none\"}`;\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            let first = true;\r\n            for (const name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Get bone's index searching by name\r\n     * @param name defines bone's name to search for\r\n     * @returns the indice of the bone. Returns -1 if not found\r\n     */\r\n    public getBoneIndexByName(name: string): number {\r\n        for (let boneIndex = 0, cache = this.bones.length; boneIndex < cache; boneIndex++) {\r\n            if (this.bones[boneIndex].name === name) {\r\n                return boneIndex;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Create a new animation range\r\n     * @param name defines the name of the range\r\n     * @param from defines the start key\r\n     * @param to defines the end key\r\n     */\r\n    public createAnimationRange(name: string, from: number, to: number): void {\r\n        // check name not already in use\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n            for (let i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n                if (this.bones[i].animations[0]) {\r\n                    this.bones[i].animations[0].createRange(name, from, to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a specific animation range\r\n     * @param name defines the name of the range\r\n     * @param deleteFrames defines if frames must be removed as well\r\n     */\r\n    public deleteAnimationRange(name: string, deleteFrames = true): void {\r\n        for (let i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n            if (this.bones[i].animations[0]) {\r\n                this.bones[i].animations[0].deleteRange(name, deleteFrames);\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Gets a specific animation range\r\n     * @param name defines the name of the range to look for\r\n     * @returns the requested animation range or null if not found\r\n     */\r\n    public getAnimationRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name] || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all animation ranges defined on this skeleton\r\n     * @returns an array\r\n     */\r\n    public getAnimationRanges(): Nullable<AnimationRange>[] {\r\n        const animationRanges: Nullable<AnimationRange>[] = [];\r\n        let name: string;\r\n        for (name in this._ranges) {\r\n            animationRanges.push(this._ranges[name]);\r\n        }\r\n        return animationRanges;\r\n    }\r\n\r\n    /**\r\n     * Copy animation range from a source skeleton.\r\n     * This is not for a complete retargeting, only between very similar skeleton's with only possible bone length differences\r\n     * @param source defines the source skeleton\r\n     * @param name defines the name of the range to copy\r\n     * @param rescaleAsRequired defines if rescaling must be applied if required\r\n     * @returns true if operation was successful\r\n     */\r\n    public copyAnimationRange(source: Skeleton, name: string, rescaleAsRequired = false): boolean {\r\n        if (this._ranges[name] || !source.getAnimationRange(name)) {\r\n            return false;\r\n        }\r\n        let ret = true;\r\n        const frameOffset = this._getHighestAnimationFrame() + 1;\r\n\r\n        // make a dictionary of source skeleton's bones, so exact same order or doubly nested loop is not required\r\n        const boneDict: { [key: string]: Bone } = {};\r\n        const sourceBones = source.bones;\r\n        let nBones: number;\r\n        let i: number;\r\n        for (i = 0, nBones = sourceBones.length; i < nBones; i++) {\r\n            boneDict[sourceBones[i].name] = sourceBones[i];\r\n        }\r\n\r\n        if (this.bones.length !== sourceBones.length) {\r\n            Logger.Warn(`copyAnimationRange: this rig has ${this.bones.length} bones, while source as ${sourceBones.length}`);\r\n            ret = false;\r\n        }\r\n\r\n        const skelDimensionsRatio = rescaleAsRequired && this.dimensionsAtRest && source.dimensionsAtRest ? this.dimensionsAtRest.divide(source.dimensionsAtRest) : null;\r\n\r\n        for (i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n            const boneName = this.bones[i].name;\r\n            const sourceBone = boneDict[boneName];\r\n            if (sourceBone) {\r\n                ret = ret && this.bones[i].copyAnimationRange(sourceBone, name, frameOffset, rescaleAsRequired, skelDimensionsRatio);\r\n            } else {\r\n                Logger.Warn(\"copyAnimationRange: not same rig, missing source bone \" + boneName);\r\n                ret = false;\r\n            }\r\n        }\r\n        // do not call createAnimationRange(), since it also is done to bones, which was already done\r\n        const range = source.getAnimationRange(name);\r\n        if (range) {\r\n            this._ranges[name] = new AnimationRange(name, range.from + frameOffset, range.to + frameOffset);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Forces the skeleton to go to rest pose\r\n     */\r\n    public returnToRest(): void {\r\n        for (const bone of this.bones) {\r\n            if (bone._index !== -1) {\r\n                bone.returnToRest();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getHighestAnimationFrame(): number {\r\n        let ret = 0;\r\n        for (let i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n            if (this.bones[i].animations[0]) {\r\n                const highest = this.bones[i].animations[0].getHighestFrame();\r\n                if (ret < highest) {\r\n                    ret = highest;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Begin a specific animation range\r\n     * @param name defines the name of the range to start\r\n     * @param loop defines if looping must be turned on (false by default)\r\n     * @param speedRatio defines the speed ratio to apply (1 by default)\r\n     * @param onAnimationEnd defines a callback which will be called when animation will end\r\n     * @returns a new animatable\r\n     */\r\n    public beginAnimation(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n        const range = this.getAnimationRange(name);\r\n\r\n        if (!range) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes for a range of animation on a skeleton to be relative to a given reference frame.\r\n     * @param skeleton defines the Skeleton containing the animation range to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to\r\n     * @param range defines the name of the AnimationRange belonging to the Skeleton to convert\r\n     * @returns the original skeleton\r\n     */\r\n    public static MakeAnimationAdditive(skeleton: Skeleton, referenceFrame = 0, range: string): Nullable<Skeleton> {\r\n        const rangeValue = skeleton.getAnimationRange(range);\r\n\r\n        // We can't make a range additive if it doesn't exist\r\n        if (!rangeValue) {\r\n            return null;\r\n        }\r\n\r\n        // Find any current scene-level animatable belonging to the target that matches the range\r\n        const sceneAnimatables = skeleton._scene.getAllAnimatablesByTarget(skeleton);\r\n        let rangeAnimatable: Nullable<Animatable> = null;\r\n\r\n        for (let index = 0; index < sceneAnimatables.length; index++) {\r\n            const sceneAnimatable = sceneAnimatables[index];\r\n\r\n            if (sceneAnimatable.fromFrame === rangeValue?.from && sceneAnimatable.toFrame === rangeValue?.to) {\r\n                rangeAnimatable = sceneAnimatable;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Convert the animations belonging to the skeleton to additive keyframes\r\n        const animatables = skeleton.getAnimatables();\r\n\r\n        for (let index = 0; index < animatables.length; index++) {\r\n            const animatable = animatables[index];\r\n            const animations = animatable.animations;\r\n\r\n            if (!animations) {\r\n                continue;\r\n            }\r\n\r\n            for (let animIndex = 0; animIndex < animations.length; animIndex++) {\r\n                Animation.MakeAnimationAdditive(animations[animIndex], referenceFrame, range);\r\n            }\r\n        }\r\n\r\n        // Mark the scene-level animatable as additive\r\n        if (rangeAnimatable) {\r\n            rangeAnimatable.isAdditive = true;\r\n        }\r\n\r\n        return skeleton;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n        this._absoluteTransformIsDirty = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerMeshWithPoseMatrix(mesh: AbstractMesh): void {\r\n        this._meshesWithPoseMatrix.push(mesh);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _unregisterMeshWithPoseMatrix(mesh: AbstractMesh): void {\r\n        const index = this._meshesWithPoseMatrix.indexOf(mesh);\r\n\r\n        if (index > -1) {\r\n            this._meshesWithPoseMatrix.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    private _computeTransformMatrices(targetMatrix: Float32Array, initialSkinMatrix: Nullable<Matrix>): void {\r\n        this.onBeforeComputeObservable.notifyObservers(this);\r\n\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            const bone = this.bones[index];\r\n            bone._childUpdateId++;\r\n            const parentBone = bone.getParent();\r\n\r\n            if (parentBone) {\r\n                bone.getLocalMatrix().multiplyToRef(parentBone.getFinalMatrix(), bone.getFinalMatrix());\r\n            } else {\r\n                if (initialSkinMatrix) {\r\n                    bone.getLocalMatrix().multiplyToRef(initialSkinMatrix, bone.getFinalMatrix());\r\n                } else {\r\n                    bone.getFinalMatrix().copyFrom(bone.getLocalMatrix());\r\n                }\r\n            }\r\n\r\n            if (bone._index !== -1) {\r\n                const mappedIndex = bone._index === null ? index : bone._index;\r\n                bone.getAbsoluteInverseBindMatrix().multiplyToArray(bone.getFinalMatrix(), targetMatrix, mappedIndex * 16);\r\n            }\r\n        }\r\n\r\n        this._identity.copyToArray(targetMatrix, this.bones.length * 16);\r\n    }\r\n\r\n    /**\r\n     * Build all resources required to render a skeleton\r\n     * @param dontCheckFrameId defines a boolean indicating if prepare should be run without checking first the current frame id (default: false)\r\n     */\r\n    public prepare(dontCheckFrameId = false): void {\r\n        if (!dontCheckFrameId) {\r\n            const currentRenderId = this.getScene().getRenderId();\r\n            if (this._currentRenderId === currentRenderId) {\r\n                return;\r\n            }\r\n            this._currentRenderId = currentRenderId;\r\n        }\r\n\r\n        // Update the local matrix of bones with linked transform nodes.\r\n        if (this._numBonesWithLinkedTransformNode > 0) {\r\n            for (const bone of this.bones) {\r\n                if (bone._linkedTransformNode) {\r\n                    const node = bone._linkedTransformNode;\r\n                    bone.position = node.position;\r\n                    if (node.rotationQuaternion) {\r\n                        bone.rotationQuaternion = node.rotationQuaternion;\r\n                    } else {\r\n                        bone.rotation = node.rotation;\r\n                    }\r\n                    bone.scaling = node.scaling;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.needInitialSkinMatrix) {\r\n            for (const mesh of this._meshesWithPoseMatrix) {\r\n                const poseMatrix = mesh.getPoseMatrix();\r\n\r\n                let needsUpdate = this._isDirty;\r\n                if (!mesh._bonesTransformMatrices || mesh._bonesTransformMatrices.length !== 16 * (this.bones.length + 1)) {\r\n                    mesh._bonesTransformMatrices = new Float32Array(16 * (this.bones.length + 1));\r\n                    needsUpdate = true;\r\n                }\r\n\r\n                if (!needsUpdate) {\r\n                    continue;\r\n                }\r\n\r\n                if (this._synchronizedWithMesh !== mesh) {\r\n                    this._synchronizedWithMesh = mesh;\r\n\r\n                    // Prepare bones\r\n                    for (const bone of this.bones) {\r\n                        if (!bone.getParent()) {\r\n                            const matrix = bone.getBindMatrix();\r\n                            matrix.multiplyToRef(poseMatrix, TmpVectors.Matrix[1]);\r\n                            bone._updateAbsoluteBindMatrices(TmpVectors.Matrix[1]);\r\n                        }\r\n                    }\r\n\r\n                    if (this.isUsingTextureForMatrices) {\r\n                        const textureWidth = (this.bones.length + 1) * 4;\r\n                        if (!mesh._transformMatrixTexture || mesh._transformMatrixTexture.getSize().width !== textureWidth) {\r\n                            if (mesh._transformMatrixTexture) {\r\n                                mesh._transformMatrixTexture.dispose();\r\n                            }\r\n\r\n                            mesh._transformMatrixTexture = RawTexture.CreateRGBATexture(\r\n                                mesh._bonesTransformMatrices,\r\n                                (this.bones.length + 1) * 4,\r\n                                1,\r\n                                this._scene,\r\n                                false,\r\n                                false,\r\n                                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                                Constants.TEXTURETYPE_FLOAT\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._computeTransformMatrices(mesh._bonesTransformMatrices, poseMatrix);\r\n\r\n                if (this.isUsingTextureForMatrices && mesh._transformMatrixTexture) {\r\n                    mesh._transformMatrixTexture.update(mesh._bonesTransformMatrices);\r\n                }\r\n            }\r\n        } else {\r\n            if (!this._isDirty) {\r\n                return;\r\n            }\r\n\r\n            if (!this._transformMatrices || this._transformMatrices.length !== 16 * (this.bones.length + 1)) {\r\n                this._transformMatrices = new Float32Array(16 * (this.bones.length + 1));\r\n\r\n                if (this.isUsingTextureForMatrices) {\r\n                    if (this._transformMatrixTexture) {\r\n                        this._transformMatrixTexture.dispose();\r\n                    }\r\n\r\n                    this._transformMatrixTexture = RawTexture.CreateRGBATexture(\r\n                        this._transformMatrices,\r\n                        (this.bones.length + 1) * 4,\r\n                        1,\r\n                        this._scene,\r\n                        false,\r\n                        false,\r\n                        Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTURETYPE_FLOAT\r\n                    );\r\n                }\r\n            }\r\n\r\n            this._computeTransformMatrices(this._transformMatrices, null);\r\n\r\n            if (this.isUsingTextureForMatrices && this._transformMatrixTexture) {\r\n                this._transformMatrixTexture.update(this._transformMatrices);\r\n            }\r\n        }\r\n\r\n        this._isDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of animatables currently running for this skeleton\r\n     * @returns an array of animatables\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        if (!this._animatables || this._animatables.length !== this.bones.length) {\r\n            this._animatables = [];\r\n\r\n            for (let index = 0; index < this.bones.length; index++) {\r\n                this._animatables.push(this.bones[index]);\r\n            }\r\n        }\r\n\r\n        return this._animatables;\r\n    }\r\n\r\n    /**\r\n     * Clone the current skeleton\r\n     * @param name defines the name of the new skeleton\r\n     * @param id defines the id of the new skeleton\r\n     * @returns the new skeleton\r\n     */\r\n    public clone(name: string, id?: string): Skeleton {\r\n        const result = new Skeleton(name, id || name, this._scene);\r\n\r\n        result.needInitialSkinMatrix = this.needInitialSkinMatrix;\r\n\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            const source = this.bones[index];\r\n            let parentBone = null;\r\n\r\n            const parent = source.getParent();\r\n            if (parent) {\r\n                const parentIndex = this.bones.indexOf(parent);\r\n                parentBone = result.bones[parentIndex];\r\n            }\r\n\r\n            const bone = new Bone(source.name, result, parentBone, source.getBindMatrix().clone(), source.getRestMatrix().clone());\r\n            bone._index = source._index;\r\n\r\n            if (source._linkedTransformNode) {\r\n                bone.linkTransformNode(source._linkedTransformNode);\r\n            }\r\n\r\n            DeepCopier.DeepCopy(source.animations, bone.animations);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            result._ranges = {};\r\n            for (const rangeName in this._ranges) {\r\n                const range = this._ranges[rangeName];\r\n\r\n                if (range) {\r\n                    result._ranges[rangeName] = range.clone();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        result.prepare(true);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Enable animation blending for this skeleton\r\n     * @param blendingSpeed defines the blending speed to apply\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-blending\r\n     */\r\n    public enableBlending(blendingSpeed = 0.01) {\r\n        this.bones.forEach((bone) => {\r\n            bone.animations.forEach((animation: Animation) => {\r\n                animation.enableBlending = true;\r\n                animation.blendingSpeed = blendingSpeed;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Releases all resources associated with the current skeleton\r\n     */\r\n    public dispose() {\r\n        this._meshesWithPoseMatrix.length = 0;\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeSkeleton(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.skeletons.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.skeletons.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serialize the skeleton in a JSON object\r\n     * @returns a JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n\r\n        if (this.dimensionsAtRest) {\r\n            serializationObject.dimensionsAtRest = this.dimensionsAtRest.asArray();\r\n        }\r\n\r\n        serializationObject.bones = [];\r\n\r\n        serializationObject.needInitialSkinMatrix = this.needInitialSkinMatrix;\r\n\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            const bone = this.bones[index];\r\n            const parent = bone.getParent();\r\n\r\n            const serializedBone: any = {\r\n                parentBoneIndex: parent ? this.bones.indexOf(parent) : -1,\r\n                index: bone.getIndex(),\r\n                name: bone.name,\r\n                id: bone.id,\r\n                matrix: bone.getBindMatrix().asArray(),\r\n                rest: bone.getRestMatrix().asArray(),\r\n                linkedTransformNodeId: bone.getTransformNode()?.id,\r\n            };\r\n\r\n            serializationObject.bones.push(serializedBone);\r\n\r\n            if (bone.length) {\r\n                serializedBone.length = bone.length;\r\n            }\r\n\r\n            if (bone.metadata) {\r\n                serializedBone.metadata = bone.metadata;\r\n            }\r\n\r\n            if (bone.animations && bone.animations.length > 0) {\r\n                serializedBone.animation = bone.animations[0].serialize();\r\n            }\r\n\r\n            serializationObject.ranges = [];\r\n            for (const name in this._ranges) {\r\n                const source = this._ranges[name];\r\n\r\n                if (!source) {\r\n                    continue;\r\n                }\r\n\r\n                const range: any = {};\r\n                range.name = name;\r\n                range.from = source.from;\r\n                range.to = source.to;\r\n                serializationObject.ranges.push(range);\r\n            }\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new skeleton from serialized data\r\n     * @param parsedSkeleton defines the serialized data\r\n     * @param scene defines the hosting scene\r\n     * @returns a new skeleton\r\n     */\r\n    public static Parse(parsedSkeleton: any, scene: Scene): Skeleton {\r\n        const skeleton = new Skeleton(parsedSkeleton.name, parsedSkeleton.id, scene);\r\n        if (parsedSkeleton.dimensionsAtRest) {\r\n            skeleton.dimensionsAtRest = Vector3.FromArray(parsedSkeleton.dimensionsAtRest);\r\n        }\r\n\r\n        skeleton.needInitialSkinMatrix = parsedSkeleton.needInitialSkinMatrix;\r\n\r\n        let index: number;\r\n        for (index = 0; index < parsedSkeleton.bones.length; index++) {\r\n            const parsedBone = parsedSkeleton.bones[index];\r\n            const parsedBoneIndex = parsedSkeleton.bones[index].index;\r\n            let parentBone = null;\r\n            if (parsedBone.parentBoneIndex > -1) {\r\n                parentBone = skeleton.bones[parsedBone.parentBoneIndex];\r\n            }\r\n\r\n            const rest: Nullable<Matrix> = parsedBone.rest ? Matrix.FromArray(parsedBone.rest) : null;\r\n            const bone = new Bone(parsedBone.name, skeleton, parentBone, Matrix.FromArray(parsedBone.matrix), rest, null, parsedBoneIndex);\r\n\r\n            if (parsedBone.id !== undefined && parsedBone.id !== null) {\r\n                bone.id = parsedBone.id;\r\n            }\r\n\r\n            if (parsedBone.length) {\r\n                bone.length = parsedBone.length;\r\n            }\r\n\r\n            if (parsedBone.metadata) {\r\n                bone.metadata = parsedBone.metadata;\r\n            }\r\n\r\n            if (parsedBone.animation) {\r\n                bone.animations.push(Animation.Parse(parsedBone.animation));\r\n            }\r\n\r\n            if (parsedBone.linkedTransformNodeId !== undefined && parsedBone.linkedTransformNodeId !== null) {\r\n                skeleton._hasWaitingData = true;\r\n                bone._waitingTransformNodeId = parsedBone.linkedTransformNodeId;\r\n            }\r\n        }\r\n\r\n        // placed after bones, so createAnimationRange can cascade down\r\n        if (parsedSkeleton.ranges) {\r\n            for (index = 0; index < parsedSkeleton.ranges.length; index++) {\r\n                const data = parsedSkeleton.ranges[index];\r\n                skeleton.createAnimationRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n        return skeleton;\r\n    }\r\n\r\n    /**\r\n     * Compute all node absolute matrices\r\n     * @param forceUpdate defines if computation must be done even if cache is up to date\r\n     */\r\n    public computeAbsoluteMatrices(forceUpdate = false): void {\r\n        if (this._absoluteTransformIsDirty || forceUpdate) {\r\n            this.bones[0].computeAbsoluteMatrices();\r\n            this._absoluteTransformIsDirty = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute all node absolute matrices\r\n     * @param forceUpdate defines if computation must be done even if cache is up to date\r\n     * @deprecated Please use computeAbsoluteMatrices instead\r\n     */\r\n    public computeAbsoluteTransforms(forceUpdate = false): void {\r\n        this.computeAbsoluteMatrices(forceUpdate);\r\n    }\r\n\r\n    /**\r\n     * Gets the root pose matrix\r\n     * @returns a matrix\r\n     */\r\n    public getPoseMatrix(): Nullable<Matrix> {\r\n        let poseMatrix: Nullable<Matrix> = null;\r\n\r\n        if (this._meshesWithPoseMatrix.length > 0) {\r\n            poseMatrix = this._meshesWithPoseMatrix[0].getPoseMatrix();\r\n        }\r\n\r\n        return poseMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sorts bones per internal index\r\n     */\r\n    public sortBones(): void {\r\n        const bones: Bone[] = [];\r\n        const visited = new Array<boolean>(this.bones.length);\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            this._sortBones(index, bones, visited);\r\n        }\r\n\r\n        this.bones = bones;\r\n    }\r\n\r\n    private _sortBones(index: number, bones: Bone[], visited: boolean[]): void {\r\n        if (visited[index]) {\r\n            return;\r\n        }\r\n\r\n        visited[index] = true;\r\n\r\n        const bone = this.bones[index];\r\n        if (!bone) return;\r\n\r\n        if (bone._index === undefined) {\r\n            bone._index = index;\r\n        }\r\n\r\n        const parentBone = bone.getParent();\r\n        if (parentBone) {\r\n            this._sortBones(this.bones.indexOf(parentBone), bones, visited);\r\n        }\r\n\r\n        bones.push(bone);\r\n    }\r\n\r\n    /**\r\n     * Set the current local matrix as the restPose for all bones in the skeleton.\r\n     */\r\n    public setCurrentPoseAsRest(): void {\r\n        this.bones.forEach((b) => {\r\n            b.setCurrentPoseAsRest();\r\n        });\r\n    }\r\n}\r\n", "import { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Vector2, Vector4, Quaternion } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { TextureSampler } from \"./Textures/textureSampler\";\r\nimport type { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\r\n\r\nimport type { ExternalTexture } from \"./Textures/externalTexture\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindSceneUniformBuffer,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PushAttributesForInstances,\r\n} from \"./materialHelper.functions\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Defines the options associated with the creation of a shader material.\r\n */\r\nexport interface IShaderMaterialOptions {\r\n    /**\r\n     * Does the material work in alpha blend mode\r\n     */\r\n    needAlphaBlending: boolean;\r\n\r\n    /**\r\n     * Does the material work in alpha test mode\r\n     */\r\n    needAlphaTesting: boolean;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms: string[];\r\n\r\n    /**\r\n     * The list of UBO names used in the shader\r\n     */\r\n    uniformBuffers: string[];\r\n\r\n    /**\r\n     * The list of sampler (texture) names used in the shader\r\n     */\r\n    samplers: string[];\r\n\r\n    /**\r\n     * The list of external texture names used in the shader\r\n     */\r\n    externalTextures: string[];\r\n\r\n    /**\r\n     * The list of sampler object names used in the shader\r\n     */\r\n    samplerObjects: string[];\r\n\r\n    /**\r\n     * The list of storage buffer names used in the shader\r\n     */\r\n    storageBuffers: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines: string[];\r\n\r\n    /**\r\n     * Defines if clip planes have to be turned on: true to turn them on, false to turn them off and null to turn them on/off depending on the scene configuration (scene.clipPlaneX)\r\n     */\r\n    useClipPlane: Nullable<boolean>;\r\n\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n}\r\n\r\n/**\r\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n *\r\n * This returned material effects how the mesh will look based on the code in the shaders.\r\n *\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n */\r\nexport class ShaderMaterial extends PushMaterial {\r\n    private _shaderPath: any;\r\n    private _options: IShaderMaterialOptions;\r\n    private _textures: { [name: string]: BaseTexture } = {};\r\n    private _textureArrays: { [name: string]: BaseTexture[] } = {};\r\n    private _externalTextures: { [name: string]: ExternalTexture } = {};\r\n    private _floats: { [name: string]: number } = {};\r\n    private _ints: { [name: string]: number } = {};\r\n    private _uints: { [name: string]: number } = {};\r\n    private _floatsArrays: { [name: string]: number[] } = {};\r\n    private _colors3: { [name: string]: Color3 } = {};\r\n    private _colors3Arrays: { [name: string]: number[] } = {};\r\n    private _colors4: { [name: string]: Color4 } = {};\r\n    private _colors4Arrays: { [name: string]: number[] } = {};\r\n    private _vectors2: { [name: string]: Vector2 } = {};\r\n    private _vectors3: { [name: string]: Vector3 } = {};\r\n    private _vectors4: { [name: string]: Vector4 } = {};\r\n    private _quaternions: { [name: string]: Quaternion } = {};\r\n    private _quaternionsArrays: { [name: string]: number[] } = {};\r\n    private _matrices: { [name: string]: Matrix } = {};\r\n    private _matrixArrays: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices3x3: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices2x2: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _vectors2Arrays: { [name: string]: number[] } = {};\r\n    private _vectors3Arrays: { [name: string]: number[] } = {};\r\n    private _vectors4Arrays: { [name: string]: number[] } = {};\r\n    private _uniformBuffers: { [name: string]: UniformBuffer } = {};\r\n    private _textureSamplers: { [name: string]: TextureSampler } = {};\r\n    private _storageBuffers: { [name: string]: StorageBuffer } = {};\r\n    private _cachedWorldViewMatrix = new Matrix();\r\n    private _cachedWorldViewProjectionMatrix = new Matrix();\r\n    private _multiview = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _materialHelperNeedsPreviousMatrices = false;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the material was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Instantiate a new shader material.\r\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n     * This returned material effects how the mesh will look based on the code in the shaders.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     * @param shaderPath Defines  the route to the shader code in one of three ways:\r\n     *  * object: \\{ vertex: \"custom\", fragment: \"custom\" \\}, used with Effect.ShadersStore[\"customVertexShader\"] and Effect.ShadersStore[\"customFragmentShader\"]\r\n     *  * object: \\{ vertexElement: \"vertexShaderCode\", fragmentElement: \"fragmentShaderCode\" \\}, used with shader code in script tags\r\n     *  * object: \\{ vertexSource: \"vertex shader code string\", fragmentSource: \"fragment shader code string\" \\} using with strings containing the shaders code\r\n     *  * string: \"./COMMON_NAME\", used with external files COMMON_NAME.vertex.fx and COMMON_NAME.fragment.fx in index.html folder.\r\n     * @param options Define the options used to create the shader\r\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\r\n     */\r\n    constructor(name: string, scene: Scene, shaderPath: any, options: Partial<IShaderMaterialOptions> = {}, storeEffectOnSubMeshes = true) {\r\n        super(name, scene, storeEffectOnSubMeshes);\r\n        this._shaderPath = shaderPath;\r\n\r\n        this._options = {\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n            attributes: [\"position\", \"normal\", \"uv\"],\r\n            uniforms: [\"worldViewProjection\"],\r\n            uniformBuffers: [],\r\n            samplers: [],\r\n            externalTextures: [],\r\n            samplerObjects: [],\r\n            storageBuffers: [],\r\n            defines: [],\r\n            useClipPlane: false,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public get shaderPath(): any {\r\n        return this._shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Sets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public set shaderPath(shaderPath: any) {\r\n        this._shaderPath = shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the options used to compile the shader.\r\n     * They can be modified to trigger a new compilation\r\n     */\r\n    public get options(): IShaderMaterialOptions {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * is multiview set to true?\r\n     */\r\n    public get isMultiview(): boolean {\r\n        return this._multiview;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ShaderMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        return this._options.needAlphaTesting;\r\n    }\r\n\r\n    private _checkUniform(uniformName: string): void {\r\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\r\n            this._options.uniforms.push(uniformName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTexture(name: string, texture: BaseTexture): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n        this._textures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture array in the shader.\r\n     * @param name Define the name of the uniform sampler array as defined in the shader\r\n     * @param textures Define the list of textures to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureArray(name: string, textures: BaseTexture[]): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n\r\n        this._checkUniform(name);\r\n\r\n        this._textureArrays[name] = textures;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an internal texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setExternalTexture(name: string, texture: ExternalTexture): ShaderMaterial {\r\n        if (this._options.externalTextures.indexOf(name) === -1) {\r\n            this._options.externalTextures.push(name);\r\n        }\r\n        this._externalTextures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloat(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floats[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._ints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a unsigned int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._uints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an array of floats in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloats(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floatsArrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Color3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3(name: string, value: Color3): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a Color3 array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3Array(name: string, value: Color3[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3Arrays[name] = value.reduce((arr, color) => {\r\n            color.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Color4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4(name: string, value: Color4): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Color4 array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4Array(name: string, value: Color4[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4Arrays[name] = value.reduce((arr, color) => {\r\n            color.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 in the shader from a Vector2.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector2(name: string, value: Vector2): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Vector3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector3(name: string, value: Vector3): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Vector4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector4(name: string, value: Vector4): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Quaternion.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternion(name: string, value: Quaternion): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternions[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Quaternion array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternionArray(name: string, value: Quaternion[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\r\n            quaternion.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat4 in the shader from a Matrix.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix(name: string, value: Matrix): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float32Array in the shader from a matrix array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrices(name: string, value: Matrix[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n\r\n        const float32Array = new Float32Array(value.length * 16);\r\n\r\n        for (let index = 0; index < value.length; index++) {\r\n            const matrix = value[index];\r\n\r\n            matrix.copyToArray(float32Array, index * 16);\r\n        }\r\n\r\n        this._matrixArrays[name] = float32Array;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat3 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix3x3(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices3x3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat2 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix2x2(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices2x2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray2(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray3(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray4(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a uniform buffer in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUniformBuffer(name: string, buffer: UniformBuffer): ShaderMaterial {\r\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\r\n            this._options.uniformBuffers.push(name);\r\n        }\r\n        this._uniformBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture sampler in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param sampler Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureSampler(name: string, sampler: TextureSampler): ShaderMaterial {\r\n        if (this._options.samplerObjects.indexOf(name) === -1) {\r\n            this._options.samplerObjects.push(name);\r\n        }\r\n        this._textureSamplers[name] = sampler;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a storage buffer in the shader\r\n     * @param name Define the name of the storage buffer as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setStorageBuffer(name: string, buffer: StorageBuffer): ShaderMaterial {\r\n        if (this._options.storageBuffers.indexOf(name) === -1) {\r\n            this._options.storageBuffers.push(name);\r\n        }\r\n        this._storageBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds, removes, or replaces the specified shader define and value.\r\n     * * setDefine(\"MY_DEFINE\", true); // enables a boolean define\r\n     * * setDefine(\"MY_DEFINE\", \"0.5\"); // adds \"#define MY_DEFINE 0.5\" to the shader (or sets and replaces the value of any existing define with that name)\r\n     * * setDefine(\"MY_DEFINE\", false); // disables and removes the define\r\n     * Note if the active defines do change, the shader will be recompiled and this can be expensive.\r\n     * @param define the define name e.g., \"OUTPUT_TO_SRGB\" or \"#define OUTPUT_TO_SRGB\". If the define was passed into the constructor already, the version used should match that, and in either case, it should not include any appended value.\r\n     * @param value either the value of the define (e.g. a numerical value) or for booleans, true if the define should be enabled or false if it should be disabled\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setDefine(define: string, value: boolean | string): ShaderMaterial {\r\n        // First remove any existing define with this name.\r\n        const defineName = define.trimEnd() + \" \";\r\n        const existingDefineIdx = this.options.defines.findIndex((x) => x === define || x.startsWith(defineName));\r\n        if (existingDefineIdx >= 0) {\r\n            this.options.defines.splice(existingDefineIdx, 1);\r\n        }\r\n\r\n        // Then add the new define value. (If it's a boolean value and false, don't add it.)\r\n        if (typeof value !== \"boolean\" || value) {\r\n            this.options.defines.push(defineName + value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        return this.isReady(mesh, useInstances, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested mesh\r\n     * @param mesh Define the mesh to render\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @param subMesh defines which submesh to render\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean, subMesh?: SubMesh): boolean {\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n\r\n        if (this.isFrozen) {\r\n            const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Instances\r\n        const defines = [];\r\n        const attribs = [];\r\n        const fallbacks = new EffectFallbacks();\r\n\r\n        let shaderName = this._shaderPath,\r\n            uniforms = this._options.uniforms,\r\n            uniformBuffers = this._options.uniformBuffers,\r\n            samplers = this._options.samplers;\r\n\r\n        // global multiview\r\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\r\n            this._multiview = true;\r\n            defines.push(\"#define MULTIVIEW\");\r\n            if (uniforms.indexOf(\"viewProjection\") !== -1 && uniforms.indexOf(\"viewProjectionR\") === -1) {\r\n                uniforms.push(\"viewProjectionR\");\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this._options.defines.length; index++) {\r\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\r\n            defines.push(defineToAdd);\r\n        }\r\n\r\n        for (let index = 0; index < this._options.attributes.length; index++) {\r\n            attribs.push(this._options.attributes[index]);\r\n        }\r\n\r\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            if (attribs.indexOf(VertexBuffer.ColorKind) === -1) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n            defines.push(\"#define VERTEXCOLOR\");\r\n        }\r\n\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            PushAttributesForInstances(attribs, this._materialHelperNeedsPreviousMatrices);\r\n            if (mesh?.hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\r\n                    attribs.push(VertexBuffer.ColorInstanceKind);\r\n                    defines.push(\"#define INSTANCESCOLOR\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n\r\n            const skeleton = mesh.skeleton;\r\n\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n            if (skeleton.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n\r\n                if (uniforms.indexOf(\"boneTextureWidth\") === -1) {\r\n                    uniforms.push(\"boneTextureWidth\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\r\n                    this._options.samplers.push(\"boneSampler\");\r\n                }\r\n            } else {\r\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n\r\n                if (uniforms.indexOf(\"mBones\") === -1) {\r\n                    uniforms.push(\"mBones\");\r\n                }\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph\r\n        let numInfluencers = 0;\r\n        const manager = mesh ? (<Mesh>mesh).morphTargetManager : null;\r\n        if (manager) {\r\n            const uv = manager.supportsUVs && defines.indexOf(\"#define UV1\") !== -1;\r\n            const tangent = manager.supportsTangents && defines.indexOf(\"#define TANGENT\") !== -1;\r\n            const normal = manager.supportsNormals && defines.indexOf(\"#define NORMAL\") !== -1;\r\n            numInfluencers = manager.numMaxInfluencers || manager.numInfluencers;\r\n            if (uv) {\r\n                defines.push(\"#define MORPHTARGETS_UV\");\r\n            }\r\n            if (tangent) {\r\n                defines.push(\"#define MORPHTARGETS_TANGENT\");\r\n            }\r\n            if (normal) {\r\n                defines.push(\"#define MORPHTARGETS_NORMAL\");\r\n            }\r\n            if (numInfluencers > 0) {\r\n                defines.push(\"#define MORPHTARGETS\");\r\n            }\r\n            if (manager.isUsingTextureForTargets) {\r\n                defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n\r\n                if (uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\r\n                    uniforms.push(\"morphTargetTextureIndices\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\r\n                    this._options.samplers.push(\"morphTargets\");\r\n                }\r\n            }\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numInfluencers);\r\n            for (let index = 0; index < numInfluencers; index++) {\r\n                attribs.push(VertexBuffer.PositionKind + index);\r\n\r\n                if (normal) {\r\n                    attribs.push(VertexBuffer.NormalKind + index);\r\n                }\r\n\r\n                if (tangent) {\r\n                    attribs.push(VertexBuffer.TangentKind + index);\r\n                }\r\n\r\n                if (uv) {\r\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n            }\r\n            if (numInfluencers > 0) {\r\n                uniforms = uniforms.slice();\r\n                uniforms.push(\"morphTargetInfluences\");\r\n                uniforms.push(\"morphTargetCount\");\r\n                uniforms.push(\"morphTargetTextureInfo\");\r\n                uniforms.push(\"morphTargetTextureIndices\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Baked Vertex Animation\r\n        if (mesh) {\r\n            const bvaManager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n                if (uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationSettings\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTime\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\r\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\r\n                }\r\n            }\r\n\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n        }\r\n\r\n        // Textures\r\n        for (const name in this._textures) {\r\n            if (!this._textures[name].isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Alpha test\r\n        if (mesh && this._shouldTurnAlphaTestOn(mesh)) {\r\n            defines.push(\"#define ALPHATEST\");\r\n        }\r\n\r\n        // Clip planes\r\n        if (this._options.useClipPlane !== false) {\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            prepareStringDefinesForClipPlanes(this, scene, defines);\r\n        }\r\n\r\n        // Fog\r\n        if (scene.fogEnabled && mesh?.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            defines.push(\"#define FOG\");\r\n            if (uniforms.indexOf(\"view\") === -1) {\r\n                uniforms.push(\"view\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogInfos\") === -1) {\r\n                uniforms.push(\"vFogInfos\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogColor\") === -1) {\r\n                uniforms.push(\"vFogColor\");\r\n            }\r\n        }\r\n\r\n        // Misc\r\n        if (this._useLogarithmicDepth) {\r\n            defines.push(\"#define LOGARITHMICDEPTH\");\r\n            if (uniforms.indexOf(\"logarithmicDepthConstant\") === -1) {\r\n                uniforms.push(\"logarithmicDepthConstant\");\r\n            }\r\n        }\r\n\r\n        if (this.customShaderNameResolve) {\r\n            uniforms = uniforms.slice();\r\n            uniformBuffers = uniformBuffers.slice();\r\n            samplers = samplers.slice();\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs);\r\n        }\r\n\r\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper(undefined, true) : this._drawWrapper;\r\n        const previousEffect = drawWrapper?.effect ?? null;\r\n        const previousDefines = drawWrapper?.defines ?? null;\r\n        const join = defines.join(\"\\n\");\r\n\r\n        let effect = previousEffect;\r\n        if (previousDefines !== join) {\r\n            effect = engine.createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\r\n                    shaderLanguage: this._options.shaderLanguage,\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (storeEffectOnSubMeshes) {\r\n                subMesh.setEffect(effect, join, this._materialContext);\r\n            } else if (drawWrapper) {\r\n                drawWrapper.setEffect(effect, join);\r\n            }\r\n\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        if (!effect?.isReady() ?? true) {\r\n            return false;\r\n        }\r\n\r\n        if (previousEffect !== effect) {\r\n            scene.resetCachedMaterial();\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     */\r\n    public bindOnlyWorldMatrix(world: Matrix, effectOverride?: Nullable<Effect>): void {\r\n        const scene = this.getScene();\r\n\r\n        const effect = effectOverride ?? this.getEffect();\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"world\") !== -1) {\r\n            effect.setMatrix(\"world\", world);\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"worldView\") !== -1) {\r\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\r\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"worldViewProjection\") !== -1) {\r\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\r\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"view\") !== -1) {\r\n            effect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bind(world: Matrix, mesh?: Mesh, effectOverride?: Nullable<Effect>, subMesh?: SubMesh): void {\r\n        // Std values\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n\r\n        this._activeEffect = effect;\r\n\r\n        this.bindOnlyWorldMatrix(world, effectOverride);\r\n\r\n        const uniformBuffers = this._options.uniformBuffers;\r\n\r\n        let useSceneUBO = false;\r\n\r\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && scene.getEngine().supportsUniformBuffers) {\r\n            for (let i = 0; i < uniformBuffers.length; ++i) {\r\n                const bufferName = uniformBuffers[i];\r\n                switch (bufferName) {\r\n                    case \"Mesh\":\r\n                        if (mesh) {\r\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                            mesh.transferToEffect(world);\r\n                        }\r\n                        break;\r\n                    case \"Scene\":\r\n                        BindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\r\n                        scene.finalizeSceneUbo();\r\n                        useSceneUBO = true;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(scene, effect, subMesh, mesh.visibility) : scene.getCachedMaterial() !== this;\r\n\r\n        if (effect && mustRebind) {\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\r\n                effect.setMatrix(\"view\", scene.getViewMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\r\n                effect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\r\n                effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                if (this._multiview) {\r\n                    effect.setMatrix(\"viewProjectionR\", scene._transformMatrixR);\r\n                }\r\n            }\r\n\r\n            if (scene.activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\r\n                effect.setVector3(\"cameraPosition\", scene.activeCamera!.globalPosition);\r\n            }\r\n\r\n            // Bones\r\n            BindBonesParameters(mesh, effect);\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Misc\r\n            if (this._useLogarithmicDepth) {\r\n                BindLogDepth(storeEffectOnSubMeshes ? subMesh.materialDefines : effect.defines, effect, scene);\r\n            }\r\n\r\n            // Fog\r\n            if (mesh) {\r\n                BindFogParameters(scene, mesh, effect);\r\n            }\r\n\r\n            let name: string;\r\n            // Texture\r\n            for (name in this._textures) {\r\n                effect.setTexture(name, this._textures[name]);\r\n            }\r\n\r\n            // Texture arrays\r\n            for (name in this._textureArrays) {\r\n                effect.setTextureArray(name, this._textureArrays[name]);\r\n            }\r\n\r\n            // External texture\r\n            for (name in this._externalTextures) {\r\n                effect.setExternalTexture(name, this._externalTextures[name]);\r\n            }\r\n\r\n            // Int\r\n            for (name in this._ints) {\r\n                effect.setInt(name, this._ints[name]);\r\n            }\r\n\r\n            // UInt\r\n            for (name in this._uints) {\r\n                effect.setUInt(name, this._uints[name]);\r\n            }\r\n\r\n            // Float\r\n            for (name in this._floats) {\r\n                effect.setFloat(name, this._floats[name]);\r\n            }\r\n\r\n            // Floats\r\n            for (name in this._floatsArrays) {\r\n                effect.setArray(name, this._floatsArrays[name]);\r\n            }\r\n\r\n            // Color3\r\n            for (name in this._colors3) {\r\n                effect.setColor3(name, this._colors3[name]);\r\n            }\r\n\r\n            // Color3Array\r\n            for (name in this._colors3Arrays) {\r\n                effect.setArray3(name, this._colors3Arrays[name]);\r\n            }\r\n\r\n            // Color4\r\n            for (name in this._colors4) {\r\n                const color = this._colors4[name];\r\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\r\n            }\r\n\r\n            // Color4Array\r\n            for (name in this._colors4Arrays) {\r\n                effect.setArray4(name, this._colors4Arrays[name]);\r\n            }\r\n\r\n            // Vector2\r\n            for (name in this._vectors2) {\r\n                effect.setVector2(name, this._vectors2[name]);\r\n            }\r\n\r\n            // Vector3\r\n            for (name in this._vectors3) {\r\n                effect.setVector3(name, this._vectors3[name]);\r\n            }\r\n\r\n            // Vector4\r\n            for (name in this._vectors4) {\r\n                effect.setVector4(name, this._vectors4[name]);\r\n            }\r\n\r\n            // Quaternion\r\n            for (name in this._quaternions) {\r\n                effect.setQuaternion(name, this._quaternions[name]);\r\n            }\r\n\r\n            // Matrix\r\n            for (name in this._matrices) {\r\n                effect.setMatrix(name, this._matrices[name]);\r\n            }\r\n\r\n            // MatrixArray\r\n            for (name in this._matrixArrays) {\r\n                effect.setMatrices(name, this._matrixArrays[name]);\r\n            }\r\n\r\n            // Matrix 3x3\r\n            for (name in this._matrices3x3) {\r\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\r\n            }\r\n\r\n            // Matrix 2x2\r\n            for (name in this._matrices2x2) {\r\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\r\n            }\r\n\r\n            // Vector2Array\r\n            for (name in this._vectors2Arrays) {\r\n                effect.setArray2(name, this._vectors2Arrays[name]);\r\n            }\r\n\r\n            // Vector3Array\r\n            for (name in this._vectors3Arrays) {\r\n                effect.setArray3(name, this._vectors3Arrays[name]);\r\n            }\r\n\r\n            // Vector4Array\r\n            for (name in this._vectors4Arrays) {\r\n                effect.setArray4(name, this._vectors4Arrays[name]);\r\n            }\r\n\r\n            // QuaternionArray\r\n            for (name in this._quaternionsArrays) {\r\n                effect.setArray4(name, this._quaternionsArrays[name]);\r\n            }\r\n\r\n            // Uniform buffers\r\n            for (name in this._uniformBuffers) {\r\n                const buffer = this._uniformBuffers[name].getBuffer();\r\n                if (buffer) {\r\n                    effect.bindUniformBuffer(buffer, name);\r\n                }\r\n            }\r\n\r\n            // Samplers\r\n            for (name in this._textureSamplers) {\r\n                effect.setTextureSampler(name, this._textureSamplers[name]);\r\n            }\r\n\r\n            // Storage buffers\r\n            for (name in this._storageBuffers) {\r\n                effect.setStorageBuffer(name, this._storageBuffers[name]);\r\n            }\r\n        }\r\n\r\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\r\n            // Morph targets\r\n            const manager = (<Mesh>mesh).morphTargetManager;\r\n            if (manager && manager.numInfluencers > 0) {\r\n                BindMorphTargetParameters(<Mesh>mesh, effect);\r\n            }\r\n\r\n            const bvaManager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n                mesh.bakedVertexAnimationManager?.bind(effect, !!drawWrapper._wasPreviouslyUsingInstances);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        for (const name in this._textures) {\r\n            activeTextures.push(this._textures[name]);\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                activeTextures.push(array[index]);\r\n            }\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (const name in this._textures) {\r\n            if (this._textures[name] === texture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                if (array[index] === texture) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string): ShaderMaterial {\r\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        // Shader code path\r\n        if (typeof result._shaderPath === \"object\") {\r\n            result._shaderPath = { ...result._shaderPath };\r\n        }\r\n\r\n        // Options\r\n        this._options = { ...this._options };\r\n\r\n        (Object.keys(this._options) as Array<keyof IShaderMaterialOptions>).forEach((propName) => {\r\n            const propValue = this._options[propName];\r\n            if (Array.isArray(propValue)) {\r\n                (<string[]>this._options[propName]) = propValue.slice(0);\r\n            }\r\n        });\r\n\r\n        // Stencil\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        // Texture\r\n        for (const key in this._textures) {\r\n            result.setTexture(key, this._textures[key]);\r\n        }\r\n\r\n        // TextureArray\r\n        for (const key in this._textureArrays) {\r\n            result.setTextureArray(key, this._textureArrays[key]);\r\n        }\r\n\r\n        // External texture\r\n        for (const key in this._externalTextures) {\r\n            result.setExternalTexture(key, this._externalTextures[key]);\r\n        }\r\n\r\n        // Int\r\n        for (const key in this._ints) {\r\n            result.setInt(key, this._ints[key]);\r\n        }\r\n\r\n        // UInt\r\n        for (const key in this._uints) {\r\n            result.setUInt(key, this._uints[key]);\r\n        }\r\n\r\n        // Float\r\n        for (const key in this._floats) {\r\n            result.setFloat(key, this._floats[key]);\r\n        }\r\n\r\n        // Floats\r\n        for (const key in this._floatsArrays) {\r\n            result.setFloats(key, this._floatsArrays[key]);\r\n        }\r\n\r\n        // Color3\r\n        for (const key in this._colors3) {\r\n            result.setColor3(key, this._colors3[key]);\r\n        }\r\n\r\n        // Color3Array\r\n        for (const key in this._colors3Arrays) {\r\n            result._colors3Arrays[key] = this._colors3Arrays[key];\r\n        }\r\n\r\n        // Color4\r\n        for (const key in this._colors4) {\r\n            result.setColor4(key, this._colors4[key]);\r\n        }\r\n\r\n        // Color4Array\r\n        for (const key in this._colors4Arrays) {\r\n            result._colors4Arrays[key] = this._colors4Arrays[key];\r\n        }\r\n\r\n        // Vector2\r\n        for (const key in this._vectors2) {\r\n            result.setVector2(key, this._vectors2[key]);\r\n        }\r\n\r\n        // Vector3\r\n        for (const key in this._vectors3) {\r\n            result.setVector3(key, this._vectors3[key]);\r\n        }\r\n\r\n        // Vector4\r\n        for (const key in this._vectors4) {\r\n            result.setVector4(key, this._vectors4[key]);\r\n        }\r\n\r\n        // Quaternion\r\n        for (const key in this._quaternions) {\r\n            result.setQuaternion(key, this._quaternions[key]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (const key in this._quaternionsArrays) {\r\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\r\n        }\r\n\r\n        // Matrix\r\n        for (const key in this._matrices) {\r\n            result.setMatrix(key, this._matrices[key]);\r\n        }\r\n\r\n        // MatrixArray\r\n        for (const key in this._matrixArrays) {\r\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (const key in this._matrices3x3) {\r\n            result.setMatrix3x3(key, this._matrices3x3[key]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (const key in this._matrices2x2) {\r\n            result.setMatrix2x2(key, this._matrices2x2[key]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (const key in this._vectors2Arrays) {\r\n            result.setArray2(key, this._vectors2Arrays[key]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (const key in this._vectors3Arrays) {\r\n            result.setArray3(key, this._vectors3Arrays[key]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (const key in this._vectors4Arrays) {\r\n            result.setArray4(key, this._vectors4Arrays[key]);\r\n        }\r\n\r\n        // Uniform buffers\r\n        for (const key in this._uniformBuffers) {\r\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\r\n        }\r\n\r\n        // Samplers\r\n        for (const key in this._textureSamplers) {\r\n            result.setTextureSampler(key, this._textureSamplers[key]);\r\n        }\r\n\r\n        // Storag buffers\r\n        for (const key in this._storageBuffers) {\r\n            result.setStorageBuffer(key, this._storageBuffers[key]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            let name: string;\r\n            for (name in this._textures) {\r\n                this._textures[name].dispose();\r\n            }\r\n\r\n            for (name in this._textureArrays) {\r\n                const array = this._textureArrays[name];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    array[index].dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._textures = {};\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        serializationObject.options = this._options;\r\n        serializationObject.shaderPath = this._shaderPath;\r\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        serializationObject.stencil = this.stencil.serialize();\r\n\r\n        // Texture\r\n        serializationObject.textures = {};\r\n        for (name in this._textures) {\r\n            serializationObject.textures[name] = this._textures[name].serialize();\r\n        }\r\n\r\n        // Texture arrays\r\n        serializationObject.textureArrays = {};\r\n        for (name in this._textureArrays) {\r\n            serializationObject.textureArrays[name] = [];\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                serializationObject.textureArrays[name].push(array[index].serialize());\r\n            }\r\n        }\r\n\r\n        // Int\r\n        serializationObject.ints = {};\r\n        for (name in this._ints) {\r\n            serializationObject.ints[name] = this._ints[name];\r\n        }\r\n\r\n        // UInt\r\n        serializationObject.uints = {};\r\n        for (name in this._uints) {\r\n            serializationObject.uints[name] = this._uints[name];\r\n        }\r\n\r\n        // Float\r\n        serializationObject.floats = {};\r\n        for (name in this._floats) {\r\n            serializationObject.floats[name] = this._floats[name];\r\n        }\r\n\r\n        // Floats\r\n        serializationObject.floatsArrays = {};\r\n        for (name in this._floatsArrays) {\r\n            serializationObject.floatsArrays[name] = this._floatsArrays[name];\r\n        }\r\n\r\n        // Color3\r\n        serializationObject.colors3 = {};\r\n        for (name in this._colors3) {\r\n            serializationObject.colors3[name] = this._colors3[name].asArray();\r\n        }\r\n\r\n        // Color3 array\r\n        serializationObject.colors3Arrays = {};\r\n        for (name in this._colors3Arrays) {\r\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\r\n        }\r\n\r\n        // Color4\r\n        serializationObject.colors4 = {};\r\n        for (name in this._colors4) {\r\n            serializationObject.colors4[name] = this._colors4[name].asArray();\r\n        }\r\n\r\n        // Color4 array\r\n        serializationObject.colors4Arrays = {};\r\n        for (name in this._colors4Arrays) {\r\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\r\n        }\r\n\r\n        // Vector2\r\n        serializationObject.vectors2 = {};\r\n        for (name in this._vectors2) {\r\n            serializationObject.vectors2[name] = this._vectors2[name].asArray();\r\n        }\r\n\r\n        // Vector3\r\n        serializationObject.vectors3 = {};\r\n        for (name in this._vectors3) {\r\n            serializationObject.vectors3[name] = this._vectors3[name].asArray();\r\n        }\r\n\r\n        // Vector4\r\n        serializationObject.vectors4 = {};\r\n        for (name in this._vectors4) {\r\n            serializationObject.vectors4[name] = this._vectors4[name].asArray();\r\n        }\r\n\r\n        // Quaternion\r\n        serializationObject.quaternions = {};\r\n        for (name in this._quaternions) {\r\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\r\n        }\r\n\r\n        // Matrix\r\n        serializationObject.matrices = {};\r\n        for (name in this._matrices) {\r\n            serializationObject.matrices[name] = this._matrices[name].asArray();\r\n        }\r\n\r\n        // MatrixArray\r\n        serializationObject.matrixArray = {};\r\n        for (name in this._matrixArrays) {\r\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\r\n        }\r\n\r\n        // Matrix 3x3\r\n        serializationObject.matrices3x3 = {};\r\n        for (name in this._matrices3x3) {\r\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\r\n        }\r\n\r\n        // Matrix 2x2\r\n        serializationObject.matrices2x2 = {};\r\n        for (name in this._matrices2x2) {\r\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\r\n        }\r\n\r\n        // Vector2Array\r\n        serializationObject.vectors2Arrays = {};\r\n        for (name in this._vectors2Arrays) {\r\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\r\n        }\r\n\r\n        // Vector3Array\r\n        serializationObject.vectors3Arrays = {};\r\n        for (name in this._vectors3Arrays) {\r\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\r\n        }\r\n\r\n        // Vector4Array\r\n        serializationObject.vectors4Arrays = {};\r\n        for (name in this._vectors4Arrays) {\r\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\r\n        }\r\n\r\n        // QuaternionArray\r\n        serializationObject.quaternionsArrays = {};\r\n        for (name in this._quaternionsArrays) {\r\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a shader material from parsed shader material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShaderMaterial {\r\n        const material = SerializationHelper.Parse(\r\n            () => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes),\r\n            source,\r\n            scene,\r\n            rootUrl\r\n        );\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        // Texture\r\n        for (name in source.textures) {\r\n            material.setTexture(name, <Texture>Texture.Parse(source.textures[name], scene, rootUrl));\r\n        }\r\n\r\n        // Texture arrays\r\n        for (name in source.textureArrays) {\r\n            const array = source.textureArrays[name];\r\n            const textureArray: Texture[] = [];\r\n\r\n            for (let index = 0; index < array.length; index++) {\r\n                textureArray.push(<Texture>Texture.Parse(array[index], scene, rootUrl));\r\n            }\r\n            material.setTextureArray(name, textureArray);\r\n        }\r\n\r\n        // Int\r\n        for (name in source.ints) {\r\n            material.setInt(name, source.ints[name]);\r\n        }\r\n\r\n        // UInt\r\n        for (name in source.uints) {\r\n            material.setUInt(name, source.uints[name]);\r\n        }\r\n\r\n        // Float\r\n        for (name in source.floats) {\r\n            material.setFloat(name, source.floats[name]);\r\n        }\r\n\r\n        // Floats\r\n        for (name in source.floatsArrays) {\r\n            material.setFloats(name, source.floatsArrays[name]);\r\n        }\r\n\r\n        // Color3\r\n        for (name in source.colors3) {\r\n            material.setColor3(name, Color3.FromArray(source.colors3[name]));\r\n        }\r\n\r\n        // Color3 arrays\r\n        for (name in source.colors3Arrays) {\r\n            const colors: Color3[] = source.colors3Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 3 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => Color3.FromArray(color));\r\n            material.setColor3Array(name, colors);\r\n        }\r\n\r\n        // Color4\r\n        for (name in source.colors4) {\r\n            material.setColor4(name, Color4.FromArray(source.colors4[name]));\r\n        }\r\n\r\n        // Color4 arrays\r\n        for (name in source.colors4Arrays) {\r\n            const colors: Color4[] = source.colors4Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 4 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => Color4.FromArray(color));\r\n            material.setColor4Array(name, colors);\r\n        }\r\n\r\n        // Vector2\r\n        for (name in source.vectors2) {\r\n            material.setVector2(name, Vector2.FromArray(source.vectors2[name]));\r\n        }\r\n\r\n        // Vector3\r\n        for (name in source.vectors3) {\r\n            material.setVector3(name, Vector3.FromArray(source.vectors3[name]));\r\n        }\r\n\r\n        // Vector4\r\n        for (name in source.vectors4) {\r\n            material.setVector4(name, Vector4.FromArray(source.vectors4[name]));\r\n        }\r\n\r\n        // Quaternion\r\n        for (name in source.quaternions) {\r\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\r\n        }\r\n\r\n        // Matrix\r\n        for (name in source.matrices) {\r\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\r\n        }\r\n\r\n        // MatrixArray\r\n        for (name in source.matrixArray) {\r\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (name in source.matrices3x3) {\r\n            material.setMatrix3x3(name, source.matrices3x3[name]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (name in source.matrices2x2) {\r\n            material.setMatrix2x2(name, source.matrices2x2[name]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (name in source.vectors2Arrays) {\r\n            material.setArray2(name, source.vectors2Arrays[name]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (name in source.vectors3Arrays) {\r\n            material.setArray3(name, source.vectors3Arrays[name]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (name in source.vectors4Arrays) {\r\n            material.setArray4(name, source.vectors4Arrays[name]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (name in source.quaternionsArrays) {\r\n            material.setArray4(name, source.quaternionsArrays[name]);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\r\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const serializationObject = JSON.parse(request.responseText);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        if (name) {\r\n                            output.name = name;\r\n                        }\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        reject(\"Unable to load the ShaderMaterial\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static ParseFromSnippetAsync(snippetId: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        output.snippetId = snippetId;\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\r\n", "import { serializeAsColor3, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Light } from \"./light\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_3\", (name, scene) => {\r\n    return () => new HemisphericLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * The HemisphericLight simulates the ambient environment light,\r\n * so the passed direction is the light reflection direction, not the incoming direction.\r\n */\r\nexport class HemisphericLight extends Light {\r\n    /**\r\n     * The groundColor is the light in the opposite direction to the one specified during creation.\r\n     * You can think of the diffuse and specular light as coming from the centre of the object in the given direction and the groundColor light in the opposite direction.\r\n     */\r\n    @serializeAsColor3()\r\n    public groundColor = new Color3(0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * The light reflection direction, not the incoming direction.\r\n     */\r\n    @serializeAsVector3()\r\n    public direction: Vector3;\r\n\r\n    /**\r\n     * Creates a HemisphericLight object in the scene according to the passed direction (Vector3).\r\n     * The HemisphericLight simulates the ambient environment light, so the passed direction is the light reflection direction, not the incoming direction.\r\n     * The HemisphericLight can't cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light reflection\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.direction = direction || Vector3.Up();\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightGround\", 3);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"HemisphericLight\".\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"HemisphericLight\";\r\n    }\r\n\r\n    /**\r\n     * Sets the HemisphericLight direction towards the passed target (Vector3).\r\n     * Returns the updated direction.\r\n     * @param target The target the direction should point to\r\n     * @returns The computed direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(Vector3.Zero()));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the shadow generator associated to the light.\r\n     * @returns Always null for hemispheric lights because it does not support shadows.\r\n     */\r\n    public getShadowGenerator(): Nullable<IShadowGenerator> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).\r\n     * @param _effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The hemispheric light\r\n     */\r\n    public transferToEffect(_effect: Effect, lightIndex: string): HemisphericLight {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, 0.0, lightIndex);\r\n        this._uniformBuffer.updateColor3(\"vLightGround\", this.groundColor.scale(this.intensity), lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 3.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"HEMILIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n", "import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { Nullable } from \"core/types\";\r\n/**\r\n * Interface describing all the common properties and methods a shadow light needs to implement.\r\n * This helps both the shadow generator and materials to generate the corresponding shadow maps\r\n * as well as binding the different shadow properties to the effects.\r\n */\r\nexport interface IShadowLight extends Light {\r\n    /**\r\n     * The light id in the scene (used in scene.getLightById for instance)\r\n     */\r\n    id: string;\r\n    /**\r\n     * The position the shadow will be casted from.\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * In 2d mode (needCube being false), the direction used to cast the shadow.\r\n     */\r\n    direction: Vector3;\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    transformedPosition: Vector3;\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    transformedDirection: Vector3;\r\n    /**\r\n     * The friendly name of the light in the scene.\r\n     */\r\n    name: string;\r\n    /**\r\n     * Defines the shadow projection clipping minimum z value.\r\n     */\r\n    shadowMinZ: number;\r\n    /**\r\n     * Defines the shadow projection clipping maximum z value.\r\n     */\r\n    shadowMaxZ: number;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    computeTransformedInformation(): boolean;\r\n\r\n    /**\r\n     * Gets the scene the light belongs to.\r\n     * @returns The scene\r\n     */\r\n    getScene(): Scene;\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The matrix to update with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight;\r\n\r\n    /**\r\n     * Gets the current depth scale used in ESM.\r\n     * @returns The scale\r\n     */\r\n    getDepthScale(): number;\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    needCube(): boolean;\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    needProjectionMatrixCompute(): boolean;\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    forceProjectionMatrixCompute(): void;\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    getShadowDirection(faceIndex?: number): Vector3;\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    getDepthMinZ(activeCamera: Camera): number;\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    getDepthMaxZ(activeCamera: Camera): number;\r\n}\r\n\r\n/**\r\n * Base implementation IShadowLight\r\n * It groups all the common behaviour in order to reduce duplication and better follow the DRY pattern.\r\n */\r\nexport abstract class ShadowLight extends Light implements IShadowLight {\r\n    protected abstract _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void;\r\n\r\n    protected _position: Vector3;\r\n    protected _setPosition(value: Vector3) {\r\n        this._position = value;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._setPosition(value);\r\n    }\r\n\r\n    protected _direction: Vector3;\r\n    protected _setDirection(value: Vector3) {\r\n        this._direction = value;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), gets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), sets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    public set direction(value: Vector3) {\r\n        this._setDirection(value);\r\n    }\r\n\r\n    protected _shadowMinZ: number;\r\n    /**\r\n     * Gets the shadow projection clipping minimum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMinZ(): number {\r\n        return this._shadowMinZ;\r\n    }\r\n    /**\r\n     * Sets the shadow projection clipping minimum z value.\r\n     */\r\n    public set shadowMinZ(value: number) {\r\n        this._shadowMinZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    protected _shadowMaxZ: number;\r\n    /**\r\n     * Sets the shadow projection clipping maximum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMaxZ(): number {\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Gets the shadow projection clipping maximum z value.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        this._shadowMaxZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    public customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account. Needs to be computed by calling computeTransformedInformation.\r\n     */\r\n    public transformedPosition: Vector3;\r\n\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    public transformedDirection: Vector3;\r\n\r\n    private _needProjectionMatrixCompute: boolean = true;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    public computeTransformedInformation(): boolean {\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            if (!this.transformedPosition) {\r\n                this.transformedPosition = Vector3.Zero();\r\n            }\r\n            Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition);\r\n\r\n            // In case the direction is present.\r\n            if (this.direction) {\r\n                if (!this.transformedDirection) {\r\n                    this.transformedDirection = Vector3.Zero();\r\n                }\r\n                Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the depth scale used for the shadow map.\r\n     * @returns the depth scale.\r\n     */\r\n    public getDepthScale(): number {\r\n        return 50.0;\r\n    }\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        return this.transformedDirection ? this.transformedDirection : this.direction;\r\n    }\r\n\r\n    /**\r\n     * If computeTransformedInformation has been called, returns the ShadowLight absolute position in the world. Otherwise, returns the local position.\r\n     * @returns the position vector in world space\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return this.transformedPosition ? this.transformedPosition : this.position;\r\n    }\r\n\r\n    /**\r\n     * Sets the ShadowLight direction toward the passed target.\r\n     * @param target The point to target in local space\r\n     * @returns the updated ShadowLight direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(this.position));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the light rotation in euler definition.\r\n     * @returns the x y z rotation in local space.\r\n     */\r\n    public getRotation(): Vector3 {\r\n        this.direction.normalize();\r\n        const xaxis = Vector3.Cross(this.direction, Axis.Y);\r\n        const yaxis = Vector3.Cross(xaxis, this.direction);\r\n        return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    public needCube(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    public needProjectionMatrixCompute(): boolean {\r\n        return this._needProjectionMatrixCompute;\r\n    }\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    public forceProjectionMatrixCompute(): void {\r\n        this._needProjectionMatrixCompute = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = Vector3.Zero();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        if (!this._cache.position.equals(this.position)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(force?: boolean): Matrix {\r\n        if (!force && this.isSynchronized()) {\r\n            this._currentRenderId = this.getScene().getRenderId();\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        this._updateCache();\r\n        this._cache.position.copyFrom(this.position);\r\n\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\r\n\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\r\n\r\n            this._markSyncedWithParent();\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n    }\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The matrix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    public setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight {\r\n        if (this.customProjectionMatrixBuilder) {\r\n            this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\r\n        } else {\r\n            this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        super._syncParentEnabledState();\r\n        if (!this.parent || !this.parent.getWorldMatrix) {\r\n            (this.transformedPosition as any) = null;\r\n            (this.transformedDirection as any) = null;\r\n        }\r\n    }\r\n\r\n    protected _viewMatrix: Matrix = Matrix.Identity();\r\n    protected _projectionMatrix: Matrix = Matrix.Identity();\r\n\r\n    /**\r\n     * Returns the view matrix.\r\n     * @param faceIndex The index of the face for which we want to extract the view matrix. Only used for point light types.\r\n     * @returns The view matrix. Can be null, if a view matrix cannot be defined for the type of light considered (as for a hemispherical light, for example).\r\n     */\r\n    public getViewMatrix(faceIndex?: number): Nullable<Matrix> {\r\n        const lightDirection = TmpVectors.Vector3[0];\r\n\r\n        let lightPosition = this.position;\r\n        if (this.computeTransformedInformation()) {\r\n            lightPosition = this.transformedPosition;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this.getShadowDirection(faceIndex), lightDirection);\r\n        if (Math.abs(Vector3.Dot(lightDirection, Vector3.Up())) === 1.0) {\r\n            lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        const lightTarget = TmpVectors.Vector3[1];\r\n        lightPosition.addToRef(lightDirection, lightTarget);\r\n\r\n        Matrix.LookAtLHToRef(lightPosition, lightTarget, Vector3.Up(), this._viewMatrix);\r\n\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Returns the projection matrix.\r\n     * Note that viewMatrix and renderList are optional and are only used by lights that calculate the projection matrix from a list of meshes (e.g. directional lights with automatic extents calculation).\r\n     * @param viewMatrix The view transform matrix of the light (optional).\r\n     * @param renderList The list of meshes to take into account when calculating the projection matrix (optional).\r\n     * @returns The projection matrix. Can be null, if a projection matrix cannot be defined for the type of light considered (as for a hemispherical light, for example).\r\n     */\r\n    public getProjectionMatrix(viewMatrix?: Matrix, renderList?: Array<AbstractMesh>): Nullable<Matrix> {\r\n        this.setShadowProjectionMatrix(this._projectionMatrix, viewMatrix ?? this._viewMatrix, renderList ?? []);\r\n\r\n        return this._projectionMatrix;\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nNode.AddNodeConstructor(\"Light_Type_1\", (name, scene) => {\r\n    return () => new DirectionalLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A directional light is defined by a direction (what a surprise!).\r\n * The light is emitted from everywhere in the specified direction, and has an infinite range.\r\n * An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class DirectionalLight extends ShadowLight {\r\n    private _shadowFrustumSize = 0;\r\n    /**\r\n     * Fix frustum size for the shadow generation. This is disabled if the value is 0.\r\n     */\r\n    @serialize()\r\n    public get shadowFrustumSize(): number {\r\n        return this._shadowFrustumSize;\r\n    }\r\n    /**\r\n     * Specifies a fix frustum size for the shadow generation.\r\n     */\r\n    public set shadowFrustumSize(value: number) {\r\n        this._shadowFrustumSize = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    private _shadowOrthoScale = 0.1;\r\n    /**\r\n     * Gets the shadow projection scale against the optimal computed one.\r\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\r\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\r\n     */\r\n    @serialize()\r\n    public get shadowOrthoScale(): number {\r\n        return this._shadowOrthoScale;\r\n    }\r\n    /**\r\n     * Sets the shadow projection scale against the optimal computed one.\r\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\r\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\r\n     */\r\n    public set shadowOrthoScale(value: number) {\r\n        this._shadowOrthoScale = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Automatically compute the projection matrix to best fit (including all the casters)\r\n     * on each frame.\r\n     */\r\n    @serialize()\r\n    public autoUpdateExtends = true;\r\n\r\n    /**\r\n     * Automatically compute the shadowMinZ and shadowMaxZ for the projection matrix to best fit (including all the casters)\r\n     * on each frame. autoUpdateExtends must be set to true for this to work\r\n     */\r\n    @serialize()\r\n    public autoCalcShadowZBounds = false;\r\n\r\n    // Cache\r\n    @serialize(\"orthoLeft\")\r\n    private _orthoLeft = Number.MAX_VALUE;\r\n    @serialize(\"orthoRight\")\r\n    private _orthoRight = Number.MIN_VALUE;\r\n    @serialize(\"orthoTop\")\r\n    private _orthoTop = Number.MIN_VALUE;\r\n    @serialize(\"orthoBottom\")\r\n    private _orthoBottom = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Gets or sets the orthoLeft property used to build the light frustum\r\n     */\r\n    public get orthoLeft(): number {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    public set orthoLeft(left: number) {\r\n        this._orthoLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoRight property used to build the light frustum\r\n     */\r\n    public get orthoRight(): number {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    public set orthoRight(right: number) {\r\n        this._orthoRight = right;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoTop property used to build the light frustum\r\n     */\r\n    public get orthoTop(): number {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    public set orthoTop(top: number) {\r\n        this._orthoTop = top;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoBottom property used to build the light frustum\r\n     */\r\n    public get orthoBottom(): number {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    public set orthoBottom(bottom: number) {\r\n        this._orthoBottom = bottom;\r\n    }\r\n\r\n    /**\r\n     * Creates a DirectionalLight object in the scene, oriented towards the passed direction (Vector3).\r\n     * The directional light is emitted from everywhere in the given direction.\r\n     * It can cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = direction.scale(-1.0);\r\n        this.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"DirectionalLight\".\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"DirectionalLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 1.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_DIRECTIONALLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        if (this.shadowFrustumSize > 0) {\r\n            this._setDefaultFixedFrustumShadowProjectionMatrix(matrix);\r\n        } else {\r\n            this._setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as fixed frustum projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     */\r\n    protected _setDefaultFixedFrustumShadowProjectionMatrix(matrix: Matrix): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        Matrix.OrthoLHToRef(\r\n            this.shadowFrustumSize,\r\n            this.shadowFrustumSize,\r\n            this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ,\r\n            this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ,\r\n            matrix,\r\n            this.getScene().getEngine().isNDCHalfZRange\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as auto extend projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    protected _setDefaultAutoExtendShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        // Check extends\r\n        if (this.autoUpdateExtends || this._orthoLeft === Number.MAX_VALUE) {\r\n            const tempVector3 = Vector3.Zero();\r\n\r\n            this._orthoLeft = Number.MAX_VALUE;\r\n            this._orthoRight = -Number.MAX_VALUE;\r\n            this._orthoTop = -Number.MAX_VALUE;\r\n            this._orthoBottom = Number.MAX_VALUE;\r\n\r\n            let shadowMinZ = Number.MAX_VALUE;\r\n            let shadowMaxZ = -Number.MAX_VALUE;\r\n\r\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\r\n                const mesh = renderList[meshIndex];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo();\r\n                const boundingBox = boundingInfo.boundingBox;\r\n\r\n                for (let index = 0; index < boundingBox.vectorsWorld.length; index++) {\r\n                    Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index], viewMatrix, tempVector3);\r\n\r\n                    if (tempVector3.x < this._orthoLeft) {\r\n                        this._orthoLeft = tempVector3.x;\r\n                    }\r\n                    if (tempVector3.y < this._orthoBottom) {\r\n                        this._orthoBottom = tempVector3.y;\r\n                    }\r\n\r\n                    if (tempVector3.x > this._orthoRight) {\r\n                        this._orthoRight = tempVector3.x;\r\n                    }\r\n                    if (tempVector3.y > this._orthoTop) {\r\n                        this._orthoTop = tempVector3.y;\r\n                    }\r\n                    if (this.autoCalcShadowZBounds) {\r\n                        if (tempVector3.z < shadowMinZ) {\r\n                            shadowMinZ = tempVector3.z;\r\n                        }\r\n                        if (tempVector3.z > shadowMaxZ) {\r\n                            shadowMaxZ = tempVector3.z;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.autoCalcShadowZBounds) {\r\n                this._shadowMinZ = shadowMinZ;\r\n                this._shadowMaxZ = shadowMaxZ;\r\n            }\r\n        }\r\n\r\n        const xOffset = this._orthoRight - this._orthoLeft;\r\n        const yOffset = this._orthoTop - this._orthoBottom;\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.OrthoOffCenterLHToRef(\r\n            this._orthoLeft - xOffset * this.shadowOrthoScale,\r\n            this._orthoRight + xOffset * this.shadowOrthoScale,\r\n            this._orthoBottom - yOffset * this.shadowOrthoScale,\r\n            this._orthoTop + yOffset * this.shadowOrthoScale,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            this.getScene().getEngine().isNDCHalfZRange\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the DirectionalLight transformed position (or position if not parented) and the passed name.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The directional light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): DirectionalLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z, 1, lightIndex);\r\n            return this;\r\n        }\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", this.direction.x, this.direction.y, this.direction.z, 1, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string): Light {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z);\r\n            return this;\r\n        }\r\n\r\n        effect.setFloat3(lightDataUniformName, this.direction.x, this.direction.y, this.direction.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     *\r\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\r\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\r\n     * (when not using reverse depth buffer / NDC half Z range)\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        return !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     *\r\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\r\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\r\n     * (when not using reverse depth buffer / NDC half Z range)\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"DIRLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\r\n    return () => new PointLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class PointLight extends ShadowLight {\r\n    private _shadowAngle = Math.PI / 2;\r\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    @serialize()\r\n    public get shadowAngle(): number {\r\n        return this._shadowAngle;\r\n    }\r\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    public set shadowAngle(value: number) {\r\n        this._shadowAngle = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public set direction(value: Vector3) {\r\n        const previousNeedCube = this.needCube();\r\n        this._direction = value;\r\n        if (this.needCube() !== previousNeedCube && this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.recreateShadowMap();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n     * A PointLight emits the light in every direction.\r\n     * It can cast shadows.\r\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n     * ```javascript\r\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n     * ```\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The light friendly name\r\n     * @param position The position of the point light in the scene\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointLight\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 0.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_POINTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the shadowmap should be a cube texture.\r\n     * @returns true if the shadowmap needs to be a cube texture.\r\n     */\r\n    public needCube(): boolean {\r\n        return !this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        if (this.direction) {\r\n            return super.getShadowDirection(faceIndex);\r\n        } else {\r\n            switch (faceIndex) {\r\n                case 0:\r\n                    return new Vector3(1.0, 0.0, 0.0);\r\n                case 1:\r\n                    return new Vector3(-1.0, 0.0, 0.0);\r\n                case 2:\r\n                    return new Vector3(0.0, -1.0, 0.0);\r\n                case 3:\r\n                    return new Vector3(0.0, 1.0, 0.0);\r\n                case 4:\r\n                    return new Vector3(0.0, 0.0, 1.0);\r\n                case 5:\r\n                    return new Vector3(0.0, 0.0, -1.0);\r\n            }\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n     * - fov = PI / 2\r\n     * - aspect ratio : 1.0\r\n     * - z-near and far equal to the active camera minZ and maxZ.\r\n     * Returns the PointLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this.shadowAngle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The point light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): PointLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\r\n        } else {\r\n            effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"POINTLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n", "import { serialize, serializeAsTexture } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_2\", (name, scene) => {\r\n    return () => new SpotLight(name, Vector3.Zero(), Vector3.Zero(), 0, 0, scene);\r\n});\r\n\r\n/**\r\n * A spot light is defined by a position, a direction, an angle, and an exponent.\r\n * These values define a cone of light starting from the position, emitting toward the direction.\r\n * The angle, in radians, defines the size (field of illumination) of the spotlight's conical beam,\r\n * and the exponent defines the speed of the decay of the light with distance (reach).\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class SpotLight extends ShadowLight {\r\n    /*\r\n        upVector , rightVector and direction will form the coordinate system for this spot light.\r\n        These three vectors will be used as projection matrix when doing texture projection.\r\n\r\n        Also we have the following rules always holds:\r\n        direction cross up   = right\r\n        right cross direction = up\r\n        up cross right       = forward\r\n\r\n        light_near and light_far will control the range of the texture projection. If a plane is\r\n        out of the range in spot light space, there is no texture projection.\r\n    */\r\n\r\n    private _angle: number;\r\n    private _innerAngle: number = 0;\r\n    private _cosHalfAngle: number;\r\n\r\n    private _lightAngleScale: number;\r\n    private _lightAngleOffset: number;\r\n\r\n    /**\r\n     * Gets the cone angle of the spot light in Radians.\r\n     */\r\n    @serialize()\r\n    public get angle(): number {\r\n        return this._angle;\r\n    }\r\n    /**\r\n     * Sets the cone angle of the spot light in Radians.\r\n     */\r\n    public set angle(value: number) {\r\n        this._angle = value;\r\n        this._cosHalfAngle = Math.cos(value * 0.5);\r\n        this._projectionTextureProjectionLightDirty = true;\r\n        this.forceProjectionMatrixCompute();\r\n        this._computeAngleValues();\r\n    }\r\n\r\n    /**\r\n     * Only used in gltf falloff mode, this defines the angle where\r\n     * the directional falloff will start before cutting at angle which could be seen\r\n     * as outer angle.\r\n     */\r\n    @serialize()\r\n    public get innerAngle(): number {\r\n        return this._innerAngle;\r\n    }\r\n    /**\r\n     * Only used in gltf falloff mode, this defines the angle where\r\n     * the directional falloff will start before cutting at angle which could be seen\r\n     * as outer angle.\r\n     */\r\n    public set innerAngle(value: number) {\r\n        this._innerAngle = value;\r\n        this._computeAngleValues();\r\n    }\r\n\r\n    private _shadowAngleScale: number;\r\n    /**\r\n     * Allows scaling the angle of the light for shadow generation only.\r\n     */\r\n    @serialize()\r\n    public get shadowAngleScale(): number {\r\n        return this._shadowAngleScale;\r\n    }\r\n    /**\r\n     * Allows scaling the angle of the light for shadow generation only.\r\n     */\r\n    public set shadowAngleScale(value: number) {\r\n        this._shadowAngleScale = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * The light decay speed with the distance from the emission spot.\r\n     */\r\n    @serialize()\r\n    public exponent: number;\r\n\r\n    private _projectionTextureMatrix = Matrix.Zero();\r\n    /**\r\n     * Allows reading the projection texture\r\n     */\r\n    public get projectionTextureMatrix(): Matrix {\r\n        return this._projectionTextureMatrix;\r\n    }\r\n\r\n    protected _projectionTextureLightNear: number = 1e-6;\r\n    /**\r\n     * Gets the near clip of the Spotlight for texture projection.\r\n     */\r\n    @serialize()\r\n    public get projectionTextureLightNear(): number {\r\n        return this._projectionTextureLightNear;\r\n    }\r\n    /**\r\n     * Sets the near clip of the Spotlight for texture projection.\r\n     */\r\n    public set projectionTextureLightNear(value: number) {\r\n        this._projectionTextureLightNear = value;\r\n        this._projectionTextureProjectionLightDirty = true;\r\n    }\r\n\r\n    protected _projectionTextureLightFar: number = 1000.0;\r\n    /**\r\n     * Gets the far clip of the Spotlight for texture projection.\r\n     */\r\n    @serialize()\r\n    public get projectionTextureLightFar(): number {\r\n        return this._projectionTextureLightFar;\r\n    }\r\n    /**\r\n     * Sets the far clip of the Spotlight for texture projection.\r\n     */\r\n    public set projectionTextureLightFar(value: number) {\r\n        this._projectionTextureLightFar = value;\r\n        this._projectionTextureProjectionLightDirty = true;\r\n    }\r\n\r\n    protected _projectionTextureUpDirection: Vector3 = Vector3.Up();\r\n    /**\r\n     * Gets the Up vector of the Spotlight for texture projection.\r\n     */\r\n    @serialize()\r\n    public get projectionTextureUpDirection(): Vector3 {\r\n        return this._projectionTextureUpDirection;\r\n    }\r\n    /**\r\n     * Sets the Up vector of the Spotlight for texture projection.\r\n     */\r\n    public set projectionTextureUpDirection(value: Vector3) {\r\n        this._projectionTextureUpDirection = value;\r\n        this._projectionTextureProjectionLightDirty = true;\r\n    }\r\n\r\n    @serializeAsTexture(\"projectedLightTexture\")\r\n    private _projectionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets the projection texture of the light.\r\n     */\r\n    public get projectionTexture(): Nullable<BaseTexture> {\r\n        return this._projectionTexture;\r\n    }\r\n    /**\r\n     * Sets the projection texture of the light.\r\n     */\r\n    public set projectionTexture(value: Nullable<BaseTexture>) {\r\n        if (this._projectionTexture === value) {\r\n            return;\r\n        }\r\n        this._projectionTexture = value;\r\n        this._projectionTextureDirty = true;\r\n        if (this._projectionTexture && !this._projectionTexture.isReady()) {\r\n            if (SpotLight._IsProceduralTexture(this._projectionTexture)) {\r\n                this._projectionTexture.getEffect().executeWhenCompiled(() => {\r\n                    this._markMeshesAsLightDirty();\r\n                });\r\n            } else if (SpotLight._IsTexture(this._projectionTexture)) {\r\n                this._projectionTexture.onLoadObservable.addOnce(() => {\r\n                    this._markMeshesAsLightDirty();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _IsProceduralTexture(texture: BaseTexture): texture is ProceduralTexture {\r\n        return (texture as ProceduralTexture).onGeneratedObservable !== undefined;\r\n    }\r\n\r\n    private static _IsTexture(texture: BaseTexture): texture is Texture {\r\n        return (texture as Texture).onLoadObservable !== undefined;\r\n    }\r\n\r\n    private _projectionTextureViewLightDirty = true;\r\n    private _projectionTextureProjectionLightDirty = true;\r\n    private _projectionTextureDirty = true;\r\n    private _projectionTextureViewTargetVector = Vector3.Zero();\r\n    private _projectionTextureViewLightMatrix = Matrix.Zero();\r\n\r\n    private _projectionTextureProjectionLightMatrix = Matrix.Zero();\r\n    /**\r\n     * Gets or sets the light projection matrix as used by the projection texture\r\n     */\r\n    public get projectionTextureProjectionLightMatrix(): Matrix {\r\n        return this._projectionTextureProjectionLightMatrix;\r\n    }\r\n\r\n    public set projectionTextureProjectionLightMatrix(projection: Matrix) {\r\n        this._projectionTextureProjectionLightMatrix = projection;\r\n        this._projectionTextureProjectionLightDirty = false;\r\n        this._projectionTextureDirty = true;\r\n    }\r\n\r\n    private _projectionTextureScalingMatrix = Matrix.FromValues(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\r\n\r\n    /**\r\n     * Creates a SpotLight object in the scene. A spot light is a simply light oriented cone.\r\n     * It can cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The light friendly name\r\n     * @param position The position of the spot light in the scene\r\n     * @param direction The direction of the light in the scene\r\n     * @param angle The cone angle of the light in Radians\r\n     * @param exponent The light decay speed with the distance from the emission spot\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, direction: Vector3, angle: number, exponent: number, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.position = position;\r\n        this.direction = direction;\r\n        this.angle = angle;\r\n        this.exponent = exponent;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"SpotLight\".\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"SpotLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 2.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_SPOTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Overrides the direction setter to recompute the projection texture view light Matrix.\r\n     * @param value\r\n     */\r\n    protected _setDirection(value: Vector3) {\r\n        super._setDirection(value);\r\n        this._projectionTextureViewLightDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Overrides the position setter to recompute the projection texture view light Matrix.\r\n     * @param value\r\n     */\r\n    protected _setPosition(value: Vector3) {\r\n        super._setPosition(value);\r\n        this._projectionTextureViewLightDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as perspective projection matrix for the shadows and the passed view matrix with the fov equal to the SpotLight angle and and aspect ratio of 1.0.\r\n     * Returns the SpotLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this._shadowAngleScale = this._shadowAngleScale || 1;\r\n        const angle = this._shadowAngleScale * this._angle;\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            angle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _computeProjectionTextureViewLightMatrix(): void {\r\n        this._projectionTextureViewLightDirty = false;\r\n        this._projectionTextureDirty = true;\r\n\r\n        this.getAbsolutePosition().addToRef(this.getShadowDirection(), this._projectionTextureViewTargetVector);\r\n        Matrix.LookAtLHToRef(this.getAbsolutePosition(), this._projectionTextureViewTargetVector, this._projectionTextureUpDirection, this._projectionTextureViewLightMatrix);\r\n    }\r\n\r\n    protected _computeProjectionTextureProjectionLightMatrix(): void {\r\n        this._projectionTextureProjectionLightDirty = false;\r\n        this._projectionTextureDirty = true;\r\n\r\n        const lightFar = this.projectionTextureLightFar;\r\n        const lightNear = this.projectionTextureLightNear;\r\n\r\n        const P = lightFar / (lightFar - lightNear);\r\n        const Q = -P * lightNear;\r\n        const S = 1.0 / Math.tan(this._angle / 2.0);\r\n        const A = 1.0;\r\n\r\n        Matrix.FromValuesToRef(S / A, 0.0, 0.0, 0.0, 0.0, S, 0.0, 0.0, 0.0, 0.0, P, 1.0, 0.0, 0.0, Q, 0.0, this._projectionTextureProjectionLightMatrix);\r\n    }\r\n\r\n    /**\r\n     * Main function for light texture projection matrix computing.\r\n     */\r\n    protected _computeProjectionTextureMatrix(): void {\r\n        this._projectionTextureDirty = false;\r\n\r\n        this._projectionTextureViewLightMatrix.multiplyToRef(this._projectionTextureProjectionLightMatrix, this._projectionTextureMatrix);\r\n        if (this._projectionTexture instanceof Texture) {\r\n            const u = this._projectionTexture.uScale / 2.0;\r\n            const v = this._projectionTexture.vScale / 2.0;\r\n            Matrix.FromValuesToRef(u, 0.0, 0.0, 0.0, 0.0, v, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0, this._projectionTextureScalingMatrix);\r\n        }\r\n        this._projectionTextureMatrix.multiplyToRef(this._projectionTextureScalingMatrix, this._projectionTextureMatrix);\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDirection\", 3);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    private _computeAngleValues(): void {\r\n        this._lightAngleScale = 1.0 / Math.max(0.001, Math.cos(this._innerAngle * 0.5) - this._cosHalfAngle);\r\n        this._lightAngleOffset = -this._cosHalfAngle * this._lightAngleScale;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light textures.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    public transferTexturesToEffect(effect: Effect, lightIndex: string): Light {\r\n        if (this.projectionTexture && this.projectionTexture.isReady()) {\r\n            if (this._projectionTextureViewLightDirty) {\r\n                this._computeProjectionTextureViewLightMatrix();\r\n            }\r\n            if (this._projectionTextureProjectionLightDirty) {\r\n                this._computeProjectionTextureProjectionLightMatrix();\r\n            }\r\n            if (this._projectionTextureDirty) {\r\n                this._computeProjectionTextureMatrix();\r\n            }\r\n            effect.setMatrix(\"textureProjectionMatrix\" + lightIndex, this._projectionTextureMatrix);\r\n            effect.setTexture(\"projectionLightSampler\" + lightIndex, this.projectionTexture);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the SpotLight transformed position (or position if not parented) and normalized direction.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The spot light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): SpotLight {\r\n        let normalizeDirection;\r\n\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, this.exponent, lightIndex);\r\n\r\n            normalizeDirection = Vector3.Normalize(this.transformedDirection);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, this.exponent, lightIndex);\r\n\r\n            normalizeDirection = Vector3.Normalize(this.direction);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightDirection\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, this._cosHalfAngle, lightIndex);\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, this._lightAngleScale, this._lightAngleOffset, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        let normalizeDirection;\r\n\r\n        if (this.computeTransformedInformation()) {\r\n            normalizeDirection = Vector3.Normalize(this.transformedDirection);\r\n        } else {\r\n            normalizeDirection = Vector3.Normalize(this.direction);\r\n        }\r\n\r\n        if (this.getScene().useRightHandedSystem) {\r\n            effect.setFloat3(lightDataUniformName, -normalizeDirection.x, -normalizeDirection.y, -normalizeDirection.z);\r\n        } else {\r\n            effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the light and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        if (this._projectionTexture) {\r\n            this._projectionTexture.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? minZ : this._scene.getEngine().isNDCHalfZRange ? 0 : minZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : maxZ;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"SPOTLIGHT\" + lightIndex] = true;\r\n        defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex] = this.projectionTexture && this.projectionTexture.isReady() ? true : false;\r\n    }\r\n}\r\n", "/**\r\n * Wrapper class for promise with external resolve and reject.\r\n */\r\nexport class Deferred<T> {\r\n    /**\r\n     * The promise associated with this deferred object.\r\n     */\r\n    public readonly promise: Promise<T>;\r\n\r\n    private _resolve: (value: T | PromiseLike<T>) => void;\r\n    private _reject: (reason?: any) => void;\r\n\r\n    /**\r\n     * The resolve method of the promise associated with this deferred object.\r\n     */\r\n    public get resolve() {\r\n        return this._resolve;\r\n    }\r\n\r\n    /**\r\n     * The reject method of the promise associated with this deferred object.\r\n     */\r\n    public get reject() {\r\n        return this._reject;\r\n    }\r\n\r\n    /**\r\n     * Constructor for this deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve: (value: T | PromiseLike<T>) => void, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n    }\r\n}\r\n", "import type { Animatable } from \"./animatable\";\r\nimport { Animation } from \"./animation\";\r\nimport type { IMakeAnimationAdditiveOptions } from \"./animation\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\n\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { AbstractScene } from \"../abstractScene\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { AnimationGroupMask } from \"./animationGroupMask\";\r\n\r\n/**\r\n * This class defines the direct association between an animation and a target\r\n */\r\nexport class TargetedAnimation {\r\n    /**\r\n     * Animation to perform\r\n     */\r\n    public animation: Animation;\r\n    /**\r\n     * Target to animate\r\n     */\r\n    public target: any;\r\n\r\n    /**\r\n     * Returns the string \"TargetedAnimation\"\r\n     * @returns \"TargetedAnimation\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"TargetedAnimation\";\r\n    }\r\n\r\n    /**\r\n     * Serialize the object\r\n     * @returns the JSON object representing the current entity\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.animation = this.animation.serialize();\r\n        serializationObject.targetId = this.target.id;\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * Options to be used when creating an additive group animation\r\n */\r\nexport interface IMakeAnimationGroupAdditiveOptions extends IMakeAnimationAdditiveOptions {\r\n    /**\r\n     * Defines if the animation group should be cloned or not (default is false)\r\n     */\r\n    cloneOriginalAnimationGroup?: boolean;\r\n    /**\r\n     * The name of the cloned animation group if cloneOriginalAnimationGroup is true\r\n     */\r\n    clonedAnimationGroupName?: string;\r\n}\r\n\r\n/**\r\n * Use this class to create coordinated animations on multiple targets\r\n */\r\nexport class AnimationGroup implements IDisposable {\r\n    private _scene: Scene;\r\n\r\n    private _targetedAnimations = new Array<TargetedAnimation>();\r\n    private _animatables = new Array<Animatable>();\r\n    private _from = Number.MAX_VALUE;\r\n    private _to = -Number.MAX_VALUE;\r\n    private _isStarted: boolean;\r\n    private _isPaused: boolean;\r\n    private _speedRatio = 1;\r\n    private _loopAnimation = false;\r\n    private _isAdditive = false;\r\n    private _weight = -1;\r\n    private _playOrder = 0;\r\n    private _enableBlending: Nullable<boolean> = null;\r\n    private _blendingSpeed: Nullable<number> = null;\r\n    private _numActiveAnimatables = 0;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * This observable will notify when one animation have ended\r\n     */\r\n    public onAnimationEndObservable = new Observable<TargetedAnimation>();\r\n\r\n    /**\r\n     * Observer raised when one animation loops\r\n     */\r\n    public onAnimationLoopObservable = new Observable<TargetedAnimation>();\r\n\r\n    /**\r\n     * Observer raised when all animations have looped\r\n     */\r\n    public onAnimationGroupLoopObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations have ended.\r\n     */\r\n    public onAnimationGroupEndObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations have paused.\r\n     */\r\n    public onAnimationGroupPauseObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations are playing.\r\n     */\r\n    public onAnimationGroupPlayObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    private _mask: Nullable<AnimationGroupMask> = null;\r\n\r\n    /**\r\n     * Gets or sets the mask associated with this animation group. This mask is used to filter which objects should be animated.\r\n     */\r\n    public get mask() {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: Nullable<AnimationGroupMask>) {\r\n        if (this._mask === value) {\r\n            return;\r\n        }\r\n\r\n        this._mask = value;\r\n\r\n        this.syncWithMask(true);\r\n    }\r\n\r\n    /**\r\n     * Makes sure that the animations are either played or stopped according to the animation group mask.\r\n     * Note however that the call won't have any effect if the animation group has not been started yet.\r\n     * @param forceUpdate If true, forces to loop over the animatables even if no mask is defined (used internally, you shouldn't need to use it). Default: false.\r\n     */\r\n    public syncWithMask(forceUpdate = false) {\r\n        if (!this.mask && !forceUpdate) {\r\n            this._numActiveAnimatables = this._targetedAnimations.length;\r\n            return;\r\n        }\r\n\r\n        this._numActiveAnimatables = 0;\r\n\r\n        for (let i = 0; i < this._animatables.length; ++i) {\r\n            const animatable = this._animatables[i];\r\n\r\n            if (!this.mask || this.mask.disabled || this.mask.retainsTarget(animatable.target.name)) {\r\n                this._numActiveAnimatables++;\r\n                if (animatable.paused) {\r\n                    animatable.restart();\r\n                }\r\n            } else {\r\n                if (!animatable.paused) {\r\n                    animatable.pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all animations for the targets not retained by the animation group mask.\r\n     * Use this function if you know you won't need those animations anymore and if you want to free memory.\r\n     */\r\n    public removeUnmaskedAnimations() {\r\n        if (!this.mask || this.mask.disabled) {\r\n            return;\r\n        }\r\n\r\n        // Removes all animatables (in case the animation group has already been started)\r\n        for (let i = 0; i < this._animatables.length; ++i) {\r\n            const animatable = this._animatables[i];\r\n\r\n            if (!this.mask.retainsTarget(animatable.target.name)) {\r\n                animatable.stop();\r\n                this._animatables.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n\r\n        // Removes the targeted animations\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n\r\n            if (!this.mask.retainsTarget(targetedAnimation.target.name)) {\r\n                this._targetedAnimations.splice(index, 1);\r\n                --index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the first frame\r\n     */\r\n    public get from(): number {\r\n        return this._from;\r\n    }\r\n\r\n    public set from(value: number) {\r\n        if (this._from === value) {\r\n            return;\r\n        }\r\n\r\n        this._from = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.fromFrame = this._from;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the last frame\r\n     */\r\n    public get to(): number {\r\n        return this._to;\r\n    }\r\n\r\n    public set to(value: number) {\r\n        if (this._to === value) {\r\n            return;\r\n        }\r\n\r\n        this._to = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.toFrame = this._to;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Define if the animations are started\r\n     */\r\n    public get isStarted(): boolean {\r\n        return this._isStarted;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the current group is playing\r\n     */\r\n    public get isPlaying(): boolean {\r\n        return this._isStarted && !this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to use for all animations\r\n     */\r\n    public get speedRatio(): number {\r\n        return this._speedRatio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to use for all animations\r\n     */\r\n    public set speedRatio(value: number) {\r\n        if (this._speedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._speedRatio = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.speedRatio = this._speedRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets if all animations should loop or not\r\n     */\r\n    public get loopAnimation(): boolean {\r\n        return this._loopAnimation;\r\n    }\r\n\r\n    public set loopAnimation(value: boolean) {\r\n        if (this._loopAnimation === value) {\r\n            return;\r\n        }\r\n\r\n        this._loopAnimation = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.loopAnimation = this._loopAnimation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets if all animations should be evaluated additively\r\n     */\r\n    public get isAdditive(): boolean {\r\n        return this._isAdditive;\r\n    }\r\n\r\n    public set isAdditive(value: boolean) {\r\n        if (this._isAdditive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isAdditive = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.isAdditive = this._isAdditive;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the weight to apply to all animations of the group\r\n     */\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    public set weight(value: number) {\r\n        if (this._weight === value) {\r\n            return;\r\n        }\r\n\r\n        this._weight = value;\r\n        this.setWeightForAllAnimatables(this._weight);\r\n    }\r\n\r\n    /**\r\n     * Gets the targeted animations for this animation group\r\n     */\r\n    public get targetedAnimations(): Array<TargetedAnimation> {\r\n        return this._targetedAnimations;\r\n    }\r\n\r\n    /**\r\n     * returning the list of animatables controlled by this animation group.\r\n     */\r\n    public get animatables(): Array<Animatable> {\r\n        return this._animatables;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of target animations\r\n     */\r\n    public get children() {\r\n        return this._targetedAnimations;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the order of play of the animation group (default: 0)\r\n     */\r\n    public get playOrder() {\r\n        return this._playOrder;\r\n    }\r\n\r\n    public set playOrder(value: number) {\r\n        if (this._playOrder === value) {\r\n            return;\r\n        }\r\n\r\n        this._playOrder = value;\r\n\r\n        if (this._animatables.length > 0) {\r\n            for (let i = 0; i < this._animatables.length; i++) {\r\n                this._animatables[i].playOrder = this._playOrder;\r\n            }\r\n\r\n            this._scene.sortActiveAnimatables();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows the animations of the animation group to blend with current running animations\r\n     * Note that a null value means that each animation will use their own existing blending configuration (Animation.enableBlending)\r\n     */\r\n    public get enableBlending() {\r\n        return this._enableBlending;\r\n    }\r\n\r\n    public set enableBlending(value: Nullable<boolean>) {\r\n        if (this._enableBlending === value) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlending = value;\r\n\r\n        if (value !== null) {\r\n            for (let i = 0; i < this._targetedAnimations.length; ++i) {\r\n                this._targetedAnimations[i].animation.enableBlending = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the animation blending speed\r\n     * Note that a null value means that each animation will use their own existing blending configuration (Animation.blendingSpeed)\r\n     */\r\n    public get blendingSpeed() {\r\n        return this._blendingSpeed;\r\n    }\r\n\r\n    public set blendingSpeed(value: Nullable<number>) {\r\n        if (this._blendingSpeed === value) {\r\n            return;\r\n        }\r\n\r\n        this._blendingSpeed = value;\r\n\r\n        if (value !== null) {\r\n            for (let i = 0; i < this._targetedAnimations.length; ++i) {\r\n                this._targetedAnimations[i].animation.blendingSpeed = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length (in seconds) of the animation group\r\n     * This function assumes that all animations are played at the same framePerSecond speed!\r\n     * Note: you can only call this method after you've added at least one targeted animation!\r\n     * @param from Starting frame range (default is AnimationGroup.from)\r\n     * @param to Ending frame range (default is AnimationGroup.to)\r\n     * @returns The length in seconds\r\n     */\r\n    public getLength(from?: number, to?: number): number {\r\n        from = from ?? this._from;\r\n        to = to ?? this._to;\r\n\r\n        const fps = this.targetedAnimations[0].animation.framePerSecond * this._speedRatio;\r\n\r\n        return (to - from) / fps;\r\n    }\r\n\r\n    /**\r\n     * Merge the array of animation groups into a new animation group\r\n     * @param animationGroups List of animation groups to merge\r\n     * @param disposeSource If true, animation groups will be disposed after being merged (default: true)\r\n     * @param normalize If true, animation groups will be normalized before being merged, so that all animations have the same \"from\" and \"to\" frame (default: false)\r\n     * @param weight Weight for the new animation group. If not provided, it will inherit the weight from the first animation group of the array\r\n     * @returns The new animation group or null if no animation groups were passed\r\n     */\r\n    public static MergeAnimationGroups(animationGroups: Array<AnimationGroup>, disposeSource = true, normalize = false, weight?: number): Nullable<AnimationGroup> {\r\n        if (animationGroups.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        weight = weight ?? animationGroups[0].weight;\r\n\r\n        let beginFrame = Number.MAX_VALUE;\r\n        let endFrame = -Number.MAX_VALUE;\r\n\r\n        if (normalize) {\r\n            for (const animationGroup of animationGroups) {\r\n                if (animationGroup.from < beginFrame) {\r\n                    beginFrame = animationGroup.from;\r\n                }\r\n\r\n                if (animationGroup.to > endFrame) {\r\n                    endFrame = animationGroup.to;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mergedAnimationGroup = new AnimationGroup(animationGroups[0].name + \"_merged\", animationGroups[0]._scene, weight);\r\n\r\n        for (const animationGroup of animationGroups) {\r\n            if (normalize) {\r\n                animationGroup.normalize(beginFrame, endFrame);\r\n            }\r\n\r\n            for (const targetedAnimation of animationGroup.targetedAnimations) {\r\n                mergedAnimationGroup.addTargetedAnimation(targetedAnimation.animation, targetedAnimation.target);\r\n            }\r\n\r\n            if (disposeSource) {\r\n                animationGroup.dispose();\r\n            }\r\n        }\r\n\r\n        return mergedAnimationGroup;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Animation Group.\r\n     * This helps managing several animations at once.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\r\n     * @param name Defines the name of the group\r\n     * @param scene Defines the scene the group belongs to\r\n     * @param weight Defines the weight to use for animations in the group (-1.0 by default, meaning \"no weight\")\r\n     * @param playOrder Defines the order of play of the animation group (default is 0)\r\n     */\r\n    public constructor(\r\n        /** The name of the animation group */\r\n        public name: string,\r\n        scene: Nullable<Scene> = null,\r\n        weight = -1,\r\n        playOrder = 0\r\n    ) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._weight = weight;\r\n        this._playOrder = playOrder;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n\r\n        this._scene.addAnimationGroup(this);\r\n    }\r\n\r\n    /**\r\n     * Add an animation (with its target) in the group\r\n     * @param animation defines the animation we want to add\r\n     * @param target defines the target of the animation\r\n     * @returns the TargetedAnimation object\r\n     */\r\n    public addTargetedAnimation(animation: Animation, target: any): TargetedAnimation {\r\n        const targetedAnimation = new TargetedAnimation();\r\n        targetedAnimation.animation = animation;\r\n        targetedAnimation.target = target;\r\n\r\n        const keys = animation.getKeys();\r\n        if (this._from > keys[0].frame) {\r\n            this._from = keys[0].frame;\r\n        }\r\n\r\n        if (this._to < keys[keys.length - 1].frame) {\r\n            this._to = keys[keys.length - 1].frame;\r\n        }\r\n\r\n        if (this._enableBlending !== null) {\r\n            animation.enableBlending = this._enableBlending;\r\n        }\r\n\r\n        if (this._blendingSpeed !== null) {\r\n            animation.blendingSpeed = this._blendingSpeed;\r\n        }\r\n\r\n        this._targetedAnimations.push(targetedAnimation);\r\n\r\n        return targetedAnimation;\r\n    }\r\n\r\n    /**\r\n     * Remove an animation from the group\r\n     * @param animation defines the animation we want to remove\r\n     */\r\n    public removeTargetedAnimation(animation: Animation) {\r\n        for (let index = this._targetedAnimations.length - 1; index > -1; index--) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            if (targetedAnimation.animation === animation) {\r\n                this._targetedAnimations.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will normalize every animation in the group to make sure they all go from beginFrame to endFrame\r\n     * It can add constant keys at begin or end\r\n     * @param beginFrame defines the new begin frame for all animations or the smallest begin frame of all animations if null (defaults to null)\r\n     * @param endFrame defines the new end frame for all animations or the largest end frame of all animations if null (defaults to null)\r\n     * @returns the animation group\r\n     */\r\n    public normalize(beginFrame: Nullable<number> = null, endFrame: Nullable<number> = null): AnimationGroup {\r\n        if (beginFrame == null) {\r\n            beginFrame = this._from;\r\n        }\r\n        if (endFrame == null) {\r\n            endFrame = this._to;\r\n        }\r\n\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            const keys = targetedAnimation.animation.getKeys();\r\n            const startKey = keys[0];\r\n            const endKey = keys[keys.length - 1];\r\n\r\n            if (startKey.frame > beginFrame) {\r\n                const newKey: IAnimationKey = {\r\n                    frame: beginFrame,\r\n                    value: startKey.value,\r\n                    inTangent: startKey.inTangent,\r\n                    outTangent: startKey.outTangent,\r\n                    interpolation: startKey.interpolation,\r\n                };\r\n                keys.splice(0, 0, newKey);\r\n            }\r\n\r\n            if (endKey.frame < endFrame) {\r\n                const newKey: IAnimationKey = {\r\n                    frame: endFrame,\r\n                    value: endKey.value,\r\n                    inTangent: endKey.inTangent,\r\n                    outTangent: endKey.outTangent,\r\n                    interpolation: endKey.interpolation,\r\n                };\r\n                keys.push(newKey);\r\n            }\r\n        }\r\n\r\n        this._from = beginFrame;\r\n        this._to = endFrame;\r\n\r\n        return this;\r\n    }\r\n\r\n    private _animationLoopCount: number;\r\n    private _animationLoopFlags: boolean[] = [];\r\n\r\n    private _processLoop(animatable: Animatable, targetedAnimation: TargetedAnimation, index: number) {\r\n        animatable.onAnimationLoop = () => {\r\n            this.onAnimationLoopObservable.notifyObservers(targetedAnimation);\r\n\r\n            if (this._animationLoopFlags[index]) {\r\n                return;\r\n            }\r\n\r\n            this._animationLoopFlags[index] = true;\r\n\r\n            this._animationLoopCount++;\r\n            if (this._animationLoopCount === this._numActiveAnimatables) {\r\n                this.onAnimationGroupLoopObservable.notifyObservers(this);\r\n                this._animationLoopCount = 0;\r\n                this._animationLoopFlags.length = 0;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start all animations on given targets\r\n     * @param loop defines if animations must loop\r\n     * @param speedRatio defines the ratio to apply to animation speed (1 by default)\r\n     * @param from defines the from key (optional)\r\n     * @param to defines the to key (optional)\r\n     * @param isAdditive defines the additive state for the resulting animatables (optional)\r\n     * @returns the current animation group\r\n     */\r\n    public start(loop = false, speedRatio = 1, from?: number, to?: number, isAdditive?: boolean): AnimationGroup {\r\n        if (this._isStarted || this._targetedAnimations.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        this._loopAnimation = loop;\r\n\r\n        this._animationLoopCount = 0;\r\n        this._animationLoopFlags.length = 0;\r\n\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            const animatable = this._scene.beginDirectAnimation(\r\n                targetedAnimation.target,\r\n                [targetedAnimation.animation],\r\n                from !== undefined ? from : this._from,\r\n                to !== undefined ? to : this._to,\r\n                loop,\r\n                speedRatio,\r\n                undefined,\r\n                undefined,\r\n                isAdditive !== undefined ? isAdditive : this._isAdditive\r\n            );\r\n            animatable.weight = this._weight;\r\n            animatable.playOrder = this._playOrder;\r\n            animatable.onAnimationEnd = () => {\r\n                this.onAnimationEndObservable.notifyObservers(targetedAnimation);\r\n                this._checkAnimationGroupEnded(animatable);\r\n            };\r\n\r\n            this._processLoop(animatable, targetedAnimation, index);\r\n            this._animatables.push(animatable);\r\n        }\r\n\r\n        this.syncWithMask();\r\n\r\n        this._scene.sortActiveAnimatables();\r\n\r\n        this._speedRatio = speedRatio;\r\n\r\n        this._isStarted = true;\r\n        this._isPaused = false;\r\n\r\n        this.onAnimationGroupPlayObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pause all animations\r\n     * @returns the animation group\r\n     */\r\n    public pause(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        this._isPaused = true;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.pause();\r\n        }\r\n\r\n        this.onAnimationGroupPauseObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Play all animations to initial state\r\n     * This function will start() the animations if they were not started or will restart() them if they were paused\r\n     * @param loop defines if animations must loop\r\n     * @returns the animation group\r\n     */\r\n    public play(loop?: boolean): AnimationGroup {\r\n        // only if all animatables are ready and exist\r\n        if (this.isStarted && this._animatables.length === this._targetedAnimations.length) {\r\n            if (loop !== undefined) {\r\n                this.loopAnimation = loop;\r\n            }\r\n            this.restart();\r\n        } else {\r\n            this.stop();\r\n            this.start(loop, this._speedRatio);\r\n        }\r\n\r\n        this._isPaused = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reset all animations to initial state\r\n     * @returns the animation group\r\n     */\r\n    public reset(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            this.play();\r\n            this.goToFrame(0);\r\n            this.stop();\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.reset();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Restart animations from key 0\r\n     * @returns the animation group\r\n     */\r\n    public restart(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.restart();\r\n        }\r\n\r\n        this.syncWithMask();\r\n\r\n        this.onAnimationGroupPlayObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stop all animations\r\n     * @returns the animation group\r\n     */\r\n    public stop(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        const list = this._animatables.slice();\r\n        for (let index = 0; index < list.length; index++) {\r\n            list[index].stop(undefined, undefined, true);\r\n        }\r\n\r\n        // We will take care of removing all stopped animatables\r\n        let curIndex = 0;\r\n        for (let index = 0; index < this._scene._activeAnimatables.length; index++) {\r\n            const animatable = this._scene._activeAnimatables[index];\r\n            if (animatable._runtimeAnimations.length > 0) {\r\n                this._scene._activeAnimatables[curIndex++] = animatable;\r\n            }\r\n        }\r\n        this._scene._activeAnimatables.length = curIndex;\r\n\r\n        this._isStarted = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set animation weight for all animatables\r\n     *\r\n     * @since 6.12.4\r\n     *  You can pass the weight to the AnimationGroup constructor, or use the weight property to set it after the group has been created,\r\n     *  making it easier to define the overall animation weight than calling setWeightForAllAnimatables() after the animation group has been started\r\n     * @param weight defines the weight to use\r\n     * @returns the animationGroup\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-weights\r\n     */\r\n    public setWeightForAllAnimatables(weight: number): AnimationGroup {\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.weight = weight;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Synchronize and normalize all animatables with a source animatable\r\n     * @param root defines the root animatable to synchronize with (null to stop synchronizing)\r\n     * @returns the animationGroup\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-weights\r\n     */\r\n    public syncAllAnimationsWith(root: Nullable<Animatable>): AnimationGroup {\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.syncWith(root);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Goes to a specific frame in this animation group\r\n     * @param frame the frame number to go to\r\n     * @returns the animationGroup\r\n     */\r\n    public goToFrame(frame: number): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.goToFrame(frame);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Dispose all associated resources\r\n     */\r\n    public dispose(): void {\r\n        this._targetedAnimations.length = 0;\r\n        this._animatables.length = 0;\r\n\r\n        // Remove from scene\r\n        const index = this._scene.animationGroups.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._scene.animationGroups.splice(index, 1);\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.animationGroups.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.animationGroups.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAnimationEndObservable.clear();\r\n        this.onAnimationGroupEndObservable.clear();\r\n        this.onAnimationGroupPauseObservable.clear();\r\n        this.onAnimationGroupPlayObservable.clear();\r\n        this.onAnimationLoopObservable.clear();\r\n        this.onAnimationGroupLoopObservable.clear();\r\n    }\r\n\r\n    private _checkAnimationGroupEnded(animatable: Animatable) {\r\n        // animatable should be taken out of the array\r\n        const idx = this._animatables.indexOf(animatable);\r\n        if (idx > -1) {\r\n            this._animatables.splice(idx, 1);\r\n        }\r\n\r\n        // all animatables were removed? animation group ended!\r\n        if (this._animatables.length === 0) {\r\n            this._isStarted = false;\r\n            this.onAnimationGroupEndObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current animation group and returns a copy\r\n     * @param newName defines the name of the new group\r\n     * @param targetConverter defines an optional function used to convert current animation targets to new ones\r\n     * @param cloneAnimations defines if the animations should be cloned or referenced\r\n     * @returns the new animation group\r\n     */\r\n    public clone(newName: string, targetConverter?: (oldTarget: any) => any, cloneAnimations = false): AnimationGroup {\r\n        const newGroup = new AnimationGroup(newName || this.name, this._scene, this._weight, this._playOrder);\r\n\r\n        newGroup._from = this.from;\r\n        newGroup._to = this.to;\r\n        newGroup._speedRatio = this.speedRatio;\r\n        newGroup._loopAnimation = this.loopAnimation;\r\n        newGroup._isAdditive = this.isAdditive;\r\n        newGroup._enableBlending = this.enableBlending;\r\n        newGroup._blendingSpeed = this.blendingSpeed;\r\n        newGroup.metadata = this.metadata;\r\n        newGroup.mask = this.mask;\r\n\r\n        for (const targetAnimation of this._targetedAnimations) {\r\n            newGroup.addTargetedAnimation(\r\n                cloneAnimations ? targetAnimation.animation.clone() : targetAnimation.animation,\r\n                targetConverter ? targetConverter(targetAnimation.target) : targetAnimation.target\r\n            );\r\n        }\r\n\r\n        return newGroup;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animationGroup to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.from = this.from;\r\n        serializationObject.to = this.to;\r\n        serializationObject.speedRatio = this.speedRatio;\r\n        serializationObject.loopAnimation = this.loopAnimation;\r\n        serializationObject.isAdditive = this.isAdditive;\r\n        serializationObject.weight = this.weight;\r\n        serializationObject.playOrder = this.playOrder;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        serializationObject.targetedAnimations = [];\r\n        for (let targetedAnimationIndex = 0; targetedAnimationIndex < this.targetedAnimations.length; targetedAnimationIndex++) {\r\n            const targetedAnimation = this.targetedAnimations[targetedAnimationIndex];\r\n            serializationObject.targetedAnimations[targetedAnimationIndex] = targetedAnimation.serialize();\r\n        }\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new AnimationGroup object parsed from the source provided.\r\n     * @param parsedAnimationGroup defines the source\r\n     * @param scene defines the scene that will receive the animationGroup\r\n     * @returns a new AnimationGroup\r\n     */\r\n    public static Parse(parsedAnimationGroup: any, scene: Scene): AnimationGroup {\r\n        const animationGroup = new AnimationGroup(parsedAnimationGroup.name, scene, parsedAnimationGroup.weight, parsedAnimationGroup.playOrder);\r\n        for (let i = 0; i < parsedAnimationGroup.targetedAnimations.length; i++) {\r\n            const targetedAnimation = parsedAnimationGroup.targetedAnimations[i];\r\n            const animation = Animation.Parse(targetedAnimation.animation);\r\n            const id = targetedAnimation.targetId;\r\n            if (targetedAnimation.animation.property === \"influence\") {\r\n                // morph target animation\r\n                const morphTarget = scene.getMorphTargetById(id);\r\n                if (morphTarget) {\r\n                    animationGroup.addTargetedAnimation(animation, morphTarget);\r\n                }\r\n            } else {\r\n                const targetNode = scene.getNodeById(id);\r\n\r\n                if (targetNode != null) {\r\n                    animationGroup.addTargetedAnimation(animation, targetNode);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(animationGroup, parsedAnimationGroup.tags);\r\n        }\r\n\r\n        if (parsedAnimationGroup.from !== null && parsedAnimationGroup.to !== null) {\r\n            animationGroup.normalize(parsedAnimationGroup.from, parsedAnimationGroup.to);\r\n        }\r\n\r\n        if (parsedAnimationGroup.speedRatio !== undefined) {\r\n            animationGroup._speedRatio = parsedAnimationGroup.speedRatio;\r\n        }\r\n        if (parsedAnimationGroup.loopAnimation !== undefined) {\r\n            animationGroup._loopAnimation = parsedAnimationGroup.loopAnimation;\r\n        }\r\n\r\n        if (parsedAnimationGroup.isAdditive !== undefined) {\r\n            animationGroup._isAdditive = parsedAnimationGroup.isAdditive;\r\n        }\r\n\r\n        if (parsedAnimationGroup.weight !== undefined) {\r\n            animationGroup._weight = parsedAnimationGroup.weight;\r\n        }\r\n\r\n        if (parsedAnimationGroup.playOrder !== undefined) {\r\n            animationGroup._playOrder = parsedAnimationGroup.playOrder;\r\n        }\r\n\r\n        if (parsedAnimationGroup.enableBlending !== undefined) {\r\n            animationGroup._enableBlending = parsedAnimationGroup.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimationGroup.blendingSpeed !== undefined) {\r\n            animationGroup._blendingSpeed = parsedAnimationGroup.blendingSpeed;\r\n        }\r\n\r\n        if (parsedAnimationGroup.metadata !== undefined) {\r\n            animationGroup.metadata = parsedAnimationGroup.metadata;\r\n        }\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimationGroup defines the AnimationGroup containing animations to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to (default: 0)\r\n     * @param range defines the name of the AnimationRange belonging to the animations in the group to convert\r\n     * @param cloneOriginal defines whether or not to clone the group and convert the clone or convert the original group (default is false)\r\n     * @param clonedName defines the name of the resulting cloned AnimationGroup if cloneOriginal is true\r\n     * @returns a new AnimationGroup if cloneOriginal is true or the original AnimationGroup if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimationGroup: AnimationGroup, referenceFrame: number, range?: string, cloneOriginal?: boolean, clonedName?: string): AnimationGroup;\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimationGroup defines the AnimationGroup containing animations to convert\r\n     * @param options defines the options to use when converting keyframes\r\n     * @returns a new AnimationGroup if options.cloneOriginalAnimationGroup is true or the original AnimationGroup if options.cloneOriginalAnimationGroup is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimationGroup: AnimationGroup, options?: IMakeAnimationGroupAdditiveOptions): AnimationGroup;\r\n\r\n    /** @internal */\r\n    public static MakeAnimationAdditive(\r\n        sourceAnimationGroup: AnimationGroup,\r\n        referenceFrameOrOptions?: number | IMakeAnimationGroupAdditiveOptions,\r\n        range?: string,\r\n        cloneOriginal = false,\r\n        clonedName?: string\r\n    ): AnimationGroup {\r\n        let options: IMakeAnimationGroupAdditiveOptions;\r\n\r\n        if (typeof referenceFrameOrOptions === \"object\") {\r\n            options = referenceFrameOrOptions;\r\n        } else {\r\n            options = {\r\n                referenceFrame: referenceFrameOrOptions,\r\n                range: range,\r\n                cloneOriginalAnimationGroup: cloneOriginal,\r\n                clonedAnimationName: clonedName,\r\n            };\r\n        }\r\n\r\n        let animationGroup = sourceAnimationGroup;\r\n        if (options.cloneOriginalAnimationGroup) {\r\n            animationGroup = sourceAnimationGroup.clone(options.clonedAnimationGroupName || animationGroup.name);\r\n        }\r\n\r\n        const targetedAnimations = animationGroup.targetedAnimations;\r\n        for (let index = 0; index < targetedAnimations.length; index++) {\r\n            const targetedAnimation = targetedAnimations[index];\r\n            targetedAnimation.animation = Animation.MakeAnimationAdditive(targetedAnimation.animation, options);\r\n        }\r\n\r\n        animationGroup.isAdditive = true;\r\n\r\n        if (options.clipKeys) {\r\n            // We need to recalculate the from/to frames for the animation group because some keys may have been removed\r\n            let from = Number.MAX_VALUE;\r\n            let to = -Number.MAX_VALUE;\r\n\r\n            const targetedAnimations = animationGroup.targetedAnimations;\r\n            for (let index = 0; index < targetedAnimations.length; index++) {\r\n                const targetedAnimation = targetedAnimations[index];\r\n                const animation = targetedAnimation.animation;\r\n                const keys = animation.getKeys();\r\n\r\n                if (from > keys[0].frame) {\r\n                    from = keys[0].frame;\r\n                }\r\n\r\n                if (to < keys[keys.length - 1].frame) {\r\n                    to = keys[keys.length - 1].frame;\r\n                }\r\n            }\r\n\r\n            animationGroup._from = from;\r\n            animationGroup._to = to;\r\n        }\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, keeping only the keys that are inside a given key range\r\n     * @param sourceAnimationGroup defines the animation group on which to operate\r\n     * @param fromKey defines the lower bound of the range\r\n     * @param toKey defines the upper bound of the range\r\n     * @param name defines the name of the new animation group. If not provided, use the same name as animationGroup\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @returns a new animation group stripped from all the keys outside the given range\r\n     */\r\n    public static ClipKeys(sourceAnimationGroup: AnimationGroup, fromKey: number, toKey: number, name?: string, dontCloneAnimations?: boolean): AnimationGroup {\r\n        const animationGroup = sourceAnimationGroup.clone(name || sourceAnimationGroup.name);\r\n\r\n        return AnimationGroup.ClipKeysInPlace(animationGroup, fromKey, toKey, dontCloneAnimations);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the keys that are inside a given key range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param fromKey defines the lower bound of the range\r\n     * @param toKey defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @returns the animationGroup stripped from all the keys outside the given range\r\n     */\r\n    public static ClipKeysInPlace(animationGroup: AnimationGroup, fromKey: number, toKey: number, dontCloneAnimations?: boolean): AnimationGroup {\r\n        return AnimationGroup.ClipInPlace(animationGroup, fromKey, toKey, dontCloneAnimations, false);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, keeping only the frames that are inside a given frame range\r\n     * @param sourceAnimationGroup defines the animation group on which to operate\r\n     * @param fromFrame defines the lower bound of the range\r\n     * @param toFrame defines the upper bound of the range\r\n     * @param name defines the name of the new animation group. If not provided, use the same name as animationGroup\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the frames. Default is false, so animations will be cloned\r\n     * @returns a new animation group stripped from all the frames outside the given range\r\n     */\r\n    public static ClipFrames(sourceAnimationGroup: AnimationGroup, fromFrame: number, toFrame: number, name?: string, dontCloneAnimations?: boolean): AnimationGroup {\r\n        const animationGroup = sourceAnimationGroup.clone(name || sourceAnimationGroup.name);\r\n\r\n        return AnimationGroup.ClipFramesInPlace(animationGroup, fromFrame, toFrame, dontCloneAnimations);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the frames that are inside a given frame range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param fromFrame defines the lower bound of the range\r\n     * @param toFrame defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the frames. Default is false, so animations will be cloned\r\n     * @returns the animationGroup stripped from all the frames outside the given range\r\n     */\r\n    public static ClipFramesInPlace(animationGroup: AnimationGroup, fromFrame: number, toFrame: number, dontCloneAnimations?: boolean): AnimationGroup {\r\n        return AnimationGroup.ClipInPlace(animationGroup, fromFrame, toFrame, dontCloneAnimations, true);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the keys that are inside a given key or frame range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param start defines the lower bound of the range\r\n     * @param end defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @param useFrame defines if the range is defined by frame numbers or key indices (default is false which means use key indices)\r\n     * @returns the animationGroup stripped from all the keys outside the given range\r\n     */\r\n    public static ClipInPlace(animationGroup: AnimationGroup, start: number, end: number, dontCloneAnimations?: boolean, useFrame = false): AnimationGroup {\r\n        let from = Number.MAX_VALUE;\r\n        let to = -Number.MAX_VALUE;\r\n\r\n        const targetedAnimations = animationGroup.targetedAnimations;\r\n        for (let index = 0; index < targetedAnimations.length; index++) {\r\n            const targetedAnimation = targetedAnimations[index];\r\n            const animation = dontCloneAnimations ? targetedAnimation.animation : targetedAnimation.animation.clone();\r\n\r\n            if (useFrame) {\r\n                // Make sure we have keys corresponding to the bounds of the frame range\r\n                animation.createKeyForFrame(start);\r\n                animation.createKeyForFrame(end);\r\n            }\r\n\r\n            const keys = animation.getKeys();\r\n            const newKeys: IAnimationKey[] = [];\r\n\r\n            let startFrame = Number.MAX_VALUE;\r\n            for (let k = 0; k < keys.length; k++) {\r\n                const key = keys[k];\r\n                if ((!useFrame && k >= start && k <= end) || (useFrame && key.frame >= start && key.frame <= end)) {\r\n                    const newKey: IAnimationKey = {\r\n                        frame: key.frame,\r\n                        value: key.value.clone ? key.value.clone() : key.value,\r\n                        inTangent: key.inTangent,\r\n                        outTangent: key.outTangent,\r\n                        interpolation: key.interpolation,\r\n                        lockedTangent: key.lockedTangent,\r\n                    };\r\n                    if (startFrame === Number.MAX_VALUE) {\r\n                        startFrame = newKey.frame;\r\n                    }\r\n                    newKey.frame -= startFrame;\r\n                    newKeys.push(newKey);\r\n                }\r\n            }\r\n\r\n            if (newKeys.length === 0) {\r\n                targetedAnimations.splice(index, 1);\r\n                index--;\r\n                continue;\r\n            }\r\n\r\n            if (from > newKeys[0].frame) {\r\n                from = newKeys[0].frame;\r\n            }\r\n\r\n            if (to < newKeys[newKeys.length - 1].frame) {\r\n                to = newKeys[newKeys.length - 1].frame;\r\n            }\r\n\r\n            animation.setKeys(newKeys, true);\r\n            targetedAnimation.animation = animation; // in case the animation has been cloned\r\n        }\r\n\r\n        animationGroup._from = from;\r\n        animationGroup._to = to;\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AnimationGroup\"\r\n     * @returns \"AnimationGroup\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AnimationGroup\";\r\n    }\r\n\r\n    /**\r\n     * Creates a detailed string about the object\r\n     * @param fullDetails defines if the output string will support multiple levels of logging within scene loading\r\n     * @returns a string representing the object\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (fullDetails) {\r\n            ret += \", from: \" + this._from;\r\n            ret += \", to: \" + this._to;\r\n            ret += \", isStarted: \" + this._isStarted;\r\n            ret += \", speedRatio: \" + this._speedRatio;\r\n            ret += \", targetedAnimations length: \" + this._targetedAnimations.length;\r\n            ret += \", animatables length: \" + this._animatables;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n", "import type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable, FloatArray } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { AnimationPropertiesOverride } from \"../Animations/animationPropertiesOverride\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Animation } from \"../Animations/animation\";\r\n\r\n/**\r\n * Defines a target to use with MorphTargetManager\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n */\r\nexport class MorphTarget implements IAnimatable {\r\n    /**\r\n     * Gets or sets the list of animations\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    private _scene: Nullable<Scene>;\r\n    private _positions: Nullable<FloatArray> = null;\r\n    private _normals: Nullable<FloatArray> = null;\r\n    private _tangents: Nullable<FloatArray> = null;\r\n    private _uvs: Nullable<FloatArray> = null;\r\n    private _influence: number;\r\n    private _uniqueId = 0;\r\n\r\n    /**\r\n     * Observable raised when the influence changes\r\n     */\r\n    public onInfluenceChanged = new Observable<boolean>();\r\n\r\n    /** @internal */\r\n    public _onDataLayoutChanged = new Observable<void>();\r\n\r\n    /**\r\n     * Gets or sets the influence of this target (ie. its weight in the overall morphing)\r\n     */\r\n    public get influence(): number {\r\n        return this._influence;\r\n    }\r\n\r\n    public set influence(influence: number) {\r\n        if (this._influence === influence) {\r\n            return;\r\n        }\r\n\r\n        const previous = this._influence;\r\n        this._influence = influence;\r\n\r\n        if (this.onInfluenceChanged.hasObservers()) {\r\n            this.onInfluenceChanged.notifyObservers(previous === 0 || influence === 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the id of the morph Target\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride && this._scene) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new MorphTarget\r\n     * @param name defines the name of the target\r\n     * @param influence defines the influence to use\r\n     * @param scene defines the scene the morphtarget belongs to\r\n     */\r\n    public constructor(\r\n        /** defines the name of the target */\r\n        public name: string,\r\n        influence = 0,\r\n        scene: Nullable<Scene> = null\r\n    ) {\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        this.influence = influence;\r\n\r\n        if (this._scene) {\r\n            this._uniqueId = this._scene.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this manager\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains position data\r\n     */\r\n    public get hasPositions(): boolean {\r\n        return !!this._positions;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains normal data\r\n     */\r\n    public get hasNormals(): boolean {\r\n        return !!this._normals;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains tangent data\r\n     */\r\n    public get hasTangents(): boolean {\r\n        return !!this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains texture coordinates data\r\n     */\r\n    public get hasUVs(): boolean {\r\n        return !!this._uvs;\r\n    }\r\n\r\n    /**\r\n     * Affects position data to this target\r\n     * @param data defines the position data to use\r\n     */\r\n    public setPositions(data: Nullable<FloatArray>) {\r\n        const hadPositions = this.hasPositions;\r\n\r\n        this._positions = data;\r\n\r\n        if (hadPositions !== this.hasPositions) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the position data stored in this target\r\n     * @returns a FloatArray containing the position data (or null if not present)\r\n     */\r\n    public getPositions(): Nullable<FloatArray> {\r\n        return this._positions;\r\n    }\r\n\r\n    /**\r\n     * Affects normal data to this target\r\n     * @param data defines the normal data to use\r\n     */\r\n    public setNormals(data: Nullable<FloatArray>) {\r\n        const hadNormals = this.hasNormals;\r\n\r\n        this._normals = data;\r\n\r\n        if (hadNormals !== this.hasNormals) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the normal data stored in this target\r\n     * @returns a FloatArray containing the normal data (or null if not present)\r\n     */\r\n    public getNormals(): Nullable<FloatArray> {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * Affects tangent data to this target\r\n     * @param data defines the tangent data to use\r\n     */\r\n    public setTangents(data: Nullable<FloatArray>) {\r\n        const hadTangents = this.hasTangents;\r\n\r\n        this._tangents = data;\r\n\r\n        if (hadTangents !== this.hasTangents) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the tangent data stored in this target\r\n     * @returns a FloatArray containing the tangent data (or null if not present)\r\n     */\r\n    public getTangents(): Nullable<FloatArray> {\r\n        return this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Affects texture coordinates data to this target\r\n     * @param data defines the texture coordinates data to use\r\n     */\r\n    public setUVs(data: Nullable<FloatArray>) {\r\n        const hadUVs = this.hasUVs;\r\n\r\n        this._uvs = data;\r\n\r\n        if (hadUVs !== this.hasUVs) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates data stored in this target\r\n     * @returns a FloatArray containing the texture coordinates data (or null if not present)\r\n     */\r\n    public getUVs(): Nullable<FloatArray> {\r\n        return this._uvs;\r\n    }\r\n\r\n    /**\r\n     * Clone the current target\r\n     * @returns a new MorphTarget\r\n     */\r\n    public clone(): MorphTarget {\r\n        const newOne = SerializationHelper.Clone(() => new MorphTarget(this.name, this.influence, this._scene), this);\r\n\r\n        newOne._positions = this._positions;\r\n        newOne._normals = this._normals;\r\n        newOne._tangents = this._tangents;\r\n        newOne._uvs = this._uvs;\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current target into a Serialization object\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.influence = this.influence;\r\n\r\n        serializationObject.positions = Array.prototype.slice.call(this.getPositions());\r\n        if (this.id != null) {\r\n            serializationObject.id = this.id;\r\n        }\r\n        if (this.hasNormals) {\r\n            serializationObject.normals = Array.prototype.slice.call(this.getNormals());\r\n        }\r\n        if (this.hasTangents) {\r\n            serializationObject.tangents = Array.prototype.slice.call(this.getTangents());\r\n        }\r\n        if (this.hasUVs) {\r\n            serializationObject.uvs = Array.prototype.slice.call(this.getUVs());\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"MorphTarget\"\r\n     * @returns \"MorphTarget\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MorphTarget\";\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new target from serialized data\r\n     * @param serializationObject defines the serialized data to use\r\n     * @param scene defines the hosting scene\r\n     * @returns a new MorphTarget\r\n     */\r\n    public static Parse(serializationObject: any, scene?: Scene): MorphTarget {\r\n        const result = new MorphTarget(serializationObject.name, serializationObject.influence);\r\n\r\n        result.setPositions(serializationObject.positions);\r\n\r\n        if (serializationObject.id != null) {\r\n            result.id = serializationObject.id;\r\n        }\r\n        if (serializationObject.normals) {\r\n            result.setNormals(serializationObject.normals);\r\n        }\r\n        if (serializationObject.tangents) {\r\n            result.setTangents(serializationObject.tangents);\r\n        }\r\n        if (serializationObject.uvs) {\r\n            result.setUVs(serializationObject.uvs);\r\n        }\r\n\r\n        // Animations\r\n        if (serializationObject.animations) {\r\n            for (let animationIndex = 0; animationIndex < serializationObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializationObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    result.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializationObject.autoAnimate && scene) {\r\n                scene.beginAnimation(\r\n                    result,\r\n                    serializationObject.autoAnimateFrom,\r\n                    serializationObject.autoAnimateTo,\r\n                    serializationObject.autoAnimateLoop,\r\n                    serializationObject.autoAnimateSpeed || 1.0\r\n                );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a MorphTarget from mesh data\r\n     * @param mesh defines the source mesh\r\n     * @param name defines the name to use for the new target\r\n     * @param influence defines the influence to attach to the target\r\n     * @returns a new MorphTarget\r\n     */\r\n    public static FromMesh(mesh: AbstractMesh, name?: string, influence?: number): MorphTarget {\r\n        if (!name) {\r\n            name = mesh.name;\r\n        }\r\n\r\n        const result = new MorphTarget(name, influence, mesh.getScene());\r\n\r\n        result.setPositions(<FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind));\r\n\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            result.setNormals(<FloatArray>mesh.getVerticesData(VertexBuffer.NormalKind));\r\n        }\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            result.setTangents(<FloatArray>mesh.getVerticesData(VertexBuffer.TangentKind));\r\n        }\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            result.setUVs(<FloatArray>mesh.getVerticesData(VertexBuffer.UVKind));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Class used to store 2D array textures containing user data\r\n */\r\nexport class RawTexture2DArray extends Texture {\r\n    private _depth: number;\r\n\r\n    /**\r\n     * Gets the number of layers of the texture\r\n     */\r\n    public get depth() {\r\n        return this._depth;\r\n    }\r\n\r\n    /**\r\n     * Create a new RawTexture2DArray\r\n     * @param data defines the data of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param depth defines the number of layers of the texture\r\n     * @param format defines the texture format to use\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n     * @param invertY defines if texture must be stored with Y axis inverted\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     */\r\n    constructor(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        /** Gets or sets the texture format to use */\r\n        public format: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        creationFlags?: number\r\n    ) {\r\n        super(null, scene, !generateMipMaps, invertY);\r\n\r\n        this._texture = scene.getEngine().createRawTexture2DArray(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType, creationFlags);\r\n\r\n        this._depth = depth;\r\n        this.is2DArray = true;\r\n    }\r\n\r\n    /**\r\n     * Update the texture with new data\r\n     * @param data defines the data to store in the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this._getEngine()!.updateRawTexture2DArray(this._texture, data, this._texture.format, this._texture!.invertY, null, this._texture.type);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param depth defines the number of layers of the texture\r\n     * @param scene defines the scene the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(\r\n        data: ArrayBufferView,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ): RawTexture2DArray {\r\n        return new RawTexture2DArray(data, width, height, depth, Constants.TEXTUREFORMAT_RGBA, scene, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n}\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { MorphTarget } from \"./morphTarget\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RawTexture2DArray } from \"../Materials/Textures/rawTexture2DArray\";\r\nimport type { AbstractScene } from \"../abstractScene\";\r\n/**\r\n * This class is used to deform meshes using morphing between different targets\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n */\r\nexport class MorphTargetManager implements IDisposable {\r\n    /** Enable storing morph target data into textures when set to true (true by default) */\r\n    public static EnableTextureStorage = true;\r\n\r\n    /** Maximum number of active morph targets supported in the \"vertex attribute\" mode (i.e., not the \"texture\" mode) */\r\n    public static MaxActiveMorphTargetsInVertexAttributeMode = 8;\r\n\r\n    private _targets = new Array<MorphTarget>();\r\n    private _targetInfluenceChangedObservers = new Array<Nullable<Observer<boolean>>>();\r\n    private _targetDataLayoutChangedObservers = new Array<Nullable<Observer<void>>>();\r\n    private _activeTargets = new SmartArray<MorphTarget>(16);\r\n    private _scene: Nullable<Scene>;\r\n    private _influences: Float32Array;\r\n    private _morphTargetTextureIndices: Float32Array;\r\n    private _supportsNormals = false;\r\n    private _supportsTangents = false;\r\n    private _supportsUVs = false;\r\n    private _vertexCount = 0;\r\n    private _textureVertexStride = 0;\r\n    private _textureWidth = 0;\r\n    private _textureHeight = 1;\r\n    private _uniqueId = 0;\r\n    private _tempInfluences = new Array<number>();\r\n    private _canUseTextureForTargets = false;\r\n    private _blockCounter = 0;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<AbstractScene> = null;\r\n\r\n    /** @internal */\r\n    public _targetStoreTexture: Nullable<RawTexture2DArray>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if influencers must be optimized (eg. recompiling the shader if less influencers are used)\r\n     */\r\n    public optimizeInfluencers = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if normals must be morphed\r\n     */\r\n    public enableNormalMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if tangents must be morphed\r\n     */\r\n    public enableTangentMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if UV must be morphed\r\n     */\r\n    public enableUVMorphing = true;\r\n\r\n    /**\r\n     * Sets a boolean indicating that adding new target or updating an existing target will not update the underlying data buffers\r\n     */\r\n    public set areUpdatesFrozen(block: boolean) {\r\n        if (block) {\r\n            this._blockCounter++;\r\n        } else {\r\n            this._blockCounter--;\r\n            if (this._blockCounter <= 0) {\r\n                this._blockCounter = 0;\r\n\r\n                this._syncActiveTargets(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get areUpdatesFrozen() {\r\n        return this._blockCounter > 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager\r\n     * @param scene defines the current scene\r\n     */\r\n    public constructor(scene: Nullable<Scene> = null) {\r\n        if (!scene) {\r\n            scene = EngineStore.LastCreatedScene;\r\n        }\r\n\r\n        this._scene = scene;\r\n\r\n        if (this._scene) {\r\n            this._scene.addMorphTargetManager(this);\r\n\r\n            this._uniqueId = this._scene.getUniqueId();\r\n\r\n            const engineCaps = this._scene.getEngine().getCaps();\r\n            this._canUseTextureForTargets =\r\n                engineCaps.canUseGLVertexID && engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0 && engineCaps.texture2DArrayMaxLayerCount > 1;\r\n        }\r\n    }\r\n\r\n    private _numMaxInfluencers = 0;\r\n\r\n    /**\r\n     * Gets or sets the maximum number of influencers (targets) (default value: 0).\r\n     * Setting a value for this property can lead to a smoother experience, as only one shader will be compiled, which will use this value as the maximum number of influencers.\r\n     * If you leave the value at 0 (default), a new shader will be compiled every time the number of active influencers changes. This can cause problems, as compiling a shader takes time.\r\n     * If you assign a non-zero value to this property, you need to ensure that this value is greater than the maximum number of (active) influencers you'll need for this morph manager.\r\n     * Otherwise, the number of active influencers will be truncated at the value you set for this property, which can lead to unexpected results.\r\n     * Note that this property has no effect if \"useTextureToStoreTargets\" is false.\r\n     */\r\n    public get numMaxInfluencers(): number {\r\n        return this._numMaxInfluencers;\r\n    }\r\n\r\n    public set numMaxInfluencers(value: number) {\r\n        if (this._numMaxInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._numMaxInfluencers = value;\r\n        this._syncActiveTargets(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this manager\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of vertices handled by this manager\r\n     */\r\n    public get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of normals\r\n     */\r\n    public get supportsNormals(): boolean {\r\n        return this._supportsNormals && this.enableNormalMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of tangents\r\n     */\r\n    public get supportsTangents(): boolean {\r\n        return this._supportsTangents && this.enableTangentMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of texture coordinates\r\n     */\r\n    public get supportsUVs(): boolean {\r\n        return this._supportsUVs && this.enableUVMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of targets stored in this manager\r\n     */\r\n    public get numTargets(): number {\r\n        return this._targets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of influencers (ie. the number of targets with influences > 0)\r\n     */\r\n    public get numInfluencers(): number {\r\n        return this._activeTargets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of influences (one per target)\r\n     */\r\n    public get influences(): Float32Array {\r\n        return this._influences;\r\n    }\r\n\r\n    private _useTextureToStoreTargets = true;\r\n    /**\r\n     * Gets or sets a boolean indicating that targets should be stored as a texture instead of using vertex attributes (default is true).\r\n     * Please note that this option is not available if the hardware does not support it\r\n     */\r\n    public get useTextureToStoreTargets(): boolean {\r\n        return this._useTextureToStoreTargets;\r\n    }\r\n\r\n    public set useTextureToStoreTargets(value: boolean) {\r\n        this._useTextureToStoreTargets = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the targets are stored into a texture (instead of as attributes)\r\n     */\r\n    public get isUsingTextureForTargets() {\r\n        return (\r\n            MorphTargetManager.EnableTextureStorage &&\r\n            this.useTextureToStoreTargets &&\r\n            this._canUseTextureForTargets &&\r\n            !this._scene?.getEngine().getCaps().disableMorphTargetTexture\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the active target at specified index. An active target is a target with an influence > 0\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getActiveTarget(index: number): MorphTarget {\r\n        return this._activeTargets.data[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the target at specified index\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getTarget(index: number): MorphTarget {\r\n        return this._targets[index];\r\n    }\r\n\r\n    /**\r\n     * Add a new target to this manager\r\n     * @param target defines the target to add\r\n     */\r\n    public addTarget(target: MorphTarget): void {\r\n        this._targets.push(target);\r\n        this._targetInfluenceChangedObservers.push(\r\n            target.onInfluenceChanged.add((needUpdate) => {\r\n                this._syncActiveTargets(needUpdate);\r\n            })\r\n        );\r\n        this._targetDataLayoutChangedObservers.push(\r\n            target._onDataLayoutChanged.add(() => {\r\n                this._syncActiveTargets(true);\r\n            })\r\n        );\r\n        this._syncActiveTargets(true);\r\n    }\r\n\r\n    /**\r\n     * Removes a target from the manager\r\n     * @param target defines the target to remove\r\n     */\r\n    public removeTarget(target: MorphTarget): void {\r\n        const index = this._targets.indexOf(target);\r\n        if (index >= 0) {\r\n            this._targets.splice(index, 1);\r\n\r\n            target.onInfluenceChanged.remove(this._targetInfluenceChangedObservers.splice(index, 1)[0]);\r\n            target._onDataLayoutChanged.remove(this._targetDataLayoutChangedObservers.splice(index, 1)[0]);\r\n            this._syncActiveTargets(true);\r\n        }\r\n\r\n        if (this._scene) {\r\n            this._scene.stopAnimation(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(effect: Effect) {\r\n        effect.setFloat3(\"morphTargetTextureInfo\", this._textureVertexStride, this._textureWidth, this._textureHeight);\r\n        effect.setFloatArray(\"morphTargetTextureIndices\", this._morphTargetTextureIndices);\r\n        effect.setTexture(\"morphTargets\", this._targetStoreTexture);\r\n        effect.setInt(\"morphTargetCount\", this.numInfluencers);\r\n    }\r\n\r\n    /**\r\n     * Clone the current manager\r\n     * @returns a new MorphTargetManager\r\n     */\r\n    public clone(): MorphTargetManager {\r\n        const copy = new MorphTargetManager(this._scene);\r\n\r\n        for (const target of this._targets) {\r\n            copy.addTarget(target.clone());\r\n        }\r\n\r\n        copy.enableNormalMorphing = this.enableNormalMorphing;\r\n        copy.enableTangentMorphing = this.enableTangentMorphing;\r\n        copy.enableUVMorphing = this.enableUVMorphing;\r\n\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current manager into a Serialization object\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.uniqueId;\r\n\r\n        serializationObject.targets = [];\r\n        for (const target of this._targets) {\r\n            serializationObject.targets.push(target.serialize());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _syncActiveTargets(needUpdate: boolean): void {\r\n        if (this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        let influenceCount = 0;\r\n        this._activeTargets.reset();\r\n        this._supportsNormals = true;\r\n        this._supportsTangents = true;\r\n        this._supportsUVs = true;\r\n        this._vertexCount = 0;\r\n\r\n        if (this._scene && this._targets.length > this._scene.getEngine().getCaps().texture2DArrayMaxLayerCount) {\r\n            this.useTextureToStoreTargets = false;\r\n        }\r\n\r\n        if (!this._morphTargetTextureIndices || this._morphTargetTextureIndices.length !== this._targets.length) {\r\n            this._morphTargetTextureIndices = new Float32Array(this._targets.length);\r\n        }\r\n\r\n        let targetIndex = -1;\r\n        for (const target of this._targets) {\r\n            targetIndex++;\r\n            if (target.influence === 0 && this.optimizeInfluencers) {\r\n                continue;\r\n            }\r\n\r\n            if (this._activeTargets.length >= MorphTargetManager.MaxActiveMorphTargetsInVertexAttributeMode && !this.isUsingTextureForTargets) {\r\n                break;\r\n            }\r\n\r\n            this._activeTargets.push(target);\r\n            this._morphTargetTextureIndices[influenceCount] = targetIndex;\r\n            this._tempInfluences[influenceCount++] = target.influence;\r\n\r\n            this._supportsNormals = this._supportsNormals && target.hasNormals;\r\n            this._supportsTangents = this._supportsTangents && target.hasTangents;\r\n            this._supportsUVs = this._supportsUVs && target.hasUVs;\r\n\r\n            const positions = target.getPositions();\r\n            if (positions) {\r\n                const vertexCount = positions.length / 3;\r\n                if (this._vertexCount === 0) {\r\n                    this._vertexCount = vertexCount;\r\n                } else if (this._vertexCount !== vertexCount) {\r\n                    Logger.Error(\"Incompatible target. Targets must all have the same vertices count.\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._morphTargetTextureIndices.length !== influenceCount) {\r\n            this._morphTargetTextureIndices = this._morphTargetTextureIndices.slice(0, influenceCount);\r\n        }\r\n\r\n        if (!this._influences || this._influences.length !== influenceCount) {\r\n            this._influences = new Float32Array(influenceCount);\r\n        }\r\n\r\n        for (let index = 0; index < influenceCount; index++) {\r\n            this._influences[index] = this._tempInfluences[index];\r\n        }\r\n\r\n        if (needUpdate) {\r\n            this.synchronize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Synchronize the targets with all the meshes using this morph target manager\r\n     */\r\n    public synchronize(): void {\r\n        if (!this._scene || this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        if (this.isUsingTextureForTargets && (this._vertexCount || this.numMaxInfluencers > 0)) {\r\n            this._textureVertexStride = 1;\r\n\r\n            if (this._supportsNormals) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            if (this._supportsTangents) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            if (this._supportsUVs) {\r\n                this._textureVertexStride++;\r\n            }\r\n\r\n            this._textureWidth = this._vertexCount * this._textureVertexStride || 1;\r\n            this._textureHeight = 1;\r\n\r\n            const maxTextureSize = this._scene.getEngine().getCaps().maxTextureSize;\r\n            if (this._textureWidth > maxTextureSize) {\r\n                this._textureHeight = Math.ceil(this._textureWidth / maxTextureSize);\r\n                this._textureWidth = maxTextureSize;\r\n            }\r\n\r\n            let mustUpdateTexture = true;\r\n            if (this._targetStoreTexture) {\r\n                const textureSize = this._targetStoreTexture.getSize();\r\n                if (textureSize.width === this._textureWidth && textureSize.height === this._textureHeight && this._targetStoreTexture.depth === this._targets.length) {\r\n                    mustUpdateTexture = false;\r\n                }\r\n            }\r\n\r\n            if (mustUpdateTexture) {\r\n                if (this._targetStoreTexture) {\r\n                    this._targetStoreTexture.dispose();\r\n                }\r\n\r\n                const targetCount = this._targets.length;\r\n                const data = new Float32Array(targetCount * this._textureWidth * this._textureHeight * 4);\r\n\r\n                let offset = 0;\r\n                for (let index = 0; index < targetCount; index++) {\r\n                    const target = this._targets[index];\r\n\r\n                    const positions = target.getPositions();\r\n                    const normals = target.getNormals();\r\n                    const uvs = target.getUVs();\r\n                    const tangents = target.getTangents();\r\n\r\n                    if (!positions) {\r\n                        if (index === 0) {\r\n                            Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    offset = index * this._textureWidth * this._textureHeight * 4;\r\n                    for (let vertex = 0; vertex < this._vertexCount; vertex++) {\r\n                        data[offset] = positions[vertex * 3];\r\n                        data[offset + 1] = positions[vertex * 3 + 1];\r\n                        data[offset + 2] = positions[vertex * 3 + 2];\r\n\r\n                        offset += 4;\r\n\r\n                        if (this._supportsNormals && normals) {\r\n                            data[offset] = normals[vertex * 3];\r\n                            data[offset + 1] = normals[vertex * 3 + 1];\r\n                            data[offset + 2] = normals[vertex * 3 + 2];\r\n                            offset += 4;\r\n                        }\r\n\r\n                        if (this._supportsUVs && uvs) {\r\n                            data[offset] = uvs[vertex * 2];\r\n                            data[offset + 1] = uvs[vertex * 2 + 1];\r\n                            offset += 4;\r\n                        }\r\n\r\n                        if (this._supportsTangents && tangents) {\r\n                            data[offset] = tangents[vertex * 3];\r\n                            data[offset + 1] = tangents[vertex * 3 + 1];\r\n                            data[offset + 2] = tangents[vertex * 3 + 2];\r\n                            offset += 4;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._targetStoreTexture = RawTexture2DArray.CreateRGBATexture(\r\n                    data,\r\n                    this._textureWidth,\r\n                    this._textureHeight,\r\n                    targetCount,\r\n                    this._scene,\r\n                    false,\r\n                    false,\r\n                    Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                    Constants.TEXTURETYPE_FLOAT\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flag meshes as dirty to resync with the active targets\r\n        for (const mesh of this._scene.meshes) {\r\n            if ((<any>mesh).morphTargetManager === this) {\r\n                (<Mesh>mesh)._syncGeometryWithMorphTargetManager();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose() {\r\n        if (this._targetStoreTexture) {\r\n            this._targetStoreTexture.dispose();\r\n        }\r\n\r\n        this._targetStoreTexture = null;\r\n\r\n        // Remove from scene\r\n        if (this._scene) {\r\n            this._scene.removeMorphTargetManager(this);\r\n\r\n            if (this._parentContainer) {\r\n                const index = this._parentContainer.morphTargetManagers.indexOf(this);\r\n                if (index > -1) {\r\n                    this._parentContainer.morphTargetManagers.splice(index, 1);\r\n                }\r\n                this._parentContainer = null;\r\n            }\r\n\r\n            for (const morph of this._targets) {\r\n                this._scene.stopAnimation(morph);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager from serialized data\r\n     * @param serializationObject defines the serialized data\r\n     * @param scene defines the hosting scene\r\n     * @returns the new MorphTargetManager\r\n     */\r\n    public static Parse(serializationObject: any, scene: Scene): MorphTargetManager {\r\n        const result = new MorphTargetManager(scene);\r\n\r\n        result._uniqueId = serializationObject.id;\r\n\r\n        for (const targetData of serializationObject.targets) {\r\n            result.addTarget(MorphTarget.Parse(targetData, scene));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { serialize, serializeAsMatrix, serializeAsVector3 } from \"../../Misc/decorators\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\n\r\nimport \"../../Engines/Extensions/engine.cubeTexture\";\r\nimport { Observable } from \"../../Misc/observable\";\r\n\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Class for creating a cube texture\r\n */\r\nexport class CubeTexture extends BaseTexture {\r\n    private _delayedOnLoad: Nullable<() => void>;\r\n    private _delayedOnError: Nullable<(message?: string, exception?: any) => void>;\r\n    private _lodScale: number = 0.8;\r\n    private _lodOffset: number = 0;\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<CubeTexture> = new Observable<CubeTexture>();\r\n\r\n    /**\r\n     * The url of the texture\r\n     */\r\n    @serialize()\r\n    public url: string;\r\n\r\n    /**\r\n     * Gets or sets the center of the bounding box associated with the cube texture.\r\n     * It must define where the camera used to render the texture was set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#using-local-cubemap-mode\r\n     */\r\n    @serializeAsVector3()\r\n    public boundingBoxPosition = Vector3.Zero();\r\n\r\n    private _boundingBoxSize: Vector3;\r\n\r\n    /**\r\n     * Gets or sets the size of the bounding box associated with the cube texture\r\n     * When defined, the cubemap will switch to local mode\r\n     * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\r\n     * @example https://www.babylonjs-playground.com/#RNASML\r\n     */\r\n    public set boundingBoxSize(value: Vector3) {\r\n        if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\r\n            return;\r\n        }\r\n        this._boundingBoxSize = value;\r\n        const scene = this.getScene();\r\n        if (scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the bounding box size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#using-local-cubemap-mode\r\n     */\r\n    @serializeAsVector3()\r\n    public get boundingBoxSize(): Vector3 {\r\n        return this._boundingBoxSize;\r\n    }\r\n\r\n    protected _rotationY: number = 0;\r\n\r\n    /**\r\n     * Sets texture matrix rotation angle around Y axis in radians.\r\n     */\r\n    @serialize(\"rotationY\")\r\n    public set rotationY(value: number) {\r\n        this._rotationY = value;\r\n        this.setReflectionTextureMatrix(Matrix.RotationY(this._rotationY));\r\n    }\r\n    /**\r\n     * Gets texture matrix rotation angle around Y axis radians.\r\n     */\r\n    public get rotationY(): number {\r\n        return this._rotationY;\r\n    }\r\n\r\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\r\n    public get noMipmap(): boolean {\r\n        return this._noMipmap;\r\n    }\r\n\r\n    private _noMipmap: boolean;\r\n\r\n    /** @internal */\r\n    @serialize(\"files\")\r\n    public _files: Nullable<string[]> = null;\r\n\r\n    @serialize(\"forcedExtension\")\r\n    protected _forcedExtension: Nullable<string> = null;\r\n\r\n    /**\r\n     * Gets the forced extension (if any)\r\n     */\r\n    public get forcedExtension(): Nullable<string> {\r\n        return this._forcedExtension;\r\n    }\r\n\r\n    @serialize(\"extensions\")\r\n    private _extensions: Nullable<string[]> = null;\r\n\r\n    @serializeAsMatrix(\"textureMatrix\")\r\n    private _textureMatrix: Matrix;\r\n\r\n    @serializeAsMatrix(\"textureMatrixRefraction\")\r\n    private _textureMatrixRefraction: Matrix = new Matrix();\r\n\r\n    private _format: number;\r\n    private _createPolynomials: boolean;\r\n    private _loaderOptions: any;\r\n    private _useSRGBBuffer?: boolean;\r\n\r\n    /**\r\n     * Creates a cube texture from an array of image urls\r\n     * @param files defines an array of image urls\r\n     * @param scene defines the hosting scene\r\n     * @param noMipmap specifies if mip maps are not used\r\n     * @returns a cube texture\r\n     */\r\n    public static CreateFromImages(files: string[], scene: Scene, noMipmap?: boolean): CubeTexture {\r\n        let rootUrlKey = \"\";\r\n\r\n        files.forEach((url) => (rootUrlKey += url));\r\n\r\n        return new CubeTexture(rootUrlKey, scene, null, noMipmap, files);\r\n    }\r\n\r\n    /**\r\n     * Creates and return a texture created from prefilterd data by tools like IBL Baker or Lys.\r\n     * @param url defines the url of the prefiltered texture\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param forcedExtension defines the extension of the file if different from the url\r\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\r\n     * @returns the prefiltered texture\r\n     */\r\n    public static CreateFromPrefilteredData(url: string, scene: Scene, forcedExtension: any = null, createPolynomials: boolean = true) {\r\n        const oldValue = scene.useDelayedTextureLoading;\r\n        scene.useDelayedTextureLoading = false;\r\n\r\n        const result = new CubeTexture(url, scene, null, false, null, null, null, undefined, true, forcedExtension, createPolynomials);\r\n\r\n        scene.useDelayedTextureLoading = oldValue;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a cube texture to use with reflection for instance. It can be based upon dds or six images as well\r\n     * as prefiltered data.\r\n     * @param rootUrl defines the url of the texture or the root name of the six images\r\n     * @param sceneOrEngine defines the scene or engine the texture is attached to\r\n     * @param extensions defines the suffixes add to the picture name in case six images are in use like _px.jpg...\r\n     * @param noMipmap defines if mipmaps should be created or not\r\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\r\n     * @param onLoad defines a callback triggered at the end of the file load if no errors occurred\r\n     * @param onError defines a callback triggered in case of error during load\r\n     * @param format defines the internal format to use for the texture once loaded\r\n     * @param prefiltered defines whether or not the texture is created from prefiltered data\r\n     * @param forcedExtension defines the extensions to use (force a special type of file to load) in case it is different from the file name\r\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @param loaderOptions options to be passed to the loader\r\n     * @param useSRGBBuffer Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false)\r\n     * @returns the cube texture\r\n     */\r\n    constructor(\r\n        rootUrl: string,\r\n        sceneOrEngine: Scene | ThinEngine,\r\n        extensions: Nullable<string[]> = null,\r\n        noMipmap: boolean = false,\r\n        files: Nullable<string[]> = null,\r\n        onLoad: Nullable<() => void> = null,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        prefiltered = false,\r\n        forcedExtension: any = null,\r\n        createPolynomials: boolean = false,\r\n        lodScale: number = 0.8,\r\n        lodOffset: number = 0,\r\n        loaderOptions?: any,\r\n        useSRGBBuffer?: boolean\r\n    ) {\r\n        super(sceneOrEngine);\r\n\r\n        this.name = rootUrl;\r\n        this.url = rootUrl;\r\n        this._noMipmap = noMipmap;\r\n        this.hasAlpha = false;\r\n        this._format = format;\r\n        this.isCube = true;\r\n        this._textureMatrix = Matrix.Identity();\r\n        this._createPolynomials = createPolynomials;\r\n        this.coordinatesMode = Texture.CUBIC_MODE;\r\n        this._extensions = extensions;\r\n        this._files = files;\r\n        this._forcedExtension = forcedExtension;\r\n        this._loaderOptions = loaderOptions;\r\n        this._useSRGBBuffer = useSRGBBuffer;\r\n        this._lodScale = lodScale;\r\n        this._lodOffset = lodOffset;\r\n\r\n        if (!rootUrl && !files) {\r\n            return;\r\n        }\r\n\r\n        this.updateURL(rootUrl, forcedExtension, onLoad, prefiltered, onError, extensions, this.getScene()?.useDelayedTextureLoading, files);\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"CubeTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"CubeTexture\";\r\n    }\r\n\r\n    /**\r\n     * Update the url (and optional buffer) of this texture if url was null during construction.\r\n     * @param url the url of the texture\r\n     * @param forcedExtension defines the extension to use\r\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\r\n     * @param prefiltered Defines whether the updated texture is prefiltered or not\r\n     * @param onError callback called if there was an error during the loading process (defaults to null)\r\n     * @param extensions defines the suffixes add to the picture name in case six images are in use like _px.jpg...\r\n     * @param delayLoad defines if the texture should be loaded now (false by default)\r\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\r\n     */\r\n    public updateURL(\r\n        url: string,\r\n        forcedExtension?: string,\r\n        onLoad: Nullable<() => void> = null,\r\n        prefiltered: boolean = false,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        extensions: Nullable<string[]> = null,\r\n        delayLoad = false,\r\n        files: Nullable<string[]> = null\r\n    ): void {\r\n        if (!this.name || this.name.startsWith(\"data:\")) {\r\n            this.name = url;\r\n        }\r\n        this.url = url;\r\n\r\n        if (forcedExtension) {\r\n            this._forcedExtension = forcedExtension;\r\n        }\r\n\r\n        const lastDot = url.lastIndexOf(\".\");\r\n        const extension = forcedExtension ? forcedExtension : lastDot > -1 ? url.substring(lastDot).toLowerCase() : \"\";\r\n        const isDDS = extension.indexOf(\".dds\") === 0;\r\n        const isEnv = extension.indexOf(\".env\") === 0;\r\n        const isBasis = extension.indexOf(\".basis\") === 0;\r\n\r\n        if (isEnv) {\r\n            this.gammaSpace = false;\r\n            this._prefiltered = false;\r\n            this.anisotropicFilteringLevel = 1;\r\n        } else {\r\n            this._prefiltered = prefiltered;\r\n\r\n            if (prefiltered) {\r\n                this.gammaSpace = false;\r\n                this.anisotropicFilteringLevel = 1;\r\n            }\r\n        }\r\n\r\n        if (files) {\r\n            this._files = files;\r\n        } else {\r\n            if (!isBasis && !isEnv && !isDDS && !extensions) {\r\n                extensions = [\"_px.jpg\", \"_py.jpg\", \"_pz.jpg\", \"_nx.jpg\", \"_ny.jpg\", \"_nz.jpg\"];\r\n            }\r\n\r\n            this._files = this._files || [];\r\n            this._files.length = 0;\r\n\r\n            if (extensions) {\r\n                for (let index = 0; index < extensions.length; index++) {\r\n                    this._files.push(url + extensions[index]);\r\n                }\r\n                this._extensions = extensions;\r\n            }\r\n        }\r\n\r\n        if (delayLoad) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            this._delayedOnLoad = onLoad;\r\n            this._delayedOnError = onError;\r\n        } else {\r\n            this._loadTexture(onLoad, onError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delays loading of the cube texture\r\n     * @param forcedExtension defines the extension to use\r\n     */\r\n    public delayLoad(forcedExtension?: string): void {\r\n        if (this.delayLoadState !== Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            return;\r\n        }\r\n        if (forcedExtension) {\r\n            this._forcedExtension = forcedExtension;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n        this._loadTexture(this._delayedOnLoad, this._delayedOnError);\r\n    }\r\n\r\n    /**\r\n     * Returns the reflection texture matrix\r\n     * @returns the reflection texture matrix\r\n     */\r\n    public getReflectionTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sets the reflection texture matrix\r\n     * @param value Reflection texture matrix\r\n     */\r\n    public setReflectionTextureMatrix(value: Matrix): void {\r\n        if (value.updateFlag === this._textureMatrix.updateFlag) {\r\n            return;\r\n        }\r\n\r\n        if (value.isIdentity() !== this._textureMatrix.isIdentity()) {\r\n            this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => mat.getActiveTextures().indexOf(this) !== -1);\r\n        }\r\n\r\n        this._textureMatrix = value;\r\n\r\n        if (!this.getScene()?.useRightHandedSystem) {\r\n            return;\r\n        }\r\n\r\n        const scale = TmpVectors.Vector3[0];\r\n        const quat = TmpVectors.Quaternion[0];\r\n        const trans = TmpVectors.Vector3[1];\r\n\r\n        this._textureMatrix.decompose(scale, quat, trans);\r\n\r\n        quat.z *= -1; // these two operations correspond to negating the x and y euler angles\r\n        quat.w *= -1;\r\n\r\n        Matrix.ComposeToRef(scale, quat, trans, this._textureMatrixRefraction);\r\n    }\r\n\r\n    /**\r\n     * Gets a suitable rotate/transform matrix when the texture is used for refraction.\r\n     * There's a separate function from getReflectionTextureMatrix because refraction requires a special configuration of the matrix in right-handed mode.\r\n     * @returns The refraction matrix\r\n     */\r\n    public getRefractionTextureMatrix(): Matrix {\r\n        return this.getScene()?.useRightHandedSystem ? this._textureMatrixRefraction : this._textureMatrix;\r\n    }\r\n\r\n    private _loadTexture(onLoad: Nullable<() => void> = null, onError: Nullable<(message?: string, exception?: any) => void> = null) {\r\n        const scene = this.getScene();\r\n        const oldTexture = this._texture;\r\n        this._texture = this._getFromCache(this.url, this._noMipmap, undefined, undefined, this._useSRGBBuffer, this.isCube);\r\n\r\n        const onLoadProcessing = () => {\r\n            this.onLoadObservable.notifyObservers(this);\r\n            if (oldTexture) {\r\n                oldTexture.dispose();\r\n                this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n            }\r\n            if (onLoad) {\r\n                onLoad();\r\n            }\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            this._loadingError = true;\r\n            this._errorObject = { message, exception };\r\n            if (onError) {\r\n                onError(message, exception);\r\n            }\r\n            Texture.OnTextureLoadErrorObservable.notifyObservers(this);\r\n        };\r\n\r\n        if (!this._texture) {\r\n            if (this._prefiltered) {\r\n                this._texture = this._getEngine()!.createPrefilteredCubeTexture(\r\n                    this.url,\r\n                    scene,\r\n                    this._lodScale,\r\n                    this._lodOffset,\r\n                    onLoad,\r\n                    errorHandler,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    this._createPolynomials\r\n                );\r\n            } else {\r\n                this._texture = this._getEngine()!.createCubeTexture(\r\n                    this.url,\r\n                    scene,\r\n                    this._files,\r\n                    this._noMipmap,\r\n                    onLoad,\r\n                    errorHandler,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    false,\r\n                    this._lodScale,\r\n                    this._lodOffset,\r\n                    null,\r\n                    this._loaderOptions,\r\n                    !!this._useSRGBBuffer\r\n                );\r\n            }\r\n\r\n            this._texture?.onLoadedObservable.add(() => this.onLoadObservable.notifyObservers(this));\r\n        } else {\r\n            if (this._texture.isReady) {\r\n                Tools.SetImmediate(() => onLoadProcessing());\r\n            } else {\r\n                this._texture.onLoadedObservable.add(() => onLoadProcessing());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses text to create a cube texture\r\n     * @param parsedTexture define the serialized text to read from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url of the cube texture\r\n     * @returns a cube texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): CubeTexture {\r\n        const texture = SerializationHelper.Parse(\r\n            () => {\r\n                let prefiltered: boolean = false;\r\n                if (parsedTexture.prefiltered) {\r\n                    prefiltered = parsedTexture.prefiltered;\r\n                }\r\n                return new CubeTexture(\r\n                    rootUrl + (parsedTexture.url ?? parsedTexture.name),\r\n                    scene,\r\n                    parsedTexture.extensions,\r\n                    false,\r\n                    parsedTexture.files || null,\r\n                    null,\r\n                    null,\r\n                    undefined,\r\n                    prefiltered,\r\n                    parsedTexture.forcedExtension\r\n                );\r\n            },\r\n            parsedTexture,\r\n            scene\r\n        );\r\n\r\n        // Local Cubemaps\r\n        if (parsedTexture.boundingBoxPosition) {\r\n            texture.boundingBoxPosition = Vector3.FromArray(parsedTexture.boundingBoxPosition);\r\n        }\r\n        if (parsedTexture.boundingBoxSize) {\r\n            texture.boundingBoxSize = Vector3.FromArray(parsedTexture.boundingBoxSize);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedTexture.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedTexture.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    texture.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * Makes a clone, or deep copy, of the cube texture\r\n     * @returns a new cube texture\r\n     */\r\n    public clone(): CubeTexture {\r\n        let uniqueId = 0;\r\n\r\n        const newCubeTexture = SerializationHelper.Clone(() => {\r\n            const cubeTexture = new CubeTexture(this.url, this.getScene() || this._getEngine()!, this._extensions, this._noMipmap, this._files);\r\n            uniqueId = cubeTexture.uniqueId;\r\n\r\n            return cubeTexture;\r\n        }, this);\r\n\r\n        newCubeTexture.uniqueId = uniqueId;\r\n\r\n        return newCubeTexture;\r\n    }\r\n}\r\n\r\nTexture._CubeTextureParser = CubeTexture.Parse;\r\n// Some exporters relies on Tools.Instantiate\r\nRegisterClass(\"BABYLON.CubeTexture\", CubeTexture);\r\n", "import { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\nimport { _UpdateRGBDAsync as UpdateRGBDAsyncEnvTools } from \"../../Misc/environmentTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { InternalTextureSource } from \"./internalTexture\";\r\nimport { CubeTexture } from \"./cubeTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\n\r\n/**\r\n * Raw cube texture where the raw buffers are passed in\r\n */\r\nexport class RawCubeTexture extends CubeTexture {\r\n    /**\r\n     * Creates a cube texture where the raw buffers are passed in.\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param data defines the array of data to use to create each face\r\n     * @param size defines the size of the textures\r\n     * @param format defines the format of the data\r\n     * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_INT)\r\n     * @param generateMipMaps  defines if the engine should generate the mip levels\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        data: Nullable<ArrayBufferView[]>,\r\n        size: number,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        generateMipMaps: boolean = false,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        compression: Nullable<string> = null\r\n    ) {\r\n        super(\"\", scene);\r\n\r\n        this._texture = scene.getEngine().createRawCubeTexture(data, size, format, type, generateMipMaps, invertY, samplingMode, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates the raw cube texture.\r\n     * @param data defines the data to store\r\n     * @param format defines the data format\r\n     * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    public update(data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string> = null): void {\r\n        (this._texture!.getEngine() as Engine).updateRawCubeTexture(this._texture!, data, format, type, invertY, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates a raw cube texture with RGBD encoded data.\r\n     * @param data defines the array of data [mipmap][face] to use to create each face\r\n     * @param sphericalPolynomial defines the spherical polynomial for irradiance\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @returns a promise that resolves when the operation is complete\r\n     */\r\n    public updateRGBDAsync(data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial> = null, lodScale: number = 0.8, lodOffset: number = 0): Promise<void> {\r\n        return UpdateRGBDAsyncEnvTools(this._texture!, data, sphericalPolynomial, lodScale, lodOffset).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Clones the raw cube texture.\r\n     * @returns a new cube texture\r\n     */\r\n    public clone(): CubeTexture {\r\n        return SerializationHelper.Clone(() => {\r\n            const scene = this.getScene()!;\r\n            const internalTexture = this._texture!;\r\n\r\n            const texture = new RawCubeTexture(\r\n                scene,\r\n                internalTexture._bufferViewArray!,\r\n                internalTexture.width,\r\n                internalTexture.format,\r\n                internalTexture.type,\r\n                internalTexture.generateMipMaps,\r\n                internalTexture.invertY,\r\n                internalTexture.samplingMode,\r\n                internalTexture._compression\r\n            );\r\n\r\n            if (internalTexture.source === InternalTextureSource.CubeRawRGBD) {\r\n                texture.updateRGBDAsync(\r\n                    internalTexture._bufferViewArrayArray!,\r\n                    internalTexture._sphericalPolynomial,\r\n                    internalTexture._lodGenerationScale,\r\n                    internalTexture._lodGenerationOffset\r\n                );\r\n            }\r\n\r\n            return texture;\r\n        }, this);\r\n    }\r\n}\r\n", "import { Tools } from \"../../Misc/tools\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let MeshoptDecoder: any;\r\n\r\n/**\r\n * Configuration for meshoptimizer compression\r\n */\r\nexport interface IMeshoptCompressionConfiguration {\r\n    /**\r\n     * Configuration for the decoder.\r\n     */\r\n    decoder: {\r\n        /**\r\n         * The url to the meshopt decoder library.\r\n         */\r\n        url: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\r\n *\r\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\r\n *\r\n * **Encoder**\r\n *\r\n * The encoder is not currently implemented.\r\n *\r\n * **Decoder**\r\n *\r\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\r\n *\r\n * To update the configuration, use the following code:\r\n * ```javascript\r\n *     MeshoptCompression.Configuration = {\r\n *         decoder: {\r\n *             url: \"<url to the meshopt decoder library>\"\r\n *         }\r\n *     };\r\n * ```\r\n */\r\nexport class MeshoptCompression implements IDisposable {\r\n    private _decoderModulePromise?: Promise<any>;\r\n\r\n    /**\r\n     * The configuration. Defaults to the following:\r\n     * ```javascript\r\n     * decoder: {\r\n     *   url: \"https://cdn.babylonjs.com/meshopt_decoder.js\"\r\n     * }\r\n     * ```\r\n     */\r\n    public static Configuration: IMeshoptCompressionConfiguration = {\r\n        decoder: {\r\n            url: `${Tools._DefaultCdnUrl}/meshopt_decoder.js`,\r\n        },\r\n    };\r\n\r\n    private static _Default: Nullable<MeshoptCompression> = null;\r\n\r\n    /**\r\n     * Default instance for the meshoptimizer object.\r\n     */\r\n    public static get Default(): MeshoptCompression {\r\n        if (!MeshoptCompression._Default) {\r\n            MeshoptCompression._Default = new MeshoptCompression();\r\n        }\r\n\r\n        return MeshoptCompression._Default;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        const decoder = MeshoptCompression.Configuration.decoder;\r\n\r\n        this._decoderModulePromise = Tools.LoadBabylonScriptAsync(decoder.url).then(() => {\r\n            // Wait for WebAssembly compilation before resolving promise\r\n            return MeshoptDecoder.ready;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        delete this._decoderModulePromise;\r\n    }\r\n\r\n    /**\r\n     * Decode meshopt data.\r\n     * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\r\n     * @param source The input data.\r\n     * @param count The number of elements.\r\n     * @param stride The stride in bytes.\r\n     * @param mode The compression mode.\r\n     * @param filter The compression filter.\r\n     * @returns a Promise<Uint8Array> that resolves to the decoded data\r\n     */\r\n    public decodeGltfBufferAsync(source: Uint8Array, count: number, stride: number, mode: \"ATTRIBUTES\" | \"TRIANGLES\" | \"INDICES\", filter?: string): Promise<Uint8Array> {\r\n        return this._decoderModulePromise!.then(() => {\r\n            const result = new Uint8Array(count * stride);\r\n            MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, mode, filter);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { DecoderBuffer, Decoder, Mesh, PointCloud, Status } from \"draco3dgltf\";\r\nimport { DracoDecoderModule } from \"draco3dgltf\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let DracoDecoderModule: DracoDecoderModule;\r\n\r\nexport interface AttributeData {\r\n    kind: string;\r\n    data: ArrayBufferView;\r\n    size: number;\r\n    byteOffset: number;\r\n    byteStride: number;\r\n    normalized: boolean;\r\n}\r\n\r\ninterface InitDoneMessage {\r\n    id: \"initDone\";\r\n}\r\n\r\ninterface DecodeMeshDoneMessage {\r\n    id: \"decodeMeshDone\";\r\n    totalVertices: number;\r\n}\r\n\r\ninterface IndicesMessage {\r\n    id: \"indices\";\r\n    data: Uint16Array | Uint32Array;\r\n}\r\n\r\ninterface AttributeMessage extends AttributeData {\r\n    id: \"attribute\";\r\n}\r\nexport type Message = InitDoneMessage | DecodeMeshDoneMessage | IndicesMessage | AttributeMessage;\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: Message, transfer?: any[]): void;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function decodeMesh(\r\n    decoderModule: any /*DecoderModule*/,\r\n    data: Int8Array,\r\n    attributes: { [kind: string]: number } | undefined,\r\n    onIndicesData: (indices: Uint16Array | Uint32Array) => void,\r\n    onAttributeData: (kind: string, data: ArrayBufferView, size: number, offset: number, stride: number, normalized: boolean) => void\r\n): number {\r\n    let decoder: Nullable<Decoder> = null;\r\n    let buffer: Nullable<DecoderBuffer> = null;\r\n    let geometry: Nullable<Mesh | PointCloud> = null;\r\n\r\n    try {\r\n        decoder = new decoderModule.Decoder() as Decoder;\r\n\r\n        buffer = new decoderModule.DecoderBuffer() as DecoderBuffer;\r\n        buffer.Init(data, data.byteLength);\r\n\r\n        let status: Status;\r\n        const type = decoder.GetEncodedGeometryType(buffer);\r\n        switch (type) {\r\n            case decoderModule.TRIANGULAR_MESH: {\r\n                const mesh = new decoderModule.Mesh();\r\n                status = decoder.DecodeBufferToMesh(buffer, mesh);\r\n                if (!status.ok() || mesh.ptr === 0) {\r\n                    throw new Error(status.error_msg());\r\n                }\r\n\r\n                const numFaces = mesh.num_faces();\r\n                const numIndices = numFaces * 3;\r\n                const byteLength = numIndices * 4;\r\n\r\n                const ptr = decoderModule._malloc(byteLength);\r\n                try {\r\n                    decoder.GetTrianglesUInt32Array(mesh, byteLength, ptr);\r\n                    const indices = new Uint32Array(numIndices);\r\n                    indices.set(new Uint32Array(decoderModule.HEAPF32.buffer, ptr, numIndices));\r\n                    onIndicesData(indices);\r\n                } finally {\r\n                    decoderModule._free(ptr);\r\n                }\r\n\r\n                geometry = mesh as Mesh;\r\n                break;\r\n            }\r\n            case decoderModule.POINT_CLOUD: {\r\n                const pointCloud = new decoderModule.PointCloud();\r\n                status = decoder.DecodeBufferToPointCloud(buffer, pointCloud);\r\n                if (!status.ok() || !pointCloud.ptr) {\r\n                    throw new Error(status.error_msg());\r\n                }\r\n\r\n                geometry = pointCloud as PointCloud;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid geometry type ${type}`);\r\n            }\r\n        }\r\n\r\n        const numPoints = geometry.num_points();\r\n\r\n        const processAttribute = (decoder: Decoder, geometry: Mesh | PointCloud, kind: string, attribute: any) => {\r\n            const dataType = attribute.data_type();\r\n            const numComponents = attribute.num_components();\r\n            const normalized = attribute.normalized();\r\n            const byteStride = attribute.byte_stride();\r\n            const byteOffset = attribute.byte_offset();\r\n\r\n            const dataTypeInfo = {\r\n                [decoderModule.DT_FLOAT32]: { typedArrayConstructor: Float32Array, heap: decoderModule.HEAPF32 },\r\n                [decoderModule.DT_INT8]: { typedArrayConstructor: Int8Array, heap: decoderModule.HEAP8 },\r\n                [decoderModule.DT_INT16]: { typedArrayConstructor: Int16Array, heap: decoderModule.HEAP16 },\r\n                [decoderModule.DT_INT32]: { typedArrayConstructor: Int32Array, heap: decoderModule.HEAP32 },\r\n                [decoderModule.DT_UINT8]: { typedArrayConstructor: Uint8Array, heap: decoderModule.HEAPU8 },\r\n                [decoderModule.DT_UINT16]: { typedArrayConstructor: Uint16Array, heap: decoderModule.HEAPU16 },\r\n                [decoderModule.DT_UINT32]: { typedArrayConstructor: Uint32Array, heap: decoderModule.HEAPU32 },\r\n            };\r\n\r\n            const info = dataTypeInfo[dataType];\r\n            if (!info) {\r\n                throw new Error(`Invalid data type ${dataType}`);\r\n            }\r\n\r\n            const numValues = numPoints * numComponents;\r\n            const byteLength = numValues * info.typedArrayConstructor.BYTES_PER_ELEMENT;\r\n\r\n            const ptr = decoderModule._malloc(byteLength);\r\n            try {\r\n                decoder.GetAttributeDataArrayForAllPoints(geometry, attribute, dataType, byteLength, ptr);\r\n                const data = new info.typedArrayConstructor(info.heap.buffer, ptr, numValues);\r\n                onAttributeData(kind, data.slice(), numComponents, byteOffset, byteStride, normalized);\r\n            } finally {\r\n                decoderModule._free(ptr);\r\n            }\r\n        };\r\n\r\n        if (attributes) {\r\n            for (const kind in attributes) {\r\n                const id = attributes[kind];\r\n                const attribute = decoder.GetAttributeByUniqueId(geometry, id);\r\n                processAttribute(decoder, geometry, kind, attribute);\r\n            }\r\n        } else {\r\n            const dracoAttributeTypes: { [kind: string]: number } = {\r\n                position: decoderModule.POSITION,\r\n                normal: decoderModule.NORMAL,\r\n                color: decoderModule.COLOR,\r\n                uv: decoderModule.TEX_COORD,\r\n            };\r\n\r\n            for (const kind in dracoAttributeTypes) {\r\n                const id = decoder.GetAttributeId(geometry, dracoAttributeTypes[kind]);\r\n                if (id !== -1) {\r\n                    const attribute = decoder.GetAttribute(geometry, id);\r\n                    processAttribute(decoder, geometry, kind, attribute);\r\n                }\r\n            }\r\n        }\r\n\r\n        return numPoints;\r\n    } finally {\r\n        if (geometry) {\r\n            decoderModule.destroy(geometry);\r\n        }\r\n\r\n        if (buffer) {\r\n            decoderModule.destroy(buffer);\r\n        }\r\n\r\n        if (decoder) {\r\n            decoderModule.destroy(decoder);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\r\n */\r\nexport function workerFunction(): void {\r\n    let decoderPromise: PromiseLike<any> | undefined;\r\n\r\n    onmessage = (event) => {\r\n        const message = event.data;\r\n        switch (message.id) {\r\n            case \"init\": {\r\n                const decoder = message.decoder;\r\n                // if URL is provided then load the script. Otherwise expect the script to be loaded already\r\n                if (decoder.url) {\r\n                    importScripts(decoder.url);\r\n                }\r\n                decoderPromise = DracoDecoderModule({ wasmBinary: decoder.wasmBinary });\r\n                postMessage({ id: \"initDone\" });\r\n                break;\r\n            }\r\n            case \"decodeMesh\": {\r\n                if (!decoderPromise) {\r\n                    throw new Error(\"Draco decoder module is not available\");\r\n                }\r\n                decoderPromise.then((decoder) => {\r\n                    const numPoints = decodeMesh(\r\n                        decoder,\r\n                        message.dataView,\r\n                        message.attributes,\r\n                        (indices) => {\r\n                            postMessage({ id: \"indices\", data: indices }, [indices.buffer]);\r\n                        },\r\n                        (kind, data, size, offset, stride, normalized) => {\r\n                            postMessage({ id: \"attribute\", kind, data, size, byteOffset: offset, byteStride: stride, normalized }, [data.buffer]);\r\n                        }\r\n                    );\r\n                    postMessage({ id: \"decodeMeshDone\", totalVertices: numPoints });\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Initializes a worker that was created for the draco agent pool\r\n * @param worker  The worker to initialize\r\n * @param decoderWasmBinary The wasm binary to load into the worker\r\n * @param moduleUrl The url to the draco decoder module (optional)\r\n * @returns A promise that resolves when the worker is initialized\r\n */\r\nexport function initializeWebWorker(worker: Worker, decoderWasmBinary: ArrayBuffer, moduleUrl?: string): Promise<Worker> {\r\n    return new Promise<Worker>((resolve, reject) => {\r\n        const onError = (error: ErrorEvent) => {\r\n            worker.removeEventListener(\"error\", onError);\r\n            worker.removeEventListener(\"message\", onMessage);\r\n            reject(error);\r\n        };\r\n\r\n        const onMessage = (event: MessageEvent<Message>) => {\r\n            if (event.data.id === \"initDone\") {\r\n                worker.removeEventListener(\"error\", onError);\r\n                worker.removeEventListener(\"message\", onMessage);\r\n                resolve(worker);\r\n            }\r\n        };\r\n\r\n        worker.addEventListener(\"error\", onError);\r\n        worker.addEventListener(\"message\", onMessage);\r\n\r\n        // clone the array buffer to make it transferable\r\n        const clone = decoderWasmBinary.slice(0);\r\n        worker.postMessage(\r\n            {\r\n                id: \"init\",\r\n                decoder: {\r\n                    url: moduleUrl,\r\n                    wasmBinary: clone,\r\n                },\r\n            },\r\n            [clone]\r\n        );\r\n        // note: no transfer list as the ArrayBuffer is shared across main thread and pool workers\r\n    });\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { AutoReleaseWorkerPool } from \"../../Misc/workerPool\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IDisposable, Scene } from \"../../scene\";\r\nimport { Geometry } from \"../geometry\";\r\nimport { VertexBuffer } from \"../buffer\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { DecoderModule } from \"draco3dgltf\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { decodeMesh, type AttributeData, type Message, workerFunction, initializeWebWorker } from \"./dracoCompressionWorker\";\r\nimport { DracoDecoderModule } from \"draco3dgltf\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let DracoDecoderModule: DracoDecoderModule;\r\n\r\ninterface MeshData {\r\n    indices?: Uint16Array | Uint32Array;\r\n    attributes: Array<AttributeData>;\r\n    totalVertices: number;\r\n}\r\n\r\nfunction createDecoderAsync(wasmBinary?: ArrayBuffer, jsModule?: DracoDecoderModule): Promise<{ module: DecoderModule }> {\r\n    return new Promise((resolve) => {\r\n        (jsModule || DracoDecoderModule)({ wasmBinary }).then((module) => {\r\n            resolve({ module });\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Configuration for Draco compression\r\n */\r\nexport interface IDracoCompressionConfiguration {\r\n    /**\r\n     * Configuration for the decoder.\r\n     */\r\n    decoder: {\r\n        /**\r\n         * The url to the WebAssembly module.\r\n         */\r\n        wasmUrl?: string;\r\n\r\n        /**\r\n         * The url to the WebAssembly binary.\r\n         */\r\n        wasmBinaryUrl?: string;\r\n\r\n        /**\r\n         * The url to the fallback JavaScript module.\r\n         */\r\n        fallbackUrl?: string;\r\n        /**\r\n         * Optional worker pool to use for async decoding instead of creating a new worker pool.\r\n         */\r\n        workerPool?: AutoReleaseWorkerPool;\r\n        /**\r\n         * Optional ArrayBuffer of the WebAssembly binary\r\n         */\r\n        wasmBinary?: ArrayBuffer;\r\n\r\n        /**\r\n         * The decoder module if already available.\r\n         */\r\n        jsModule?: any /* DecoderModule */;\r\n    };\r\n}\r\n\r\n/**\r\n * Options for Draco compression\r\n */\r\nexport interface IDracoCompressionOptions {\r\n    /**\r\n     * The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    numWorkers?: number;\r\n    /**\r\n     * Optional ArrayBuffer of the WebAssembly binary.\r\n     * If provided it will be used instead of loading the binary from wasmBinaryUrl.\r\n     */\r\n    wasmBinary?: ArrayBuffer;\r\n    /**\r\n     * Optional worker pool to use for async decoding.\r\n     * If provided, numWorkers will be ignored and the worker pool will be used instead.\r\n     * If provided the draco script will not be loaded from the DracoConfiguration.\r\n     */\r\n    workerPool?: AutoReleaseWorkerPool;\r\n}\r\n\r\n/**\r\n * Draco compression (https://google.github.io/draco/)\r\n *\r\n * This class wraps the Draco module.\r\n *\r\n * **Encoder**\r\n *\r\n * The encoder is not currently implemented.\r\n *\r\n * **Decoder**\r\n *\r\n * By default, the configuration points to a copy of the Draco decoder files for glTF from the babylon.js preview cdn https://preview.babylonjs.com/draco_wasm_wrapper_gltf.js.\r\n *\r\n * To update the configuration, use the following code:\r\n * ```javascript\r\n *     DracoCompression.Configuration = {\r\n *         decoder: {\r\n *             wasmUrl: \"<url to the WebAssembly library>\",\r\n *             wasmBinaryUrl: \"<url to the WebAssembly binary>\",\r\n *             fallbackUrl: \"<url to the fallback JavaScript library>\",\r\n *         }\r\n *     };\r\n * ```\r\n *\r\n * Draco has two versions, one for WebAssembly and one for JavaScript. The decoder configuration can be set to only support WebAssembly or only support the JavaScript version.\r\n * Decoding will automatically fallback to the JavaScript version if WebAssembly version is not configured or if WebAssembly is not supported by the browser.\r\n * Use `DracoCompression.DecoderAvailable` to determine if the decoder configuration is available for the current context.\r\n *\r\n * To decode Draco compressed data, get the default DracoCompression object and call decodeMeshToGeometryAsync:\r\n * ```javascript\r\n *     var geometry = await DracoCompression.Default.decodeMeshToGeometryAsync(data);\r\n * ```\r\n *\r\n * @see https://playground.babylonjs.com/#DMZIBD#0\r\n */\r\nexport class DracoCompression implements IDisposable {\r\n    private _workerPoolPromise?: Promise<AutoReleaseWorkerPool>;\r\n    private _decoderModulePromise?: Promise<{ module: DecoderModule }>;\r\n\r\n    /**\r\n     * The configuration. Defaults to the following urls:\r\n     * - wasmUrl: \"https://cdn.babylonjs.com/draco_wasm_wrapper_gltf.js\"\r\n     * - wasmBinaryUrl: \"https://cdn.babylonjs.com/draco_decoder_gltf.wasm\"\r\n     * - fallbackUrl: \"https://cdn.babylonjs.com/draco_decoder_gltf.js\"\r\n     */\r\n    public static Configuration: IDracoCompressionConfiguration = {\r\n        decoder: {\r\n            wasmUrl: `${Tools._DefaultCdnUrl}/draco_wasm_wrapper_gltf.js`,\r\n            wasmBinaryUrl: `${Tools._DefaultCdnUrl}/draco_decoder_gltf.wasm`,\r\n            fallbackUrl: `${Tools._DefaultCdnUrl}/draco_decoder_gltf.js`,\r\n        },\r\n    };\r\n\r\n    /**\r\n     * Returns true if the decoder configuration is available.\r\n     */\r\n    public static get DecoderAvailable(): boolean {\r\n        const decoder = DracoCompression.Configuration.decoder;\r\n        return !!((decoder.wasmUrl && decoder.wasmBinaryUrl && typeof WebAssembly === \"object\") || decoder.fallbackUrl);\r\n    }\r\n\r\n    /**\r\n     * Default number of workers to create when creating the draco compression object.\r\n     */\r\n    public static DefaultNumWorkers = DracoCompression.GetDefaultNumWorkers();\r\n\r\n    private static GetDefaultNumWorkers(): number {\r\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\r\n            return 1;\r\n        }\r\n\r\n        // Use 50% of the available logical processors but capped at 4.\r\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\r\n    }\r\n\r\n    private static _Default: Nullable<DracoCompression> = null;\r\n\r\n    /**\r\n     * Default instance for the draco compression object.\r\n     */\r\n    public static get Default(): DracoCompression {\r\n        if (!DracoCompression._Default) {\r\n            DracoCompression._Default = new DracoCompression();\r\n        }\r\n\r\n        return DracoCompression._Default;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param numWorkers The number of workers for async operations Or an options object. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    constructor(numWorkers: number | IDracoCompressionOptions = DracoCompression.DefaultNumWorkers) {\r\n        const decoder = DracoCompression.Configuration.decoder;\r\n        // check if the decoder binary and worker pool was injected\r\n        // Note - it is expected that the developer checked if WebWorker, WebAssembly and the URL object are available\r\n        if (decoder.workerPool || (typeof numWorkers === \"object\" && numWorkers.workerPool)) {\r\n            // set the promise accordingly\r\n            this._workerPoolPromise = Promise.resolve(decoder.workerPool || (numWorkers as IDracoCompressionOptions).workerPool!);\r\n        } else {\r\n            // to avoid making big changes to the decider, if wasmBinary is provided use it in the wasmBinaryPromise\r\n            const wasmBinaryProvided = decoder.wasmBinary || (typeof numWorkers === \"object\" && numWorkers.wasmBinary);\r\n            const numberOfWorkers = typeof numWorkers === \"number\" ? numWorkers : numWorkers.numWorkers;\r\n            const useWorkers = numberOfWorkers && typeof Worker === \"function\" && typeof URL === \"function\";\r\n            const urlNeeded = useWorkers || (!useWorkers && !decoder.jsModule);\r\n            // code maintained here for back-compat with no changes\r\n\r\n            const decoderInfo: { url: string | undefined; wasmBinaryPromise: Promise<ArrayBuffer | undefined> } =\r\n                decoder.wasmUrl && decoder.wasmBinaryUrl && typeof WebAssembly === \"object\"\r\n                    ? {\r\n                          url: urlNeeded ? Tools.GetBabylonScriptURL(decoder.wasmUrl, true) : \"\",\r\n                          wasmBinaryPromise: wasmBinaryProvided ? Promise.resolve(wasmBinaryProvided) : Tools.LoadFileAsync(Tools.GetBabylonScriptURL(decoder.wasmBinaryUrl, true)),\r\n                      }\r\n                    : {\r\n                          url: urlNeeded ? Tools.GetBabylonScriptURL(decoder.fallbackUrl!) : \"\",\r\n                          wasmBinaryPromise: Promise.resolve(undefined),\r\n                      };\r\n            if (useWorkers) {\r\n                this._workerPoolPromise = decoderInfo.wasmBinaryPromise.then((decoderWasmBinary) => {\r\n                    const workerContent = `${decodeMesh}(${workerFunction})()`;\r\n                    const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n\r\n                    return new AutoReleaseWorkerPool(numberOfWorkers as number, () => {\r\n                        const worker = new Worker(workerBlobUrl);\r\n                        return initializeWebWorker(worker, decoderWasmBinary!, decoderInfo.url);\r\n                    });\r\n                });\r\n            } else {\r\n                this._decoderModulePromise = decoderInfo.wasmBinaryPromise.then(async (decoderWasmBinary) => {\r\n                    if (typeof DracoDecoderModule === \"undefined\") {\r\n                        if (!decoder.jsModule) {\r\n                            if (!decoderInfo.url) {\r\n                                throw new Error(\"Draco decoder module is not available\");\r\n                            }\r\n                            await Tools.LoadBabylonScriptAsync(decoderInfo.url);\r\n                        }\r\n                    }\r\n                    return await createDecoderAsync(decoderWasmBinary as ArrayBuffer, decoder.jsModule);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._workerPoolPromise) {\r\n            this._workerPoolPromise.then((workerPool) => {\r\n                workerPool.dispose();\r\n            });\r\n        }\r\n\r\n        delete this._workerPoolPromise;\r\n        delete this._decoderModulePromise;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when ready. Call this manually to ensure draco compression is ready before use.\r\n     * @returns a promise that resolves when ready\r\n     */\r\n    public async whenReadyAsync(): Promise<void> {\r\n        if (this._workerPoolPromise) {\r\n            await this._workerPoolPromise;\r\n            return;\r\n        }\r\n\r\n        if (this._decoderModulePromise) {\r\n            await this._decoderModulePromise;\r\n            return;\r\n        }\r\n    }\r\n\r\n    private _decodeMeshAsync(\r\n        data: ArrayBuffer | ArrayBufferView,\r\n        attributes?: { [kind: string]: number },\r\n        gltfNormalizedOverride?: { [kind: string]: boolean }\r\n    ): Promise<MeshData> {\r\n        const dataView = data instanceof ArrayBuffer ? new Int8Array(data) : new Int8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        const applyGltfNormalizedOverride = (kind: string, normalized: boolean): boolean => {\r\n            if (gltfNormalizedOverride && gltfNormalizedOverride[kind] !== undefined) {\r\n                if (normalized !== gltfNormalizedOverride[kind]) {\r\n                    Logger.Warn(\r\n                        `Normalized flag from Draco data (${normalized}) does not match normalized flag from glTF accessor (${gltfNormalizedOverride[kind]}). Using flag from glTF accessor.`\r\n                    );\r\n                }\r\n\r\n                return gltfNormalizedOverride[kind];\r\n            } else {\r\n                return normalized;\r\n            }\r\n        };\r\n\r\n        if (this._workerPoolPromise) {\r\n            return this._workerPoolPromise.then((workerPool) => {\r\n                return new Promise<MeshData>((resolve, reject) => {\r\n                    workerPool.push((worker, onComplete) => {\r\n                        let resultIndices: Nullable<Uint16Array | Uint32Array> = null;\r\n                        const resultAttributes: Array<AttributeData> = [];\r\n\r\n                        const onError = (error: ErrorEvent) => {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                            onComplete();\r\n                        };\r\n\r\n                        const onMessage = (event: MessageEvent<Message>) => {\r\n                            const message = event.data;\r\n                            switch (message.id) {\r\n                                case \"decodeMeshDone\": {\r\n                                    worker.removeEventListener(\"error\", onError);\r\n                                    worker.removeEventListener(\"message\", onMessage);\r\n                                    resolve({ indices: resultIndices!, attributes: resultAttributes, totalVertices: message.totalVertices });\r\n                                    onComplete();\r\n                                    break;\r\n                                }\r\n                                case \"indices\": {\r\n                                    resultIndices = message.data;\r\n                                    break;\r\n                                }\r\n                                case \"attribute\": {\r\n                                    resultAttributes.push({\r\n                                        kind: message.kind,\r\n                                        data: message.data,\r\n                                        size: message.size,\r\n                                        byteOffset: message.byteOffset,\r\n                                        byteStride: message.byteStride,\r\n                                        normalized: applyGltfNormalizedOverride(message.kind, message.normalized),\r\n                                    });\r\n                                    break;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n\r\n                        const dataViewCopy = dataView.slice();\r\n                        worker.postMessage({ id: \"decodeMesh\", dataView: dataViewCopy, attributes: attributes }, [dataViewCopy.buffer]);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this._decoderModulePromise) {\r\n            return this._decoderModulePromise.then((decoder) => {\r\n                let resultIndices: Nullable<Uint16Array | Uint32Array> = null;\r\n                const resultAttributes: Array<AttributeData> = [];\r\n\r\n                const numPoints = decodeMesh(\r\n                    decoder.module,\r\n                    dataView,\r\n                    attributes,\r\n                    (indices) => {\r\n                        resultIndices = indices;\r\n                    },\r\n                    (kind, data, size, byteOffset, byteStride, normalized) => {\r\n                        resultAttributes.push({\r\n                            kind,\r\n                            data,\r\n                            size,\r\n                            byteOffset,\r\n                            byteStride,\r\n                            normalized,\r\n                        });\r\n                    }\r\n                );\r\n\r\n                return { indices: resultIndices!, attributes: resultAttributes, totalVertices: numPoints };\r\n            });\r\n        }\r\n\r\n        throw new Error(\"Draco decoder module is not available\");\r\n    }\r\n\r\n    /**\r\n     * Decode Draco compressed mesh data to Babylon geometry.\r\n     * @param name The name to use when creating the geometry\r\n     * @param scene The scene to use when creating the geometry\r\n     * @param data The ArrayBuffer or ArrayBufferView for the Draco compression data\r\n     * @param attributes A map of attributes from vertex buffer kinds to Draco unique ids\r\n     * @returns A promise that resolves with the decoded geometry\r\n     */\r\n    public async decodeMeshToGeometryAsync(name: string, scene: Scene, data: ArrayBuffer | ArrayBufferView, attributes?: { [kind: string]: number }): Promise<Geometry> {\r\n        const meshData = await this._decodeMeshAsync(data, attributes);\r\n        const geometry = new Geometry(name, scene);\r\n        if (meshData.indices) {\r\n            geometry.setIndices(meshData.indices);\r\n        }\r\n        for (const attribute of meshData.attributes) {\r\n            geometry.setVerticesBuffer(\r\n                new VertexBuffer(\r\n                    scene.getEngine(),\r\n                    attribute.data,\r\n                    attribute.kind,\r\n                    false,\r\n                    undefined,\r\n                    attribute.byteStride,\r\n                    undefined,\r\n                    attribute.byteOffset,\r\n                    attribute.size,\r\n                    undefined,\r\n                    attribute.normalized,\r\n                    true\r\n                ),\r\n                meshData.totalVertices\r\n            );\r\n        }\r\n        return geometry;\r\n    }\r\n\r\n    /** @internal */\r\n    public async _decodeMeshToGeometryForGltfAsync(\r\n        name: string,\r\n        scene: Scene,\r\n        data: ArrayBuffer | ArrayBufferView,\r\n        attributes: { [kind: string]: number },\r\n        gltfNormalizedOverride: { [kind: string]: boolean }\r\n    ): Promise<Geometry> {\r\n        const meshData = await this._decodeMeshAsync(data, attributes, gltfNormalizedOverride);\r\n        const geometry = new Geometry(name, scene);\r\n        if (meshData.indices) {\r\n            geometry.setIndices(meshData.indices);\r\n        }\r\n        for (const attribute of meshData.attributes) {\r\n            geometry.setVerticesBuffer(\r\n                new VertexBuffer(\r\n                    scene.getEngine(),\r\n                    attribute.data,\r\n                    attribute.kind,\r\n                    false,\r\n                    undefined,\r\n                    attribute.byteStride,\r\n                    undefined,\r\n                    attribute.byteOffset,\r\n                    attribute.size,\r\n                    undefined,\r\n                    attribute.normalized,\r\n                    true\r\n                ),\r\n                meshData.totalVertices\r\n            );\r\n        }\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Decode Draco compressed mesh data to Babylon vertex data.\r\n     * @param data The ArrayBuffer or ArrayBufferView for the Draco compression data\r\n     * @param attributes A map of attributes from vertex buffer kinds to Draco unique ids\r\n     * @returns A promise that resolves with the decoded vertex data\r\n     * @deprecated Use {@link decodeMeshToGeometryAsync} for better performance in some cases\r\n     */\r\n    public async decodeMeshAsync(data: ArrayBuffer | ArrayBufferView, attributes?: { [kind: string]: number }): Promise<VertexData> {\r\n        const meshData = await this._decodeMeshAsync(data, attributes);\r\n        const vertexData = new VertexData();\r\n        if (meshData.indices) {\r\n            vertexData.indices = meshData.indices;\r\n        }\r\n        for (const attribute of meshData.attributes) {\r\n            const floatData = VertexBuffer.GetFloatData(\r\n                attribute.data,\r\n                attribute.size,\r\n                VertexBuffer.GetDataType(attribute.data),\r\n                attribute.byteOffset,\r\n                attribute.byteStride,\r\n                attribute.normalized,\r\n                meshData.totalVertices\r\n            );\r\n\r\n            vertexData.set(floatData, attribute.kind);\r\n        }\r\n        return vertexData;\r\n    }\r\n}\r\n", "/**\r\n * Composed of a frame, and an action function\r\n */\r\nexport class AnimationEvent {\r\n    /**\r\n     * Specifies if the animation event is done\r\n     */\r\n    public isDone: boolean = false;\r\n\r\n    /**\r\n     * Initializes the animation event\r\n     * @param frame The frame for which the event is triggered\r\n     * @param action The event to perform when triggered\r\n     * @param onlyOnce Specifies if the event should be triggered only once\r\n     */\r\n    constructor(\r\n        /** The frame for which the event is triggered **/\r\n        public frame: number,\r\n        /** The event to perform when triggered **/\r\n        public action: (currentFrame: number) => void,\r\n        /** Specifies if the event should be triggered only once**/\r\n        public onlyOnce?: boolean\r\n    ) {}\r\n\r\n    /** @internal */\r\n    public _clone(): AnimationEvent {\r\n        return new AnimationEvent(this.frame, this.action, this.onlyOnce);\r\n    }\r\n}\r\n", "import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { ISoundOptions } from \"./Interfaces/ISoundOptions\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport type { Observer } from \"../Misc/observable\";\r\n\r\n/**\r\n * Defines a sound that can be played in the application.\r\n * The sound can either be an ambient track or a simple sound played in reaction to a user action.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class Sound {\r\n    /**\r\n     * The name of the sound in the scene.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * Does the sound autoplay once loaded.\r\n     */\r\n    public autoplay: boolean = false;\r\n\r\n    private _loop = false;\r\n    /**\r\n     * Does the sound loop after it finishes playing once.\r\n     */\r\n    public get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    public set loop(value: boolean) {\r\n        if (value === this._loop) {\r\n            return;\r\n        }\r\n\r\n        this._loop = value;\r\n        this.updateOptions({ loop: value });\r\n    }\r\n\r\n    /**\r\n     * Does the sound use a custom attenuation curve to simulate the falloff\r\n     * happening when the source gets further away from the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-your-own-custom-attenuation-function\r\n     */\r\n    public useCustomAttenuation: boolean = false;\r\n    /**\r\n     * The sound track id this sound belongs to.\r\n     */\r\n    public soundTrackId: number;\r\n    /**\r\n     * Is this sound currently played.\r\n     */\r\n    public isPlaying: boolean = false;\r\n    /**\r\n     * Is this sound currently paused.\r\n     */\r\n    public isPaused: boolean = false;\r\n    /**\r\n     * Define the reference distance the sound should be heard perfectly.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public refDistance: number = 1;\r\n    /**\r\n     * Define the roll off factor of spatial sounds.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public rolloffFactor: number = 1;\r\n    /**\r\n     * Define the max distance the sound should be heard (intensity just became 0 at this point).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public maxDistance: number = 100;\r\n    /**\r\n     * Define the distance attenuation model the sound will follow.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public distanceModel: string = \"linear\";\r\n    /**\r\n     * @internal\r\n     * Back Compat\r\n     **/\r\n    public onended: () => any;\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the sound.\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * Observable event when the current playing sound finishes.\r\n     */\r\n    public onEndedObservable = new Observable<Sound>();\r\n\r\n    /**\r\n     * Gets the current time for the sound.\r\n     */\r\n    public get currentTime(): number {\r\n        if (this._htmlAudioElement) {\r\n            return this._htmlAudioElement.currentTime;\r\n        }\r\n\r\n        if (Engine.audioEngine?.audioContext && (this.isPlaying || this.isPaused)) {\r\n            // The `_currentTime` member is only updated when the sound is paused. Add the time since the last start\r\n            // to get the actual current time.\r\n            const timeSinceLastStart = this.isPaused ? 0 : Engine.audioEngine.audioContext.currentTime - this._startTime;\r\n            return this._currentTime + timeSinceLastStart;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Does this sound enables spatial sound.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public get spatialSound(): boolean {\r\n        return this._spatialSound;\r\n    }\r\n\r\n    /**\r\n     * Does this sound enables spatial sound.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public set spatialSound(newValue: boolean) {\r\n        if (newValue == this._spatialSound) {\r\n            return;\r\n        }\r\n\r\n        const wasPlaying = this.isPlaying;\r\n        this.pause();\r\n\r\n        if (newValue) {\r\n            this._spatialSound = newValue;\r\n            this._updateSpatialParameters();\r\n        } else {\r\n            this._disableSpatialSound();\r\n        }\r\n\r\n        if (wasPlaying) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    private _spatialSound: boolean = false;\r\n    private _panningModel: string = \"equalpower\";\r\n    private _playbackRate: number = 1;\r\n    private _streaming: boolean = false;\r\n    private _startTime: number = 0;\r\n    private _currentTime: number = 0;\r\n    private _position: Vector3 = Vector3.Zero();\r\n    private _localDirection: Vector3 = new Vector3(1, 0, 0);\r\n    private _volume: number = 1;\r\n    private _isReadyToPlay: boolean = false;\r\n    private _isDirectional: boolean = false;\r\n    private _readyToPlayCallback: Nullable<() => any>;\r\n    private _audioBuffer: Nullable<AudioBuffer>;\r\n    private _soundSource: Nullable<AudioBufferSourceNode>;\r\n    private _streamingSource: AudioNode;\r\n    private _soundPanner: Nullable<PannerNode>;\r\n    private _soundGain: Nullable<GainNode>;\r\n    private _inputAudioNode: Nullable<AudioNode>;\r\n    private _outputAudioNode: Nullable<AudioNode>;\r\n    // Used if you'd like to create a directional sound.\r\n    // If not set, the sound will be omnidirectional\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _coneOuterGain: number = 0;\r\n    private _scene: Scene;\r\n    private _connectedTransformNode: Nullable<TransformNode>;\r\n    private _customAttenuationFunction: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => number;\r\n    private _registerFunc: Nullable<(connectedMesh: TransformNode) => void>;\r\n    private _isOutputConnected = false;\r\n    private _htmlAudioElement: HTMLAudioElement;\r\n    private _urlType: \"Unknown\" | \"String\" | \"Array\" | \"ArrayBuffer\" | \"MediaStream\" | \"AudioBuffer\" | \"MediaElement\" = \"Unknown\";\r\n    private _length?: number;\r\n    private _offset?: number;\r\n    private _tryToPlayTimeout: Nullable<NodeJS.Timeout>;\r\n    private _audioUnlockedObserver?: Nullable<Observer<IAudioEngine>>;\r\n    private _url?: Nullable<string>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"AudioSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Create a sound and attach it to a scene\r\n     * @param name Name of your sound\r\n     * @param urlOrArrayBuffer Url to the sound to load async or ArrayBuffer, it also works with MediaStreams and AudioBuffers\r\n     * @param scene defines the scene the sound belongs to\r\n     * @param readyToPlayCallback Provide a callback function if you'd like to load your code once the sound is ready to be played\r\n     * @param options Objects to provide with the current available options: autoplay, loop, volume, spatialSound, maxDistance, rolloffFactor, refDistance, distanceModel, panningModel, streaming\r\n     */\r\n    constructor(name: string, urlOrArrayBuffer: any, scene?: Nullable<Scene>, readyToPlayCallback: Nullable<() => void> = null, options?: ISoundOptions) {\r\n        this.name = name;\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        Sound._SceneComponentInitialization(scene);\r\n\r\n        this._readyToPlayCallback = readyToPlayCallback;\r\n        // Default custom attenuation function is a linear attenuation\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this._customAttenuationFunction = (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => {\r\n            if (currentDistance < maxDistance) {\r\n                return currentVolume * (1 - currentDistance / maxDistance);\r\n            } else {\r\n                return 0;\r\n            }\r\n        };\r\n        if (options) {\r\n            this.autoplay = options.autoplay || false;\r\n            this._loop = options.loop || false;\r\n            // if volume === 0, we need another way to check this option\r\n            if (options.volume !== undefined) {\r\n                this._volume = options.volume;\r\n            }\r\n            this._spatialSound = options.spatialSound ?? false;\r\n            this.maxDistance = options.maxDistance ?? 100;\r\n            this.useCustomAttenuation = options.useCustomAttenuation ?? false;\r\n            this.rolloffFactor = options.rolloffFactor || 1;\r\n            this.refDistance = options.refDistance || 1;\r\n            this.distanceModel = options.distanceModel || \"linear\";\r\n            this._playbackRate = options.playbackRate || 1;\r\n            this._streaming = options.streaming ?? false;\r\n            this._length = options.length;\r\n            this._offset = options.offset;\r\n        }\r\n\r\n        if (Engine.audioEngine?.canUseWebAudio && Engine.audioEngine.audioContext) {\r\n            this._soundGain = Engine.audioEngine.audioContext.createGain();\r\n            this._soundGain!.gain.value = this._volume;\r\n            this._inputAudioNode = this._soundGain;\r\n            this._outputAudioNode = this._soundGain;\r\n            if (this._spatialSound) {\r\n                this._createSpatialParameters();\r\n            }\r\n            this._scene.mainSoundTrack.addSound(this);\r\n            let validParameter = true;\r\n\r\n            // if no parameter is passed, you need to call setAudioBuffer yourself to prepare the sound\r\n            if (urlOrArrayBuffer) {\r\n                try {\r\n                    if (typeof urlOrArrayBuffer === \"string\") {\r\n                        this._urlType = \"String\";\r\n                        this._url = urlOrArrayBuffer;\r\n                    } else if (urlOrArrayBuffer instanceof ArrayBuffer) {\r\n                        this._urlType = \"ArrayBuffer\";\r\n                    } else if (urlOrArrayBuffer instanceof HTMLMediaElement) {\r\n                        this._urlType = \"MediaElement\";\r\n                    } else if (urlOrArrayBuffer instanceof MediaStream) {\r\n                        this._urlType = \"MediaStream\";\r\n                    } else if (urlOrArrayBuffer instanceof AudioBuffer) {\r\n                        this._urlType = \"AudioBuffer\";\r\n                    } else if (Array.isArray(urlOrArrayBuffer)) {\r\n                        this._urlType = \"Array\";\r\n                    }\r\n\r\n                    let urls: string[] = [];\r\n                    let codecSupportedFound = false;\r\n\r\n                    switch (this._urlType) {\r\n                        case \"MediaElement\":\r\n                            this._streaming = true;\r\n                            this._isReadyToPlay = true;\r\n                            this._streamingSource = Engine.audioEngine.audioContext.createMediaElementSource(urlOrArrayBuffer);\r\n\r\n                            if (this.autoplay) {\r\n                                this.play(0, this._offset, this._length);\r\n                            }\r\n\r\n                            if (this._readyToPlayCallback) {\r\n                                this._readyToPlayCallback();\r\n                            }\r\n                            break;\r\n                        case \"MediaStream\":\r\n                            this._streaming = true;\r\n                            this._isReadyToPlay = true;\r\n                            this._streamingSource = Engine.audioEngine.audioContext.createMediaStreamSource(urlOrArrayBuffer);\r\n\r\n                            if (this.autoplay) {\r\n                                this.play(0, this._offset, this._length);\r\n                            }\r\n\r\n                            if (this._readyToPlayCallback) {\r\n                                this._readyToPlayCallback();\r\n                            }\r\n                            break;\r\n                        case \"ArrayBuffer\":\r\n                            if ((<ArrayBuffer>urlOrArrayBuffer).byteLength > 0) {\r\n                                codecSupportedFound = true;\r\n                                this._soundLoaded(urlOrArrayBuffer);\r\n                            }\r\n                            break;\r\n                        case \"AudioBuffer\":\r\n                            this._audioBufferLoaded(urlOrArrayBuffer);\r\n                            break;\r\n                        case \"String\":\r\n                            urls.push(urlOrArrayBuffer);\r\n                        // eslint-disable-next-line no-fallthrough\r\n                        case \"Array\":\r\n                            if (urls.length === 0) {\r\n                                urls = urlOrArrayBuffer;\r\n                            }\r\n                            // If we found a supported format, we load it immediately and stop the loop\r\n                            for (let i = 0; i < urls.length; i++) {\r\n                                const url = urls[i];\r\n                                codecSupportedFound =\r\n                                    (options && options.skipCodecCheck) ||\r\n                                    (url.indexOf(\".mp3\", url.length - 4) !== -1 && Engine.audioEngine.isMP3supported) ||\r\n                                    (url.indexOf(\".ogg\", url.length - 4) !== -1 && Engine.audioEngine.isOGGsupported) ||\r\n                                    url.indexOf(\".wav\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\".m4a\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\".mp4\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\"blob:\") !== -1;\r\n                                if (codecSupportedFound) {\r\n                                    // Loading sound\r\n                                    if (!this._streaming) {\r\n                                        this._scene._loadFile(\r\n                                            url,\r\n                                            (data) => {\r\n                                                this._soundLoaded(data as ArrayBuffer);\r\n                                            },\r\n                                            undefined,\r\n                                            true,\r\n                                            true,\r\n                                            (exception) => {\r\n                                                if (exception) {\r\n                                                    Logger.Error(\"XHR \" + exception.status + \" error on: \" + url + \".\");\r\n                                                }\r\n                                                Logger.Error(\"Sound creation aborted.\");\r\n                                                this._scene.mainSoundTrack.removeSound(this);\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                    // Streaming sound using HTML5 Audio tag\r\n                                    else {\r\n                                        this._htmlAudioElement = new Audio(url);\r\n                                        this._htmlAudioElement.controls = false;\r\n                                        this._htmlAudioElement.loop = this.loop;\r\n                                        Tools.SetCorsBehavior(url, this._htmlAudioElement);\r\n                                        this._htmlAudioElement.preload = \"auto\";\r\n                                        this._htmlAudioElement.addEventListener(\"canplaythrough\", () => {\r\n                                            this._isReadyToPlay = true;\r\n                                            if (this.autoplay) {\r\n                                                this.play(0, this._offset, this._length);\r\n                                            }\r\n                                            if (this._readyToPlayCallback) {\r\n                                                this._readyToPlayCallback();\r\n                                            }\r\n                                        });\r\n                                        document.body.appendChild(this._htmlAudioElement);\r\n                                        this._htmlAudioElement.load();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            validParameter = false;\r\n                            break;\r\n                    }\r\n\r\n                    if (!validParameter) {\r\n                        Logger.Error(\"Parameter must be a URL to the sound, an Array of URLs (.mp3 & .ogg) or an ArrayBuffer of the sound.\");\r\n                    } else {\r\n                        if (!codecSupportedFound) {\r\n                            this._isReadyToPlay = true;\r\n                            // Simulating a ready to play event to avoid breaking code path\r\n                            if (this._readyToPlayCallback) {\r\n                                setTimeout(() => {\r\n                                    if (this._readyToPlayCallback) {\r\n                                        this._readyToPlayCallback();\r\n                                    }\r\n                                }, 1000);\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (ex) {\r\n                    Logger.Error(\"Unexpected error. Sound creation aborted.\");\r\n                    this._scene.mainSoundTrack.removeSound(this);\r\n                }\r\n            }\r\n        } else {\r\n            // Adding an empty sound to avoid breaking audio calls for non Web Audio browsers\r\n            this._scene.mainSoundTrack.addSound(this);\r\n            if (Engine.audioEngine && !Engine.audioEngine.WarnedWebAudioUnsupported) {\r\n                Logger.Error(\"Web Audio is not supported by your browser.\");\r\n                Engine.audioEngine.WarnedWebAudioUnsupported = true;\r\n            }\r\n            // Simulating a ready to play event to avoid breaking code for non web audio browsers\r\n            if (this._readyToPlayCallback) {\r\n                setTimeout(() => {\r\n                    if (this._readyToPlayCallback) {\r\n                        this._readyToPlayCallback();\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound and its associated resources\r\n     */\r\n    public dispose() {\r\n        if (Engine.audioEngine?.canUseWebAudio) {\r\n            if (this.isPlaying) {\r\n                this.stop();\r\n            }\r\n            this._isReadyToPlay = false;\r\n            if (this.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(this);\r\n            } else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[this.soundTrackId].removeSound(this);\r\n            }\r\n            if (this._soundGain) {\r\n                this._soundGain.disconnect();\r\n                this._soundGain = null;\r\n            }\r\n            if (this._soundPanner) {\r\n                this._soundPanner.disconnect();\r\n                this._soundPanner = null;\r\n            }\r\n            if (this._soundSource) {\r\n                this._soundSource.disconnect();\r\n                this._soundSource = null;\r\n            }\r\n            this._audioBuffer = null;\r\n\r\n            if (this._htmlAudioElement) {\r\n                this._htmlAudioElement.pause();\r\n                this._htmlAudioElement.src = \"\";\r\n                document.body.removeChild(this._htmlAudioElement);\r\n            }\r\n\r\n            if (this._streamingSource) {\r\n                this._streamingSource.disconnect();\r\n            }\r\n\r\n            if (this._connectedTransformNode && this._registerFunc) {\r\n                this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n                this._connectedTransformNode = null;\r\n            }\r\n\r\n            this._clearTimeoutsAndObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the sounds is ready to be played or not.\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReady(): boolean {\r\n        return this._isReadyToPlay;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Sound\";\r\n    }\r\n\r\n    private _audioBufferLoaded(buffer: AudioBuffer) {\r\n        if (!Engine.audioEngine?.audioContext) {\r\n            return;\r\n        }\r\n        this._audioBuffer = buffer;\r\n        this._isReadyToPlay = true;\r\n        if (this.autoplay) {\r\n            this.play(0, this._offset, this._length);\r\n        }\r\n        if (this._readyToPlayCallback) {\r\n            this._readyToPlayCallback();\r\n        }\r\n    }\r\n\r\n    private _soundLoaded(audioData: ArrayBuffer) {\r\n        if (!Engine.audioEngine?.audioContext) {\r\n            return;\r\n        }\r\n        Engine.audioEngine.audioContext.decodeAudioData(\r\n            audioData,\r\n            (buffer) => {\r\n                this._audioBufferLoaded(buffer);\r\n            },\r\n            (err: any) => {\r\n                Logger.Error(\"Error while decoding audio data for: \" + this.name + \" / Error: \" + err);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the data of the sound from an audiobuffer\r\n     * @param audioBuffer The audioBuffer containing the data\r\n     */\r\n    public setAudioBuffer(audioBuffer: AudioBuffer): void {\r\n        if (Engine.audioEngine?.canUseWebAudio) {\r\n            this._audioBuffer = audioBuffer;\r\n            this._isReadyToPlay = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the current sounds options such as maxdistance, loop...\r\n     * @param options A JSON object containing values named as the object properties\r\n     */\r\n    public updateOptions(options: ISoundOptions): void {\r\n        if (options) {\r\n            this.loop = options.loop ?? this.loop;\r\n            this.maxDistance = options.maxDistance ?? this.maxDistance;\r\n            this.useCustomAttenuation = options.useCustomAttenuation ?? this.useCustomAttenuation;\r\n            this.rolloffFactor = options.rolloffFactor ?? this.rolloffFactor;\r\n            this.refDistance = options.refDistance ?? this.refDistance;\r\n            this.distanceModel = options.distanceModel ?? this.distanceModel;\r\n            this._playbackRate = options.playbackRate ?? this._playbackRate;\r\n            this._length = options.length ?? undefined;\r\n            this.spatialSound = options.spatialSound ?? this._spatialSound;\r\n            this._setOffset(options.offset ?? undefined);\r\n            this.setVolume(options.volume ?? this._volume);\r\n            this._updateSpatialParameters();\r\n            if (this.isPlaying) {\r\n                if (this._streaming && this._htmlAudioElement) {\r\n                    this._htmlAudioElement.playbackRate = this._playbackRate;\r\n                    if (this._htmlAudioElement.loop !== this.loop) {\r\n                        this._htmlAudioElement.loop = this.loop;\r\n                    }\r\n                } else {\r\n                    if (this._soundSource) {\r\n                        this._soundSource.playbackRate.value = this._playbackRate;\r\n                        if (this._soundSource.loop !== this.loop) {\r\n                            this._soundSource.loop = this.loop;\r\n                        }\r\n                        if (this._offset !== undefined && this._soundSource.loopStart !== this._offset) {\r\n                            this._soundSource.loopStart = this._offset;\r\n                        }\r\n                        if (this._length !== undefined && this._length !== this._soundSource.loopEnd) {\r\n                            this._soundSource.loopEnd = (this._offset! | 0) + this._length!;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _createSpatialParameters() {\r\n        if (Engine.audioEngine?.canUseWebAudio && Engine.audioEngine.audioContext) {\r\n            if (this._scene.headphone) {\r\n                this._panningModel = \"HRTF\";\r\n            }\r\n            this._soundPanner = this._soundPanner ?? Engine.audioEngine.audioContext.createPanner();\r\n            if (this._soundPanner && this._outputAudioNode) {\r\n                this._updateSpatialParameters();\r\n                this._soundPanner.connect(this._outputAudioNode);\r\n                this._inputAudioNode = this._soundPanner;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _disableSpatialSound() {\r\n        if (!this._spatialSound) {\r\n            return;\r\n        }\r\n        this._inputAudioNode = this._soundGain;\r\n        this._soundPanner?.disconnect();\r\n        this._soundPanner = null;\r\n        this._spatialSound = false;\r\n    }\r\n\r\n    private _updateSpatialParameters() {\r\n        if (!this._spatialSound) {\r\n            return;\r\n        }\r\n        if (this._soundPanner) {\r\n            if (this.useCustomAttenuation) {\r\n                // Tricks to disable in a way embedded Web Audio attenuation\r\n                this._soundPanner.distanceModel = \"linear\";\r\n                this._soundPanner.maxDistance = Number.MAX_VALUE;\r\n                this._soundPanner.refDistance = 1;\r\n                this._soundPanner.rolloffFactor = 1;\r\n                this._soundPanner.panningModel = this._panningModel as any;\r\n            } else {\r\n                this._soundPanner.distanceModel = this.distanceModel as any;\r\n                this._soundPanner.maxDistance = this.maxDistance;\r\n                this._soundPanner.refDistance = this.refDistance;\r\n                this._soundPanner.rolloffFactor = this.rolloffFactor;\r\n                this._soundPanner.panningModel = this._panningModel as any;\r\n            }\r\n        } else {\r\n            this._createSpatialParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower — it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF() {\r\n        this._panningModel = \"HRTF\";\r\n        this._switchPanningModel();\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower() {\r\n        this._panningModel = \"equalpower\";\r\n        this._switchPanningModel();\r\n    }\r\n\r\n    private _switchPanningModel() {\r\n        if (Engine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n            this._soundPanner.panningModel = this._panningModel as any;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect this sound to a sound track audio node like gain...\r\n     * @param soundTrackAudioNode the sound track audio node to connect to\r\n     */\r\n    public connectToSoundTrackAudioNode(soundTrackAudioNode: AudioNode): void {\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            if (this._isOutputConnected) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode.connect(soundTrackAudioNode);\r\n            this._isOutputConnected = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform this sound into a directional source\r\n     * @param coneInnerAngle Size of the inner cone in degree\r\n     * @param coneOuterAngle Size of the outer cone in degree\r\n     * @param coneOuterGain Volume of the sound outside the outer cone (between 0.0 and 1.0)\r\n     */\r\n    public setDirectionalCone(coneInnerAngle: number, coneOuterAngle: number, coneOuterGain: number): void {\r\n        if (coneOuterAngle < coneInnerAngle) {\r\n            Logger.Error(\"setDirectionalCone(): outer angle of the cone must be superior or equal to the inner angle.\");\r\n            return;\r\n        }\r\n        this._coneInnerAngle = coneInnerAngle;\r\n        this._coneOuterAngle = coneOuterAngle;\r\n        this._coneOuterGain = coneOuterGain;\r\n        this._isDirectional = true;\r\n\r\n        if (this.isPlaying && this.loop) {\r\n            this.stop();\r\n            this.play(0, this._offset, this._length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the inner angle for the directional cone.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the inner angle for the directional cone.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value != this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            if (Engine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n                this._soundPanner.coneInnerAngle = this._coneInnerAngle;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the outer angle for the directional cone.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the outer angle for the directional cone.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value != this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            if (Engine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n                this._soundPanner.coneOuterAngle = this._coneOuterAngle;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the emitter if spatial sound is enabled\r\n     * @param newPosition Defines the new position\r\n     */\r\n    public setPosition(newPosition: Vector3): void {\r\n        if (newPosition.equals(this._position)) {\r\n            return;\r\n        }\r\n        this._position.copyFrom(newPosition);\r\n\r\n        if (Engine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner && !isNaN(this._position.x) && !isNaN(this._position.y) && !isNaN(this._position.z)) {\r\n            this._soundPanner.positionX.value = this._position.x;\r\n            this._soundPanner.positionY.value = this._position.y;\r\n            this._soundPanner.positionZ.value = this._position.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the local direction of the emitter if spatial sound is enabled\r\n     * @param newLocalDirection Defines the new local direction\r\n     */\r\n    public setLocalDirectionToMesh(newLocalDirection: Vector3): void {\r\n        this._localDirection = newLocalDirection;\r\n\r\n        if (Engine.audioEngine?.canUseWebAudio && this._connectedTransformNode && this.isPlaying) {\r\n            this._updateDirection();\r\n        }\r\n    }\r\n\r\n    private _updateDirection() {\r\n        if (!this._connectedTransformNode || !this._soundPanner) {\r\n            return;\r\n        }\r\n\r\n        const mat = this._connectedTransformNode.getWorldMatrix();\r\n        const direction = Vector3.TransformNormal(this._localDirection, mat);\r\n        direction.normalize();\r\n        this._soundPanner.orientationX.value = direction.x;\r\n        this._soundPanner.orientationY.value = direction.y;\r\n        this._soundPanner.orientationZ.value = direction.z;\r\n    }\r\n\r\n    /** @internal */\r\n    public updateDistanceFromListener() {\r\n        if (Engine.audioEngine?.canUseWebAudio && this._connectedTransformNode && this.useCustomAttenuation && this._soundGain && this._scene.activeCamera) {\r\n            const distance = this._scene.audioListenerPositionProvider\r\n                ? this._connectedTransformNode.position.subtract(this._scene.audioListenerPositionProvider()).length()\r\n                : this._connectedTransformNode.getDistanceToCamera(this._scene.activeCamera);\r\n            this._soundGain.gain.value = this._customAttenuationFunction(this._volume, distance, this.maxDistance, this.refDistance, this.rolloffFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a new custom attenuation function for the sound.\r\n     * @param callback Defines the function used for the attenuation\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-your-own-custom-attenuation-function\r\n     */\r\n    public setAttenuationFunction(callback: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => number): void {\r\n        this._customAttenuationFunction = callback;\r\n    }\r\n\r\n    /**\r\n     * Play the sound\r\n     * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.\r\n     * @param offset (optional) Start the sound at a specific time in seconds\r\n     * @param length (optional) Sound duration (in seconds)\r\n     */\r\n    public play(time?: number, offset?: number, length?: number): void {\r\n        if (this._isReadyToPlay && this._scene.audioEnabled && Engine.audioEngine?.audioContext) {\r\n            try {\r\n                this._clearTimeoutsAndObservers();\r\n\r\n                let startTime = time ? Engine.audioEngine?.audioContext.currentTime + time : Engine.audioEngine?.audioContext.currentTime;\r\n                if (!this._soundSource || !this._streamingSource) {\r\n                    if (this._spatialSound && this._soundPanner) {\r\n                        if (!isNaN(this._position.x) && !isNaN(this._position.y) && !isNaN(this._position.z)) {\r\n                            this._soundPanner.positionX.value = this._position.x;\r\n                            this._soundPanner.positionY.value = this._position.y;\r\n                            this._soundPanner.positionZ.value = this._position.z;\r\n                        }\r\n                        if (this._isDirectional) {\r\n                            this._soundPanner.coneInnerAngle = this._coneInnerAngle;\r\n                            this._soundPanner.coneOuterAngle = this._coneOuterAngle;\r\n                            this._soundPanner.coneOuterGain = this._coneOuterGain;\r\n                            if (this._connectedTransformNode) {\r\n                                this._updateDirection();\r\n                            } else {\r\n                                this._soundPanner.setOrientation(this._localDirection.x, this._localDirection.y, this._localDirection.z);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this._streaming) {\r\n                    if (!this._streamingSource) {\r\n                        this._streamingSource = Engine.audioEngine.audioContext.createMediaElementSource(this._htmlAudioElement);\r\n                        this._htmlAudioElement.onended = () => {\r\n                            this._onended();\r\n                        };\r\n                        this._htmlAudioElement.playbackRate = this._playbackRate;\r\n                    }\r\n                    this._streamingSource.disconnect();\r\n                    if (this._inputAudioNode) {\r\n                        this._streamingSource.connect(this._inputAudioNode);\r\n                    }\r\n                    if (this._htmlAudioElement) {\r\n                        // required to manage properly the new suspended default state of Chrome\r\n                        // When the option 'streaming: true' is used, we need first to wait for\r\n                        // the audio engine to be unlocked by a user gesture before trying to play\r\n                        // an HTML Audio element\r\n                        const tryToPlay = () => {\r\n                            if (Engine.audioEngine?.unlocked) {\r\n                                const playPromise = this._htmlAudioElement.play();\r\n\r\n                                // In browsers that don’t yet support this functionality,\r\n                                // playPromise won’t be defined.\r\n                                if (playPromise !== undefined) {\r\n                                    playPromise.catch(() => {\r\n                                        // Automatic playback failed.\r\n                                        // Waiting for the audio engine to be unlocked by user click on unmute\r\n                                        Engine.audioEngine?.lock();\r\n                                        if (this.loop || this.autoplay) {\r\n                                            this._audioUnlockedObserver = Engine.audioEngine?.onAudioUnlockedObservable.addOnce(() => {\r\n                                                tryToPlay();\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                if (this.loop || this.autoplay) {\r\n                                    this._audioUnlockedObserver = Engine.audioEngine?.onAudioUnlockedObservable.addOnce(() => {\r\n                                        tryToPlay();\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n                        tryToPlay();\r\n                    }\r\n                } else {\r\n                    const tryToPlay = () => {\r\n                        if (Engine.audioEngine?.audioContext) {\r\n                            length = length || this._length;\r\n\r\n                            if (offset !== undefined) {\r\n                                this._setOffset(offset);\r\n                            }\r\n\r\n                            if (this._soundSource) {\r\n                                const oldSource = this._soundSource;\r\n                                oldSource.onended = () => {\r\n                                    oldSource.disconnect();\r\n                                };\r\n                            }\r\n                            this._soundSource = Engine.audioEngine?.audioContext.createBufferSource();\r\n                            if (this._soundSource && this._inputAudioNode) {\r\n                                this._soundSource.buffer = this._audioBuffer;\r\n                                this._soundSource.connect(this._inputAudioNode);\r\n                                this._soundSource.loop = this.loop;\r\n                                if (offset !== undefined) {\r\n                                    this._soundSource.loopStart = offset;\r\n                                }\r\n                                if (length !== undefined) {\r\n                                    this._soundSource.loopEnd = (offset! | 0) + length!;\r\n                                }\r\n                                this._soundSource.playbackRate.value = this._playbackRate;\r\n                                this._soundSource.onended = () => {\r\n                                    this._onended();\r\n                                };\r\n                                startTime = time ? Engine.audioEngine?.audioContext!.currentTime + time : Engine.audioEngine.audioContext!.currentTime;\r\n                                const actualOffset = ((this.isPaused ? this.currentTime : 0) + (this._offset ?? 0)) % this._soundSource!.buffer!.duration;\r\n                                this._soundSource!.start(startTime, actualOffset, this.loop ? undefined : length);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    if (Engine.audioEngine?.audioContext.state === \"suspended\") {\r\n                        // Wait a bit for FF as context seems late to be ready.\r\n                        this._tryToPlayTimeout = setTimeout(() => {\r\n                            if (Engine.audioEngine?.audioContext!.state === \"suspended\") {\r\n                                // Automatic playback failed.\r\n                                // Waiting for the audio engine to be unlocked by user click on unmute\r\n                                Engine.audioEngine.lock();\r\n                                if (this.loop || this.autoplay) {\r\n                                    this._audioUnlockedObserver = Engine.audioEngine.onAudioUnlockedObservable.addOnce(() => {\r\n                                        tryToPlay();\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                tryToPlay();\r\n                            }\r\n                        }, 500);\r\n                    } else {\r\n                        tryToPlay();\r\n                    }\r\n                }\r\n                this._startTime = startTime;\r\n                this.isPlaying = true;\r\n                this.isPaused = false;\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while trying to play audio: \" + this.name + \", \" + ex.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        this.isPlaying = false;\r\n        this._startTime = 0;\r\n        this._currentTime = 0;\r\n        if (this.onended) {\r\n            this.onended();\r\n        }\r\n        this.onEndedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Stop the sound\r\n     * @param time (optional) Stop the sound after X seconds. Stop immediately (0) by default.\r\n     */\r\n    public stop(time?: number): void {\r\n        if (this.isPlaying) {\r\n            this._clearTimeoutsAndObservers();\r\n            if (this._streaming) {\r\n                if (this._htmlAudioElement) {\r\n                    this._htmlAudioElement.pause();\r\n                    // Test needed for Firefox or it will generate an Invalid State Error\r\n                    if (this._htmlAudioElement.currentTime > 0) {\r\n                        this._htmlAudioElement.currentTime = 0;\r\n                    }\r\n                } else {\r\n                    this._streamingSource.disconnect();\r\n                }\r\n                this.isPlaying = false;\r\n            } else if (Engine.audioEngine?.audioContext && this._soundSource) {\r\n                const stopTime = time ? Engine.audioEngine.audioContext.currentTime + time : undefined;\r\n                this._soundSource.onended = () => {\r\n                    this.isPlaying = false;\r\n                    this.isPaused = false;\r\n                    this._startTime = 0;\r\n                    this._currentTime = 0;\r\n                    if (this._soundSource) {\r\n                        this._soundSource.onended = () => void 0;\r\n                    }\r\n                    this._onended();\r\n                };\r\n                this._soundSource.stop(stopTime);\r\n            } else {\r\n                this.isPlaying = false;\r\n            }\r\n        } else if (this.isPaused) {\r\n            this.isPaused = false;\r\n            this._startTime = 0;\r\n            this._currentTime = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Put the sound in pause\r\n     */\r\n    public pause(): void {\r\n        if (this.isPlaying) {\r\n            this._clearTimeoutsAndObservers();\r\n            if (this._streaming) {\r\n                if (this._htmlAudioElement) {\r\n                    this._htmlAudioElement.pause();\r\n                } else {\r\n                    this._streamingSource.disconnect();\r\n                }\r\n                this.isPlaying = false;\r\n                this.isPaused = true;\r\n            } else if (Engine.audioEngine?.audioContext && this._soundSource) {\r\n                this._soundSource.onended = () => void 0;\r\n                this._soundSource.stop();\r\n                this.isPlaying = false;\r\n                this.isPaused = true;\r\n                this._currentTime += Engine.audioEngine.audioContext.currentTime - this._startTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a dedicated volume for this sounds\r\n     * @param newVolume Define the new volume of the sound\r\n     * @param time Define time for gradual change to new volume\r\n     */\r\n    public setVolume(newVolume: number, time?: number): void {\r\n        if (Engine.audioEngine?.canUseWebAudio && this._soundGain) {\r\n            if (time && Engine.audioEngine.audioContext) {\r\n                this._soundGain.gain.cancelScheduledValues(Engine.audioEngine.audioContext.currentTime);\r\n                this._soundGain.gain.setValueAtTime(this._soundGain.gain.value, Engine.audioEngine.audioContext.currentTime);\r\n                this._soundGain.gain.linearRampToValueAtTime(newVolume, Engine.audioEngine.audioContext.currentTime + time);\r\n            } else {\r\n                this._soundGain.gain.value = newVolume;\r\n            }\r\n        }\r\n        this._volume = newVolume;\r\n    }\r\n\r\n    /**\r\n     * Set the sound play back rate\r\n     * @param newPlaybackRate Define the playback rate the sound should be played at\r\n     */\r\n    public setPlaybackRate(newPlaybackRate: number): void {\r\n        this._playbackRate = newPlaybackRate;\r\n        if (this.isPlaying) {\r\n            if (this._streaming && this._htmlAudioElement) {\r\n                this._htmlAudioElement.playbackRate = this._playbackRate;\r\n            } else if (this._soundSource) {\r\n                this._soundSource.playbackRate.value = this._playbackRate;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the sound play back rate.\r\n     * @returns the  play back rate of the sound\r\n     */\r\n    public getPlaybackRate(): number {\r\n        return this._playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Gets the volume of the sound.\r\n     * @returns the volume of the sound\r\n     */\r\n    public getVolume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Attach the sound to a dedicated mesh\r\n     * @param transformNode The transform node to connect the sound with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#attaching-a-sound-to-a-mesh\r\n     */\r\n    public attachToMesh(transformNode: TransformNode): void {\r\n        if (this._connectedTransformNode && this._registerFunc) {\r\n            this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n            this._registerFunc = null;\r\n        }\r\n        this._connectedTransformNode = transformNode;\r\n        if (!this._spatialSound) {\r\n            this._spatialSound = true;\r\n            this._createSpatialParameters();\r\n            if (this.isPlaying && this.loop) {\r\n                this.stop();\r\n                this.play(0, this._offset, this._length);\r\n            }\r\n        }\r\n        this._onRegisterAfterWorldMatrixUpdate(this._connectedTransformNode);\r\n        this._registerFunc = (transformNode: TransformNode) => this._onRegisterAfterWorldMatrixUpdate(transformNode);\r\n        this._connectedTransformNode.registerAfterWorldMatrixUpdate(this._registerFunc);\r\n    }\r\n\r\n    /**\r\n     * Detach the sound from the previously attached mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#attaching-a-sound-to-a-mesh\r\n     */\r\n    public detachFromMesh() {\r\n        if (this._connectedTransformNode && this._registerFunc) {\r\n            this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n            this._registerFunc = null;\r\n            this._connectedTransformNode = null;\r\n        }\r\n    }\r\n\r\n    private _onRegisterAfterWorldMatrixUpdate(node: TransformNode): void {\r\n        if (!(<any>node).getBoundingInfo) {\r\n            this.setPosition(node.absolutePosition);\r\n        } else {\r\n            const mesh = node as AbstractMesh;\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n            this.setPosition(boundingInfo.boundingSphere.centerWorld);\r\n        }\r\n        if (Engine.audioEngine?.canUseWebAudio && this._isDirectional && this.isPlaying) {\r\n            this._updateDirection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current sound in the scene.\r\n     * @returns the new sound clone\r\n     */\r\n    public clone(): Nullable<Sound> {\r\n        if (!this._streaming) {\r\n            const setBufferAndRun = () => {\r\n                if (this._isReadyToPlay) {\r\n                    clonedSound._audioBuffer = this.getAudioBuffer();\r\n                    clonedSound._isReadyToPlay = true;\r\n                    if (clonedSound.autoplay) {\r\n                        clonedSound.play(0, this._offset, this._length);\r\n                    }\r\n                } else {\r\n                    setTimeout(setBufferAndRun, 300);\r\n                }\r\n            };\r\n\r\n            const currentOptions = {\r\n                autoplay: this.autoplay,\r\n                loop: this.loop,\r\n                volume: this._volume,\r\n                spatialSound: this._spatialSound,\r\n                maxDistance: this.maxDistance,\r\n                useCustomAttenuation: this.useCustomAttenuation,\r\n                rolloffFactor: this.rolloffFactor,\r\n                refDistance: this.refDistance,\r\n                distanceModel: this.distanceModel,\r\n            };\r\n\r\n            const clonedSound = new Sound(this.name + \"_cloned\", new ArrayBuffer(0), this._scene, null, currentOptions);\r\n            if (this.useCustomAttenuation) {\r\n                clonedSound.setAttenuationFunction(this._customAttenuationFunction);\r\n            }\r\n            clonedSound.setPosition(this._position);\r\n            clonedSound.setPlaybackRate(this._playbackRate);\r\n            setBufferAndRun();\r\n\r\n            return clonedSound;\r\n        }\r\n        // Can't clone a streaming sound\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current underlying audio buffer containing the data\r\n     * @returns the audio buffer\r\n     */\r\n    public getAudioBuffer(): Nullable<AudioBuffer> {\r\n        return this._audioBuffer;\r\n    }\r\n\r\n    /**\r\n     * Gets the WebAudio AudioBufferSourceNode, lets you keep track of and stop instances of this Sound.\r\n     * @returns the source node\r\n     */\r\n    public getSoundSource(): Nullable<AudioBufferSourceNode> {\r\n        return this._soundSource;\r\n    }\r\n\r\n    /**\r\n     * Gets the WebAudio GainNode, gives you precise control over the gain of instances of this Sound.\r\n     * @returns the gain node\r\n     */\r\n    public getSoundGain(): Nullable<GainNode> {\r\n        return this._soundGain;\r\n    }\r\n\r\n    /**\r\n     * Serializes the Sound in a JSON representation\r\n     * @returns the JSON representation of the sound\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {\r\n            name: this.name,\r\n            url: this._url,\r\n            autoplay: this.autoplay,\r\n            loop: this.loop,\r\n            volume: this._volume,\r\n            spatialSound: this._spatialSound,\r\n            maxDistance: this.maxDistance,\r\n            rolloffFactor: this.rolloffFactor,\r\n            refDistance: this.refDistance,\r\n            distanceModel: this.distanceModel,\r\n            playbackRate: this._playbackRate,\r\n            panningModel: this._panningModel,\r\n            soundTrackId: this.soundTrackId,\r\n            metadata: this.metadata,\r\n        };\r\n\r\n        if (this._spatialSound) {\r\n            if (this._connectedTransformNode) {\r\n                serializationObject.connectedMeshId = this._connectedTransformNode.id;\r\n            }\r\n\r\n            serializationObject.position = this._position.asArray();\r\n            serializationObject.refDistance = this.refDistance;\r\n            serializationObject.distanceModel = this.distanceModel;\r\n\r\n            serializationObject.isDirectional = this._isDirectional;\r\n            serializationObject.localDirectionToMesh = this._localDirection.asArray();\r\n            serializationObject.coneInnerAngle = this._coneInnerAngle;\r\n            serializationObject.coneOuterAngle = this._coneOuterAngle;\r\n            serializationObject.coneOuterGain = this._coneOuterGain;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON representation of a sound to instantiate in a given scene\r\n     * @param parsedSound Define the JSON representation of the sound (usually coming from the serialize method)\r\n     * @param scene Define the scene the new parsed sound should be created in\r\n     * @param rootUrl Define the rooturl of the load in case we need to fetch relative dependencies\r\n     * @param sourceSound Define a sound place holder if do not need to instantiate a new one\r\n     * @returns the newly parsed sound\r\n     */\r\n    public static Parse(parsedSound: any, scene: Scene, rootUrl: string, sourceSound?: Sound): Sound {\r\n        const soundName = parsedSound.name;\r\n        let soundUrl;\r\n\r\n        if (parsedSound.url) {\r\n            soundUrl = rootUrl + parsedSound.url;\r\n        } else {\r\n            soundUrl = rootUrl + soundName;\r\n        }\r\n\r\n        const options = {\r\n            autoplay: parsedSound.autoplay,\r\n            loop: parsedSound.loop,\r\n            volume: parsedSound.volume,\r\n            spatialSound: parsedSound.spatialSound,\r\n            maxDistance: parsedSound.maxDistance,\r\n            rolloffFactor: parsedSound.rolloffFactor,\r\n            refDistance: parsedSound.refDistance,\r\n            distanceModel: parsedSound.distanceModel,\r\n            playbackRate: parsedSound.playbackRate,\r\n        };\r\n\r\n        let newSound: Sound;\r\n\r\n        if (!sourceSound) {\r\n            newSound = new Sound(\r\n                soundName,\r\n                soundUrl,\r\n                scene,\r\n                () => {\r\n                    scene.removePendingData(newSound);\r\n                },\r\n                options\r\n            );\r\n            scene.addPendingData(newSound);\r\n        } else {\r\n            const setBufferAndRun = () => {\r\n                if (sourceSound._isReadyToPlay) {\r\n                    newSound._audioBuffer = sourceSound.getAudioBuffer();\r\n                    newSound._isReadyToPlay = true;\r\n                    if (newSound.autoplay) {\r\n                        newSound.play(0, newSound._offset, newSound._length);\r\n                    }\r\n                } else {\r\n                    setTimeout(setBufferAndRun, 300);\r\n                }\r\n            };\r\n\r\n            newSound = new Sound(soundName, new ArrayBuffer(0), scene, null, options);\r\n            setBufferAndRun();\r\n        }\r\n\r\n        if (parsedSound.position) {\r\n            const soundPosition = Vector3.FromArray(parsedSound.position);\r\n            newSound.setPosition(soundPosition);\r\n        }\r\n        if (parsedSound.isDirectional) {\r\n            newSound.setDirectionalCone(parsedSound.coneInnerAngle || 360, parsedSound.coneOuterAngle || 360, parsedSound.coneOuterGain || 0);\r\n            if (parsedSound.localDirectionToMesh) {\r\n                const localDirectionToMesh = Vector3.FromArray(parsedSound.localDirectionToMesh);\r\n                newSound.setLocalDirectionToMesh(localDirectionToMesh);\r\n            }\r\n        }\r\n        if (parsedSound.connectedMeshId) {\r\n            const connectedMesh = scene.getMeshById(parsedSound.connectedMeshId);\r\n            if (connectedMesh) {\r\n                newSound.attachToMesh(connectedMesh);\r\n            }\r\n        }\r\n\r\n        if (parsedSound.metadata) {\r\n            newSound.metadata = parsedSound.metadata;\r\n        }\r\n\r\n        return newSound;\r\n    }\r\n\r\n    private _setOffset(value?: number) {\r\n        if (this._offset === value) {\r\n            return;\r\n        }\r\n        if (this.isPaused) {\r\n            this.stop();\r\n            this.isPaused = false;\r\n        }\r\n        this._offset = value;\r\n    }\r\n\r\n    private _clearTimeoutsAndObservers() {\r\n        if (this._tryToPlayTimeout) {\r\n            clearTimeout(this._tryToPlayTimeout);\r\n            this._tryToPlayTimeout = null;\r\n        }\r\n        if (this._audioUnlockedObserver) {\r\n            Engine.audioEngine?.onAudioUnlockedObservable.remove(this._audioUnlockedObserver);\r\n            this._audioUnlockedObserver = null;\r\n        }\r\n    }\r\n}\r\n", "import type { Sound } from \"../Audio/sound\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Wraps one or more Sound objects and selects one with random weight for playback.\r\n */\r\nexport class WeightedSound {\r\n    /** When true a Sound will be selected and played when the current playing Sound completes. */\r\n    public loop: boolean = false;\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _volume: number = 1;\r\n    /** A Sound is currently playing. */\r\n    public isPlaying: boolean = false;\r\n    /** A Sound is currently paused. */\r\n    public isPaused: boolean = false;\r\n\r\n    private _sounds: Sound[] = [];\r\n    private _weights: number[] = [];\r\n    private _currentIndex?: number;\r\n\r\n    /**\r\n     * Creates a new WeightedSound from the list of sounds given.\r\n     * @param loop When true a Sound will be selected and played when the current playing Sound completes.\r\n     * @param sounds Array of Sounds that will be selected from.\r\n     * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\r\n     */\r\n    constructor(loop: boolean, sounds: Sound[], weights: number[]) {\r\n        if (sounds.length !== weights.length) {\r\n            throw new Error(\"Sounds length does not equal weights length\");\r\n        }\r\n\r\n        this.loop = loop;\r\n        this._weights = weights;\r\n        // Normalize the weights\r\n        let weightSum = 0;\r\n        for (const weight of weights) {\r\n            weightSum += weight;\r\n        }\r\n        const invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\r\n        for (let i = 0; i < this._weights.length; i++) {\r\n            this._weights[i] *= invWeightSum;\r\n        }\r\n        this._sounds = sounds;\r\n        for (const sound of this._sounds) {\r\n            sound.onEndedObservable.add(() => {\r\n                this._onended();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value !== this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            for (const sound of this._sounds) {\r\n                sound.directionalConeInnerAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value !== this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            for (const sound of this._sounds) {\r\n                sound.directionalConeOuterAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public get volume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public set volume(value: number) {\r\n        if (value !== this._volume) {\r\n            for (const sound of this._sounds) {\r\n                sound.setVolume(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].autoplay = false;\r\n        }\r\n        if (this.loop && this.isPlaying) {\r\n            this.play();\r\n        } else {\r\n            this.isPlaying = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Suspend playback\r\n     */\r\n    public pause() {\r\n        this.isPaused = true;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop playback\r\n     */\r\n    public stop() {\r\n        this.isPlaying = false;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start playback.\r\n     * @param startOffset Position the clip head at a specific time in seconds.\r\n     */\r\n    public play(startOffset?: number) {\r\n        if (!this.isPaused) {\r\n            this.stop();\r\n            const randomValue = Math.random();\r\n            let total = 0;\r\n            for (let i = 0; i < this._weights.length; i++) {\r\n                total += this._weights[i];\r\n                if (randomValue <= total) {\r\n                    this._currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const sound = this._sounds[this._currentIndex!];\r\n        if (sound.isReady()) {\r\n            sound.play(0, this.isPaused ? undefined : startOffset);\r\n        } else {\r\n            sound.autoplay = true;\r\n        }\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n    }\r\n}\r\n", "import { Tools } from \"../Misc/tools\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * The type of a connection point - inpput or output.\r\n */\r\nexport enum FlowGraphConnectionType {\r\n    Input,\r\n    Output,\r\n}\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport interface IConnectable {\r\n    /**\r\n     * A uniquely identifying string for the connection.\r\n     */\r\n    uniqueId: string;\r\n    /**\r\n     * An array of the points that this point is connected to.\r\n     */\r\n    _connectedPoint: Array<IConnectable>;\r\n    /**\r\n     * Returns if the connection can only be connected to one other point.\r\n     */\r\n    _isSingularConnection(): boolean;\r\n    /**\r\n     * The type of the connection\r\n     */\r\n    _connectionType: FlowGraphConnectionType;\r\n    /**\r\n     * Connect this point to another point.\r\n     * @param point the point to connect to.\r\n     */\r\n    connectTo(point: IConnectable): void;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * The base connection class.\r\n */\r\nexport class FlowGraphConnection<BlockT, ConnectedToT extends IConnectable> implements IConnectable {\r\n    /** @internal */\r\n    public _connectedPoint: Array<ConnectedToT> = [];\r\n    /**\r\n     * A uniquely identifying string for the connection.\r\n     */\r\n    public uniqueId = RandomGUID();\r\n\r\n    /**\r\n     * The name of the connection.\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _connectionType: FlowGraphConnectionType;\r\n\r\n    /**\r\n     * Used for parsing connections.\r\n     * @internal\r\n     */\r\n    // disable warning as this is used for parsing\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public connectedPointIds: any[] = [];\r\n\r\n    public constructor(\r\n        name: string,\r\n        _connectionType: FlowGraphConnectionType,\r\n        /* @internal */ public _ownerBlock: BlockT\r\n    ) {\r\n        this.name = name;\r\n        this._connectionType = _connectionType;\r\n    }\r\n\r\n    /**\r\n     * The type of the connection\r\n     */\r\n    public get connectionType() {\r\n        return this._connectionType;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Override this to indicate if a point can connect to more than one point.\r\n     */\r\n    public _isSingularConnection(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns if a point is connected to any other point.\r\n     * @returns boolean indicating if the point is connected.\r\n     */\r\n    public isConnected(): boolean {\r\n        return this._connectedPoint.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Connects two connections together.\r\n     * @param point the connection to connect to.\r\n     */\r\n    public connectTo(point: ConnectedToT): void {\r\n        if (this._connectionType === point._connectionType) {\r\n            throw new Error(`Cannot connect two points of type ${this.connectionType}`);\r\n        }\r\n        if ((this._isSingularConnection() && this._connectedPoint.length > 0) || (point._isSingularConnection() && point._connectedPoint.length > 0)) {\r\n            throw new Error(\"Max number of connections for point reached\");\r\n        }\r\n        this._connectedPoint.push(point);\r\n        point._connectedPoint.push(this);\r\n    }\r\n\r\n    /**\r\n     * Saves the connection to a JSON object.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public serialize(serializationObject: any = {}) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.name = this.name;\r\n        serializationObject._connectionType = this._connectionType;\r\n        serializationObject.connectedPointIds = [];\r\n        serializationObject.className = this.getClassName();\r\n        for (const point of this._connectedPoint) {\r\n            serializationObject.connectedPointIds.push(point.uniqueId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the connection.\r\n     */\r\n    public getClassName(): string {\r\n        return \"FGConnection\";\r\n    }\r\n\r\n    /**\r\n     * Deserialize from a object into this\r\n     * @param serializationObject the object to deserialize from.\r\n     */\r\n    deserialize(serializationObject: any) {\r\n        this.uniqueId = serializationObject.uniqueId;\r\n        this.name = serializationObject.name;\r\n        this._connectionType = serializationObject._connectionType;\r\n        this.connectedPointIds = serializationObject.connectedPointIds;\r\n    }\r\n\r\n    /**\r\n     * Parses a connection from an object\r\n     * @param serializationObject the object to parse from.\r\n     * @param ownerBlock the block that owns the connection.\r\n     * @returns the parsed connection.\r\n     */\r\n    public static Parse(serializationObject: any = {}, ownerBlock: FlowGraphBlock) {\r\n        const type = Tools.Instantiate(serializationObject.className);\r\n        const connection = new type(serializationObject.name, serializationObject._connectionType, ownerBlock);\r\n        connection.deserialize(serializationObject);\r\n        return connection;\r\n    }\r\n}\r\n", "import { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * @experimental\r\n * Class that represents an integer value.\r\n */\r\nexport class FlowGraphInteger {\r\n    /**\r\n     * The value of the integer. Its type\r\n     * is a javascript number. Shouldn't be\r\n     * directly modified - it is populated by\r\n     * the constructor.\r\n     */\r\n    readonly value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = this._toInt(value);\r\n    }\r\n\r\n    /**\r\n     * Converts a float to an integer.\r\n     * @param n the float to convert\r\n     * @returns the result of n | 0 - converting it to a int\r\n     */\r\n    private _toInt(n: number): number {\r\n        return n | 0;\r\n    }\r\n\r\n    /**\r\n     * Adds two integers together.\r\n     * @param other the other integer to add\r\n     * @returns a FlowGraphInteger with the result of the addition\r\n     */\r\n    public add(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value + other.value);\r\n    }\r\n\r\n    /**\r\n     * Subtracts two integers.\r\n     * @param other the other integer to subtract\r\n     * @returns a FlowGraphInteger with the result of the subtraction\r\n     */\r\n    public subtract(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value - other.value);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two integers.\r\n     * @param other the other integer to multiply\r\n     * @returns a FlowGraphInteger with the result of the multiplication\r\n     */\r\n    public multiply(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(Math.imul(this.value, other.value));\r\n    }\r\n\r\n    /**\r\n     * Divides two integers.\r\n     * @param other the other integer to divide\r\n     * @returns a FlowGraphInteger with the result of the division\r\n     */\r\n    public divide(other: FlowGraphInteger): FlowGraphInteger {\r\n        return new FlowGraphInteger(this.value / other.value);\r\n    }\r\n\r\n    /**\r\n     * The class name of this type.\r\n     * @returns\r\n     */\r\n    public getClassName() {\r\n        return FlowGraphInteger.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Compares two integers for equality.\r\n     * @param other the other integer to compare\r\n     * @returns\r\n     */\r\n    public equals(other: FlowGraphInteger): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    public static ClassName = \"FlowGraphInteger\";\r\n\r\n    /**\r\n     * Parses a FlowGraphInteger from a serialization object.\r\n     * @param serializationObject\r\n     * @returns\r\n     */\r\n    public static Parse(serializationObject: any): FlowGraphInteger {\r\n        return new FlowGraphInteger(serializationObject.value);\r\n    }\r\n}\r\nRegisterClass(\"FlowGraphInteger\", FlowGraphInteger);\r\n", "import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { FlowGraphInteger } from \"./flowGraphInteger\";\r\n\r\n/**\r\n * A rich type represents extra information about a type,\r\n * such as its name and a default value constructor.\r\n * @experimental\r\n */\r\nexport class RichType<T> {\r\n    constructor(\r\n        /**\r\n         * The name given to the type.\r\n         */\r\n        public typeName: string,\r\n        /**\r\n         * The default value of the type.\r\n         */\r\n        public defaultValue: T\r\n    ) {}\r\n\r\n    /**\r\n     * Serializes this rich type into a serialization object.\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    serialize(serializationObject: any) {\r\n        serializationObject.typeName = this.typeName;\r\n        serializationObject.defaultValue = this.defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Parses a rich type from a serialization object.\r\n     * @param serializationObject a serialization object\r\n     * @returns the parsed rich type\r\n     */\r\n    static Parse(serializationObject: any): RichType<any> {\r\n        return new RichType(serializationObject.typeName, serializationObject.defaultValue);\r\n    }\r\n}\r\n\r\nexport const RichTypeAny: RichType<any> = new RichType(\"any\", undefined);\r\n\r\nexport const RichTypeString: RichType<string> = new RichType(\"string\", \"\");\r\n\r\nexport const RichTypeNumber: RichType<number> = new RichType(\"number\", 0);\r\n\r\nexport const RichTypeBoolean: RichType<boolean> = new RichType(\"boolean\", false);\r\n\r\nexport const RichTypeVector2: RichType<Vector2> = new RichType(\"Vector2\", Vector2.Zero());\r\n\r\nexport const RichTypeVector3: RichType<Vector3> = new RichType(\"Vector3\", Vector3.Zero());\r\n\r\nexport const RichTypeVector4: RichType<Vector4> = new RichType(\"Vector4\", Vector4.Zero());\r\n\r\nexport const RichTypeMatrix: RichType<Matrix> = new RichType(\"Matrix\", Matrix.Identity());\r\n\r\nexport const RichTypeColor3: RichType<Color3> = new RichType(\"Color3\", Color3.Black());\r\n\r\nexport const RichTypeColor4: RichType<Color4> = new RichType(\"Color4\", new Color4(0, 0, 0, 0));\r\n\r\nexport const RichTypeQuaternion: RichType<Quaternion> = new RichType(\"Quaternion\", Quaternion.Identity());\r\n\r\nexport const RichTypeFlowGraphInteger: RichType<FlowGraphInteger> = new RichType(\"FlowGraphInteger\", new FlowGraphInteger(0));\r\n\r\n/**\r\n * Given a value, try to deduce its rich type.\r\n * @param value the value to deduce the rich type from\r\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\r\n */\r\nexport function getRichTypeFromValue<T>(value: T): RichType<T> {\r\n    switch (typeof value) {\r\n        case \"string\":\r\n            return RichTypeString as RichType<T>;\r\n        case \"number\":\r\n            return RichTypeNumber as RichType<T>;\r\n        case \"boolean\":\r\n            return RichTypeBoolean as RichType<T>;\r\n        case \"object\":\r\n            if (value instanceof Vector2) {\r\n                return RichTypeVector2 as RichType<T>;\r\n            } else if (value instanceof Vector3) {\r\n                return RichTypeVector3 as RichType<T>;\r\n            } else if (value instanceof Vector4) {\r\n                return RichTypeVector4 as RichType<T>;\r\n            } else if (value instanceof Color3) {\r\n                return RichTypeColor3 as RichType<T>;\r\n            } else if (value instanceof Color4) {\r\n                return RichTypeColor4 as RichType<T>;\r\n            } else if (value instanceof Quaternion) {\r\n                return RichTypeQuaternion as RichType<T>;\r\n            } else if (value instanceof FlowGraphInteger) {\r\n                return RichTypeFlowGraphInteger as RichType<T>;\r\n            } else {\r\n                return RichTypeAny as RichType<T>;\r\n            }\r\n        default:\r\n            return RichTypeAny as RichType<T>;\r\n    }\r\n}\r\n", "import { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { RichType } from \"./flowGraphRichTypes\";\r\n/**\r\n * @experimental\r\n * Represents a connection point for data.\r\n * An unconnected input point can have a default value.\r\n * An output point will only have a value if it is connected to an input point. Furthermore,\r\n * if the point belongs to a \"function\" node, the node will run its function to update the value.\r\n */\r\nexport class FlowGraphDataConnection<T> extends FlowGraphConnection<FlowGraphBlock, FlowGraphDataConnection<T>> {\r\n    /**\r\n     * Create a new data connection point.\r\n     * @param name\r\n     * @param connectionType\r\n     * @param ownerBlock\r\n     * @param richType\r\n     */\r\n    public constructor(\r\n        name: string,\r\n        connectionType: FlowGraphConnectionType,\r\n        ownerBlock: FlowGraphBlock,\r\n        /**\r\n         * the type of the data in this block\r\n         */\r\n        public richType: RichType<T>\r\n    ) {\r\n        super(name, connectionType, ownerBlock);\r\n    }\r\n\r\n    /**\r\n     * An output data block can connect to multiple input data blocks,\r\n     * but an input data block can only connect to one output data block.\r\n     * @returns true if the connection is singular\r\n     */\r\n    public _isSingularConnection(): boolean {\r\n        return this.connectionType === FlowGraphConnectionType.Input;\r\n    }\r\n\r\n    /**\r\n     * Set the value of the connection in a specific context.\r\n     * @param value the value to set\r\n     * @param context the context to which the value is set\r\n     */\r\n    public setValue(value: T, context: FlowGraphContext): void {\r\n        context._setConnectionValue(this, value);\r\n    }\r\n\r\n    /**\r\n     * Connect this point to another point.\r\n     * @param point the point to connect to.\r\n     */\r\n    public connectTo(point: FlowGraphDataConnection<T>): void {\r\n        super.connectTo(point);\r\n    }\r\n\r\n    private _getValueOrDefault(context: FlowGraphContext): T {\r\n        if (context._hasConnectionValue(this)) {\r\n            return context._getConnectionValue(this);\r\n        } else {\r\n            return this.richType.defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the connection in a specific context.\r\n     * @param context the context from which the value is retrieved\r\n     * @returns the value of the connection\r\n     */\r\n    public getValue(context: FlowGraphContext): T {\r\n        if (this.connectionType === FlowGraphConnectionType.Output) {\r\n            context._notifyExecuteNode(this._ownerBlock);\r\n            this._ownerBlock._updateOutputs(context);\r\n            return this._getValueOrDefault(context);\r\n        }\r\n\r\n        if (!this.isConnected()) {\r\n            return this._getValueOrDefault(context);\r\n        } else {\r\n            return this._connectedPoint[0].getValue(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the object.\r\n     */\r\n    public getClassName(): string {\r\n        return \"FGDataConnection\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this object.\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any = {}) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.richType = {};\r\n        this.richType.serialize(serializationObject.richType);\r\n    }\r\n\r\n    /**\r\n     * Parses a data connection from a serialized object.\r\n     * @param serializationObject the object to parse from\r\n     * @param ownerBlock the block that owns the connection\r\n     * @returns the parsed connection\r\n     */\r\n    public static Parse(serializationObject: any, ownerBlock: FlowGraphBlock): FlowGraphDataConnection<any> {\r\n        const obj = FlowGraphConnection.Parse(serializationObject, ownerBlock);\r\n        obj.richType = RichType.Parse(serializationObject.richType);\r\n        return obj;\r\n    }\r\n}\r\n\r\nRegisterClass(\"FGDataConnection\", FlowGraphDataConnection);\r\n", "import { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Matrix, Quaternion, Vector2, Vector3, Vector4 } from \"../Maths/math.vector\";\r\nimport type { Scene } from \"../scene\";\r\nimport { FlowGraphInteger } from \"./flowGraphInteger\";\r\n\r\nfunction isMeshClassName(className: string) {\r\n    return (\r\n        className === \"Mesh\" ||\r\n        className === \"AbstractMesh\" ||\r\n        className === \"GroundMesh\" ||\r\n        className === \"InstanceMesh\" ||\r\n        className === \"LinesMesh\" ||\r\n        className === \"GoldbergMesh\" ||\r\n        className === \"GreasedLineMesh\" ||\r\n        className === \"TrailMesh\"\r\n    );\r\n}\r\n\r\nfunction isVectorClassName(className: string) {\r\n    return className === \"Vector2\" || className === \"Vector3\" || className === \"Vector4\" || className === \"Quaternion\" || className === \"Color3\" || className === \"Color4\";\r\n}\r\n\r\nfunction parseVector(className: string, value: Array<number>) {\r\n    if (className === \"Vector2\") {\r\n        return Vector2.FromArray(value);\r\n    } else if (className === \"Vector3\") {\r\n        return Vector3.FromArray(value);\r\n    } else if (className === \"Vector4\") {\r\n        return Vector4.FromArray(value);\r\n    } else if (className === \"Quaternion\") {\r\n        return Quaternion.FromArray(value);\r\n    } else if (className === \"Color3\") {\r\n        return new Color3(value[0], value[1], value[2]);\r\n    } else if (className === \"Color4\") {\r\n        return new Color4(value[0], value[1], value[2], value[3]);\r\n    } else {\r\n        throw new Error(`Unknown vector class name ${className}`);\r\n    }\r\n}\r\n\r\n/**\r\n * The default function that serializes values in a context object to a serialization object\r\n * @param key the key where the value should be stored in the serialization object\r\n * @param value the value to store\r\n * @param serializationObject the object where the value will be stored\r\n */\r\nexport function defaultValueSerializationFunction(key: string, value: any, serializationObject: any) {\r\n    const className = value?.getClassName?.() ?? \"\";\r\n    if (isMeshClassName(className)) {\r\n        serializationObject[key] = {\r\n            name: value.name,\r\n            className,\r\n        };\r\n    } else if (isVectorClassName(className)) {\r\n        serializationObject[key] = {\r\n            value: value.asArray(),\r\n            className,\r\n        };\r\n    } else {\r\n        serializationObject[key] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * The default function that parses values stored in a serialization object\r\n * @param key the key to the value that will be parsed\r\n * @param serializationObject the object that will be parsed\r\n * @param scene\r\n * @returns\r\n */\r\nexport function defaultValueParseFunction(key: string, serializationObject: any, scene: Scene) {\r\n    const intermediateValue = serializationObject[key];\r\n    let finalValue;\r\n    const className = intermediateValue?.className;\r\n    if (isMeshClassName(className)) {\r\n        finalValue = scene.getMeshByName(intermediateValue.name);\r\n    } else if (isVectorClassName(className)) {\r\n        finalValue = parseVector(className, intermediateValue.value);\r\n    } else if (className === \"Matrix\") {\r\n        finalValue = Matrix.FromArray(intermediateValue.value);\r\n    } else if (className === FlowGraphInteger.ClassName) {\r\n        finalValue = FlowGraphInteger.Parse(intermediateValue);\r\n    } else if (intermediateValue && intermediateValue.value !== undefined) {\r\n        finalValue = intermediateValue.value;\r\n    } else {\r\n        finalValue = intermediateValue;\r\n    }\r\n    return finalValue;\r\n}\r\n\r\n/**\r\n * Given a name of a flow graph block class, return if this\r\n * class needs to be created with a path converter. Used in\r\n * parsing.\r\n * @param className the name of the flow graph block class\r\n * @returns a boolean indicating if the class needs a path converter\r\n */\r\nexport function needsPathConverter(className: string) {\r\n    // I am not using the ClassName property here because it was causing a circular dependency\r\n    // that jest didn't like!\r\n    return className === \"FGSetPropertyBlock\" || className === \"FGGetPropertyBlock\" || className === \"FGPlayAnimationBlock\" || className === \"FGMeshPickEventBlock\";\r\n}\r\n", "import { RandomGUID } from \"../Misc/guid\";\r\nimport { FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { RichType } from \"./flowGraphRichTypes\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { ISerializedFlowGraphBlock, IObjectAccessor } from \"./typeDefinitions\";\r\nimport { defaultValueParseFunction, defaultValueSerializationFunction, needsPathConverter } from \"./serialization\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { IPathToObjectConverter } from \"../ObjectModel/objectModelInterfaces\";\r\n\r\n/**\r\n * @experimental\r\n * Options for parsing a block.\r\n */\r\nexport interface IFlowGraphBlockParseOptions {\r\n    /**\r\n     * A function that parses a value from a serialization object.\r\n     * @param key the key of the property\r\n     * @param serializationObject the serialization object where the property is located\r\n     * @param scene the scene that the block is being parsed in\r\n     * @returns the parsed value\r\n     */\r\n    valueParseFunction?: (key: string, serializationObject: any, scene: Scene) => any;\r\n    /**\r\n     * The scene that the block is being parsed in.\r\n     */\r\n    scene: Scene;\r\n    /**\r\n     * The path converter to use to convert the path to an object accessor.\r\n     */\r\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Configuration for a block.\r\n */\r\nexport interface IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The name of the block.\r\n     */\r\n    name?: string;\r\n    [extraPropertyKey: string]: any;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block in a flow graph. The most basic form\r\n * of a block has inputs and outputs that contain\r\n * data.\r\n */\r\nexport class FlowGraphBlock {\r\n    /**\r\n     * A randomly generated GUID for each block.\r\n     */\r\n    public uniqueId = RandomGUID();\r\n    /**\r\n     * The name of the block.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * The data inputs of the block.\r\n     */\r\n    public dataInputs: FlowGraphDataConnection<any>[];\r\n    /**\r\n     * The data outputs of the block.\r\n     */\r\n    public dataOutputs: FlowGraphDataConnection<any>[];\r\n\r\n    /**\r\n     * Metadata that can be used by the block.\r\n     */\r\n    public metadata: any;\r\n\r\n    /** Constructor is protected so only subclasses can be instantiated\r\n     * @param config optional configuration for this block\r\n     */\r\n    protected constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        this.name = this.config?.name ?? this.getClassName();\r\n        this.dataInputs = [];\r\n        this.dataOutputs = [];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        // empty by default, overriden in data blocks\r\n    }\r\n\r\n    /**\r\n     * Registers a data input on the block.\r\n     * @param name the name of the input\r\n     * @param richType the type of the input\r\n     * @returns the created connection\r\n     */\r\n    public registerDataInput<T>(name: string, richType: RichType<T>): FlowGraphDataConnection<T> {\r\n        const input = new FlowGraphDataConnection(name, FlowGraphConnectionType.Input, this, richType);\r\n        this.dataInputs.push(input);\r\n        return input;\r\n    }\r\n\r\n    /**\r\n     * Registers a data output on the block.\r\n     * @param name the name of the input\r\n     * @param richType the type of the input\r\n     * @returns the created connection\r\n     */\r\n    public registerDataOutput<T>(name: string, richType: RichType<T>): FlowGraphDataConnection<T> {\r\n        const output = new FlowGraphDataConnection(name, FlowGraphConnectionType.Output, this, richType);\r\n        this.dataOutputs.push(output);\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Given the name of a data input, returns the connection if it exists\r\n     * @param name the name of the input\r\n     * @returns the connection if it exists, undefined otherwise\r\n     */\r\n    public getDataInput(name: string): FlowGraphDataConnection<any> | undefined {\r\n        return this.dataInputs.find((i) => i.name === name);\r\n    }\r\n\r\n    /**\r\n     * Given the name of a data output, returns the connection if it exists\r\n     * @param name the name of the output\r\n     * @returns the connection if it exists, undefined otherwise\r\n     */\r\n    public getDataOutput(name: string): FlowGraphDataConnection<any> | undefined {\r\n        return this.dataOutputs.find((i) => i.name === name);\r\n    }\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize to\r\n     * @param _valueSerializeFunction a function that serializes a specific value\r\n     */\r\n    public serialize(serializationObject: any = {}, _valueSerializeFunction: (key: string, value: any, serializationObject: any) => any = defaultValueSerializationFunction) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.config = {};\r\n        if (this.config) {\r\n            serializationObject.config[\"name\"] = this.config.name;\r\n        }\r\n        serializationObject.dataInputs = [];\r\n        serializationObject.dataOutputs = [];\r\n        serializationObject.className = this.getClassName();\r\n        for (const input of this.dataInputs) {\r\n            const serializedInput: any = {};\r\n            input.serialize(serializedInput);\r\n            serializationObject.dataInputs.push(serializedInput);\r\n        }\r\n        for (const output of this.dataOutputs) {\r\n            const serializedOutput: any = {};\r\n            output.serialize(serializedOutput);\r\n            serializationObject.dataOutputs.push(serializedOutput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FGBlock\";\r\n    }\r\n\r\n    /**\r\n     * Parses a block from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     * @param parseOptions options for parsing the block\r\n     * @returns the parsed block\r\n     */\r\n    public static Parse(serializationObject: ISerializedFlowGraphBlock, parseOptions: IFlowGraphBlockParseOptions): FlowGraphBlock {\r\n        const classType = Tools.Instantiate(serializationObject.className);\r\n        const parsedConfig: any = {};\r\n        const valueParseFunction = parseOptions.valueParseFunction ?? defaultValueParseFunction;\r\n        if (serializationObject.config) {\r\n            for (const key in serializationObject.config) {\r\n                parsedConfig[key] = valueParseFunction(key, serializationObject.config, parseOptions.scene);\r\n            }\r\n        }\r\n        if (needsPathConverter(serializationObject.className)) {\r\n            parsedConfig.pathConverter = parseOptions.pathConverter;\r\n        }\r\n        const obj = new classType(parsedConfig);\r\n        obj.uniqueId = serializationObject.uniqueId;\r\n        for (let i = 0; i < serializationObject.dataInputs.length; i++) {\r\n            const dataInput = obj.getDataInput(serializationObject.dataInputs[i].name);\r\n            if (dataInput) {\r\n                dataInput.deserialize(serializationObject.dataInputs[i]);\r\n            } else {\r\n                throw new Error(\"Could not find data input with name \" + serializationObject.dataInputs[i].name + \" in block \" + serializationObject.className);\r\n            }\r\n        }\r\n        for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\r\n            const dataOutput = obj.getDataOutput(serializationObject.dataOutputs[i].name);\r\n            if (dataOutput) {\r\n                dataOutput.deserialize(serializationObject.dataOutputs[i]);\r\n            } else {\r\n                throw new Error(\"Could not find data output with name \" + serializationObject.dataOutputs[i].name + \" in block \" + serializationObject.className);\r\n            }\r\n        }\r\n        obj.metadata = serializationObject.metadata;\r\n        obj.deserialize && obj.deserialize(serializationObject);\r\n        return obj;\r\n    }\r\n}\r\n", "import type { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * @experimental\r\n * Represents a connection point for a signal.\r\n * When an output point is activated, it will activate the connected input point.\r\n * When an input point is activated, it will execute the block it belongs to.\r\n */\r\nexport class FlowGraphSignalConnection extends FlowGraphConnection<FlowGraphExecutionBlock, FlowGraphSignalConnection> {\r\n    /**\r\n     * @internal\r\n     * A signal input can be connected to more than one signal output,\r\n     * but a signal output can only connect to one signal input\r\n     * @returns true if the connection is singular\r\n     */\r\n    public _isSingularConnection(): boolean {\r\n        return this.connectionType === FlowGraphConnectionType.Output;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activateSignal(context: FlowGraphContext): void {\r\n        if (this.connectionType === FlowGraphConnectionType.Input) {\r\n            context._notifyExecuteNode(this._ownerBlock);\r\n            this._ownerBlock._execute(context, this);\r\n            context._increaseExecutionId();\r\n        } else {\r\n            this._connectedPoint[0]?._activateSignal(context);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"FlowGraphSignalConnection\", FlowGraphSignalConnection);\r\n", "import type { IFlowGraphBlockConfiguration } from \"./flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport { FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\r\n\r\n/**\r\n * @experimental\r\n * A block that executes some action. Always has an input signal (which is not used by event blocks).\r\n * Can have one or more output signals.\r\n */\r\nexport abstract class FlowGraphExecutionBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The input signal of the block.\r\n     */\r\n    public readonly in: FlowGraphSignalConnection;\r\n    /**\r\n     * Input connections that activate the block.\r\n     */\r\n    public signalInputs: FlowGraphSignalConnection[];\r\n    /**\r\n     * Output connections that can activate downstream blocks.\r\n     */\r\n    public signalOutputs: FlowGraphSignalConnection[];\r\n\r\n    protected constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.signalInputs = [];\r\n        this.signalOutputs = [];\r\n        this.in = this._registerSignalInput(\"in\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Executes the flow graph execution block.\r\n     */\r\n    public abstract _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void;\r\n\r\n    protected _registerSignalInput(name: string): FlowGraphSignalConnection {\r\n        const input = new FlowGraphSignalConnection(name, FlowGraphConnectionType.Input, this);\r\n        this.signalInputs.push(input);\r\n        return input;\r\n    }\r\n\r\n    protected _registerSignalOutput(name: string): FlowGraphSignalConnection {\r\n        const output = new FlowGraphSignalConnection(name, FlowGraphConnectionType.Output, this);\r\n        this.signalOutputs.push(output);\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Given a name of a signal input, return that input if it exists\r\n     * @param name the name of the input\r\n     * @returns if the input exists, the input. Otherwise, undefined.\r\n     */\r\n    public getSignalInput(name: string): FlowGraphSignalConnection | undefined {\r\n        return this.signalInputs.find((input) => input.name === name);\r\n    }\r\n\r\n    /**\r\n     * Given a name of a signal output, return that input if it exists\r\n     * @param name the name of the input\r\n     * @returns if the input exists, the input. Otherwise, undefined.\r\n     */\r\n    public getSignalOutput(name: string): FlowGraphSignalConnection | undefined {\r\n        return this.signalOutputs.find((output) => output.name === name);\r\n    }\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize in\r\n     */\r\n    public serialize(serializationObject: any = {}) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.signalInputs = [];\r\n        serializationObject.signalOutputs = [];\r\n        for (const input of this.signalInputs) {\r\n            const serializedInput: any = {};\r\n            input.serialize(serializedInput);\r\n            serializationObject.signalInputs.push(serializedInput);\r\n        }\r\n        for (const output of this.signalOutputs) {\r\n            const serializedOutput: any = {};\r\n            output.serialize(serializedOutput);\r\n            serializationObject.signalOutputs.push(serializedOutput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deserializes from an object\r\n     * @param serializationObject the object to deserialize from\r\n     */\r\n    public deserialize(serializationObject: any) {\r\n        for (let i = 0; i < serializationObject.signalInputs.length; i++) {\r\n            const signalInput = this.getSignalInput(serializationObject.signalInputs[i].name);\r\n            if (signalInput) {\r\n                signalInput.deserialize(serializationObject.signalInputs[i]);\r\n            } else {\r\n                throw new Error(\"Could not find signal input with name \" + serializationObject.signalInputs[i].name + \" in block \" + serializationObject.className);\r\n            }\r\n        }\r\n        for (let i = 0; i < serializationObject.signalOutputs.length; i++) {\r\n            const signalOutput = this.getSignalOutput(serializationObject.signalOutputs[i].name);\r\n            if (signalOutput) {\r\n                signalOutput.deserialize(serializationObject.signalOutputs[i]);\r\n            } else {\r\n                throw new Error(\"Could not find signal output with name \" + serializationObject.signalOutputs[i].name + \" in block \" + serializationObject.className);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FGExecutionBlock\";\r\n    }\r\n}\r\n", "import type { IFlowGraphBlockConfiguration } from \"./flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\r\n\r\n/**\r\n * An async execution block can start tasks that will be executed asynchronously.\r\n * It should also be responsible for clearing it in _cancelPendingTasks.\r\n * @experimental\r\n */\r\nexport abstract class FlowGraphAsyncExecutionBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Output connection: The signal that is triggered when the synchronous execution of this block is done.\r\n     */\r\n    public out: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: The signal that is triggered when the asynchronous execution of this block is done.\r\n     */\r\n    public done: FlowGraphSignalConnection;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.out = this._registerSignalOutput(\"out\");\r\n        this.done = this._registerSignalOutput(\"done\");\r\n    }\r\n    /**\r\n     * @internal\r\n     * This function can be overridden to start any\r\n     * pending tasks this node might have, such as\r\n     * timeouts and playing animations.\r\n     * @param context\r\n     */\r\n    public abstract _preparePendingTasks(context: FlowGraphContext): void;\r\n\r\n    /**\r\n     * @internal\r\n     * @param context\r\n     */\r\n    public _startPendingTasks(context: FlowGraphContext) {\r\n        this._preparePendingTasks(context);\r\n        context._addPendingBlock(this);\r\n    }\r\n\r\n    public abstract _cancelPendingTasks(context: FlowGraphContext): void;\r\n}\r\n", "import { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\n\r\n/**\r\n * @experimental\r\n * A type of block that listens to an event observable and activates\r\n * its output signal when the event is triggered.\r\n */\r\nexport abstract class FlowGraphEventBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        context._notifyExecuteNode(this);\r\n        this.out._activateSignal(context);\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { FlowGraph } from \"./flowGraph\";\r\nimport type { ISerializedFlowGraphContext } from \"./typeDefinitions\";\r\nimport { defaultValueParseFunction, defaultValueSerializationFunction } from \"./serialization\";\r\nimport type { FlowGraphCoordinator } from \"./flowGraphCoordinator\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Construction parameters for the context.\r\n * @experimental\r\n */\r\nexport interface IFlowGraphContextConfiguration {\r\n    /**\r\n     * The scene that the flow graph context belongs to.\r\n     */\r\n    readonly scene: Scene;\r\n    /**\r\n     * The event coordinator used by the flow graph context.\r\n     */\r\n    readonly coordinator: FlowGraphCoordinator;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Options for parsing a context.\r\n */\r\nexport interface IFlowGraphContextParseOptions {\r\n    /**\r\n     * A function that parses a value from a serialization object.\r\n     * @param key the key of the value\r\n     * @param serializationObject the object containing the value\r\n     * @param scene the current scene\r\n     * @returns\r\n     */\r\n    readonly valueParseFunction?: (key: string, serializationObject: any, scene: Scene) => any;\r\n    /**\r\n     * The graph that the context is being parsed in.\r\n     */\r\n    readonly graph: FlowGraph;\r\n}\r\n/**\r\n * @experimental\r\n * The context represents the current state and execution of the flow graph.\r\n * It contains both user-defined variables, which are derived from\r\n * a more general variable definition, and execution variables that\r\n * are set by the blocks.\r\n */\r\nexport class FlowGraphContext {\r\n    /**\r\n     * A randomly generated GUID for each context.\r\n     */\r\n    @serialize()\r\n    public uniqueId = RandomGUID();\r\n    /**\r\n     * These are the variables defined by a user.\r\n     */\r\n    private _userVariables: { [key: string]: any } = {};\r\n    /**\r\n     * These are the variables set by the blocks.\r\n     */\r\n    private _executionVariables: { [key: string]: any } = {};\r\n    /**\r\n     * These are the values for the data connection points\r\n     */\r\n    private _connectionValues: { [key: string]: any } = {};\r\n    /**\r\n     * These are the variables set by the graph.\r\n     */\r\n    private readonly _configuration: IFlowGraphContextConfiguration;\r\n    /**\r\n     * These are blocks that have currently pending tasks/listeners that need to be cleaned up.\r\n     */\r\n    private _pendingBlocks: FlowGraphAsyncExecutionBlock[] = [];\r\n    /**\r\n     * A monotonically increasing ID for each execution.\r\n     * Incremented for every block executed.\r\n     */\r\n    private _executionId = 0;\r\n    /**\r\n     * Observable that is triggered when a node is executed.\r\n     */\r\n    public onNodeExecutedObservable: Observable<FlowGraphBlock> = new Observable<FlowGraphBlock>();\r\n\r\n    constructor(params: IFlowGraphContextConfiguration) {\r\n        this._configuration = params;\r\n    }\r\n\r\n    /**\r\n     * Check if a user-defined variable is defined.\r\n     * @param name the name of the variable\r\n     * @returns true if the variable is defined\r\n     */\r\n    public hasVariable(name: string) {\r\n        return name in this._userVariables;\r\n    }\r\n\r\n    /**\r\n     * Set a user-defined variable.\r\n     * @param name the name of the variable\r\n     * @param value the value of the variable\r\n     */\r\n    public setVariable(name: string, value: any) {\r\n        this._userVariables[name] = value;\r\n    }\r\n\r\n    /**\r\n     * Get a user-defined variable.\r\n     * @param name the name of the variable\r\n     * @returns the value of the variable\r\n     */\r\n    public getVariable(name: string): any {\r\n        return this._userVariables[name];\r\n    }\r\n\r\n    /**\r\n     * Gets all user variables map\r\n     */\r\n    public get userVariables() {\r\n        return this._userVariables;\r\n    }\r\n\r\n    private _getUniqueIdPrefixedName(obj: FlowGraphBlock, name: string): string {\r\n        return `${obj.uniqueId}_${name}`;\r\n    }\r\n\r\n    /**\r\n     * Set an internal execution variable\r\n     * @internal\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public _setExecutionVariable(block: FlowGraphBlock, name: string, value: any) {\r\n        this._executionVariables[this._getUniqueIdPrefixedName(block, name)] = value;\r\n    }\r\n\r\n    /**\r\n     * Get an internal execution variable\r\n     * @internal\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public _getExecutionVariable(block: FlowGraphBlock, name: string, defaultValue?: any): any {\r\n        if (this._hasExecutionVariable(block, name)) {\r\n            return this._executionVariables[this._getUniqueIdPrefixedName(block, name)];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an internal execution variable\r\n     * @internal\r\n     * @param block\r\n     * @param name\r\n     */\r\n    public _deleteExecutionVariable(block: FlowGraphBlock, name: string) {\r\n        delete this._executionVariables[this._getUniqueIdPrefixedName(block, name)];\r\n    }\r\n\r\n    /**\r\n     * Check if an internal execution variable is defined\r\n     * @internal\r\n     * @param block\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public _hasExecutionVariable(block: FlowGraphBlock, name: string) {\r\n        return this._getUniqueIdPrefixedName(block, name) in this._executionVariables;\r\n    }\r\n\r\n    /**\r\n     * Check if a connection value is defined\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @returns\r\n     */\r\n    public _hasConnectionValue(connectionPoint: FlowGraphDataConnection<any>) {\r\n        return connectionPoint.uniqueId in this._connectionValues;\r\n    }\r\n\r\n    /**\r\n     * Set a connection value\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @param value\r\n     */\r\n    public _setConnectionValue<T>(connectionPoint: FlowGraphDataConnection<T>, value: T) {\r\n        this._connectionValues[connectionPoint.uniqueId] = value;\r\n    }\r\n\r\n    /**\r\n     * Get a connection value\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @returns\r\n     */\r\n    public _getConnectionValue<T>(connectionPoint: FlowGraphDataConnection<T>): T {\r\n        return this._connectionValues[connectionPoint.uniqueId];\r\n    }\r\n\r\n    /**\r\n     * Get the configuration\r\n     * @internal\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public get configuration() {\r\n        return this._configuration;\r\n    }\r\n\r\n    /**\r\n     * Add a block to the list of blocks that have pending tasks.\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _addPendingBlock(block: FlowGraphAsyncExecutionBlock) {\r\n        this._pendingBlocks.push(block);\r\n    }\r\n\r\n    /**\r\n     * Remove a block from the list of blocks that have pending tasks.\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _removePendingBlock(block: FlowGraphAsyncExecutionBlock) {\r\n        const index = this._pendingBlocks.indexOf(block);\r\n        if (index !== -1) {\r\n            this._pendingBlocks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all pending blocks.\r\n     * @internal\r\n     */\r\n    public _clearPendingBlocks() {\r\n        for (const block of this._pendingBlocks) {\r\n            block._cancelPendingTasks(this);\r\n        }\r\n        this._pendingBlocks.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Function that notifies the node executed observable\r\n     * @param node\r\n     */\r\n    public _notifyExecuteNode(node: FlowGraphBlock) {\r\n        this.onNodeExecutedObservable.notifyObservers(node);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _increaseExecutionId() {\r\n        this._executionId++;\r\n    }\r\n    /**\r\n     * A monotonically increasing ID for each execution.\r\n     * Incremented for every block executed.\r\n     */\r\n    public get executionId() {\r\n        return this._executionId;\r\n    }\r\n\r\n    /**\r\n     * Serializes a context\r\n     * @param serializationObject the object to write the values in\r\n     * @param valueSerializationFunction a function to serialize complex values\r\n     */\r\n    public serialize(serializationObject: any = {}, valueSerializationFunction: (key: string, value: any, serializationObject: any) => void = defaultValueSerializationFunction) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject._userVariables = {};\r\n        for (const key in this._userVariables) {\r\n            valueSerializationFunction(key, this._userVariables[key], serializationObject._userVariables);\r\n        }\r\n        serializationObject._connectionValues = {};\r\n        for (const key in this._connectionValues) {\r\n            valueSerializationFunction(key, this._connectionValues[key], serializationObject._connectionValues);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the class name of the object.\r\n     */\r\n    public getClassName() {\r\n        return \"FGContext\";\r\n    }\r\n\r\n    /**\r\n     * Parses a context\r\n     * @param serializationObject the object containing the context serialization values\r\n     * @param options the options for parsing the context\r\n     * @returns\r\n     */\r\n    public static Parse(serializationObject: ISerializedFlowGraphContext, options: IFlowGraphContextParseOptions): FlowGraphContext {\r\n        const result = options.graph.createContext();\r\n        const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\r\n        result.uniqueId = serializationObject.uniqueId;\r\n        for (const key in serializationObject._userVariables) {\r\n            const value = valueParseFunction(key, serializationObject._userVariables, result._configuration.scene);\r\n            result._userVariables[key] = value;\r\n        }\r\n        for (const key in serializationObject._connectionValues) {\r\n            const value = valueParseFunction(key, serializationObject._connectionValues, result._configuration.scene);\r\n            result._connectionValues[key] = value;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { Node } from \"../node\";\r\n\r\n/**\r\n * @internal\r\n * Returns if mesh1 is a descendant of mesh2\r\n * @param mesh1\r\n * @param mesh2\r\n * @returns\r\n */\r\nexport function _isADescendantOf(mesh1: Node, mesh2: Node): boolean {\r\n    return !!(mesh1.parent && (mesh1.parent === mesh2 || _isADescendantOf(mesh1.parent, mesh2)));\r\n}\r\n", "import { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport { PointerEventTypes } from \"../../../Events/pointerEvents\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { _isADescendantOf } from \"../../utils\";\r\nimport type { IPathToObjectConverter } from \"../../../ObjectModel/objectModelInterfaces\";\r\nimport type { IObjectAccessor } from \"../../typeDefinitions\";\r\n/**\r\n * @experimental\r\n */\r\nexport interface IFlowGraphMeshPickEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The path of the mesh to pick.\r\n     */\r\n    path: string;\r\n    /**\r\n     * The path converter to use to convert the path to an object accessor.\r\n     */\r\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\r\n}\r\n/**\r\n * @experimental\r\n * A block that activates when a mesh is picked.\r\n */\r\nexport class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphMeshPickEventBlockConfiguration\r\n    ) {\r\n        super(config);\r\n    }\r\n\r\n    public _getReferencedMesh(): AbstractMesh {\r\n        const iAccessor = this.config.pathConverter.convert(this.config.path);\r\n\r\n        const mesh = iAccessor.info.getObject(iAccessor.object) as AbstractMesh;\r\n        if (!mesh || !(mesh instanceof AbstractMesh)) {\r\n            throw new Error(\"Mesh pick event block requires a valid mesh\");\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        let pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        if (!pickObserver) {\r\n            const mesh = this._getReferencedMesh();\r\n            context._setExecutionVariable(this, \"mesh\", mesh);\r\n            pickObserver = mesh.getScene().onPointerObservable.add((pointerInfo) => {\r\n                if (\r\n                    pointerInfo.type === PointerEventTypes.POINTERPICK &&\r\n                    pointerInfo.pickInfo?.pickedMesh &&\r\n                    (pointerInfo.pickInfo?.pickedMesh === mesh || _isADescendantOf(pointerInfo.pickInfo?.pickedMesh, mesh))\r\n                ) {\r\n                    this._execute(context);\r\n                }\r\n            });\r\n            const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);\r\n            context._setExecutionVariable(this, \"meshPickObserver\", pickObserver);\r\n            context._setExecutionVariable(this, \"meshDisposeObserver\", disposeObserver);\r\n        }\r\n    }\r\n\r\n    public _onDispose(context: FlowGraphContext) {\r\n        this._cancelPendingTasks(context);\r\n        context._removePendingBlock(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const mesh = context._getExecutionVariable(this, \"mesh\");\r\n        const pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        const disposeObserver = context._getExecutionVariable(this, \"meshDisposeObserver\");\r\n\r\n        mesh.getScene().onPointerObservable.remove(pickObserver);\r\n        mesh.onDisposeObservable.remove(disposeObserver);\r\n\r\n        context._deleteExecutionVariable(this, \"mesh\");\r\n        context._deleteExecutionVariable(this, \"meshPickObserver\");\r\n        context._deleteExecutionVariable(this, \"meshDisposeObserver\");\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphMeshPickEventBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Serializes the block to a JSON object.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.path = this.config.path;\r\n    }\r\n\r\n    /**\r\n     * Class name of the block.\r\n     */\r\n    public static ClassName = \"FGMeshPickEventBlock\";\r\n}\r\nRegisterClass(FlowGraphMeshPickEventBlock.ClassName, FlowGraphMeshPickEventBlock);\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { FlowGraphEventBlock } from \"./flowGraphEventBlock\";\r\nimport { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport type { FlowGraphCoordinator } from \"./flowGraphCoordinator\";\r\nimport type { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\r\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { ISerializedFlowGraph, IObjectAccessor } from \"./typeDefinitions\";\r\nimport { FlowGraphMeshPickEventBlock } from \"./Blocks/Event/flowGraphMeshPickEventBlock\";\r\nimport { _isADescendantOf } from \"./utils\";\r\nimport type { IPathToObjectConverter } from \"../ObjectModel/objectModelInterfaces\";\r\nimport { defaultValueParseFunction } from \"./serialization\";\r\n\r\nexport enum FlowGraphState {\r\n    /**\r\n     * The graph is stopped\r\n     */\r\n    Stopped,\r\n    /**\r\n     * The graph is running\r\n     */\r\n    Started,\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Parameters used to create a flow graph.\r\n */\r\nexport interface IFlowGraphParams {\r\n    /**\r\n     * The scene that the flow graph belongs to.\r\n     */\r\n    scene: Scene;\r\n    /**\r\n     * The event coordinator used by the flow graph.\r\n     */\r\n    coordinator: FlowGraphCoordinator;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Options for parsing a flow graph.\r\n */\r\nexport interface IFlowGraphParseOptions {\r\n    /**\r\n     * A function that parses complex values in a scene.\r\n     * @param key the key of the value\r\n     * @param serializationObject the object to read the value from\r\n     * @param scene the scene to read the value from\r\n     */\r\n    valueParseFunction?: (key: string, serializationObject: any, scene: Scene) => any;\r\n    /**\r\n     * The flow graph coordinator.\r\n     */\r\n    coordinator: FlowGraphCoordinator;\r\n    /**\r\n     * A function that converts a path to an object accessor.\r\n     */\r\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\r\n}\r\n/**\r\n * @experimental\r\n * Class used to represent a flow graph.\r\n * A flow graph is a graph of blocks that can be used to create complex logic.\r\n * Blocks can be added to the graph and connected to each other.\r\n * The graph can then be started, which will init and start all of its event blocks.\r\n */\r\nexport class FlowGraph {\r\n    /** @internal */\r\n    public _eventBlocks: FlowGraphEventBlock[] = [];\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public readonly _scene: Scene;\r\n    private _coordinator: FlowGraphCoordinator;\r\n    private _executionContexts: FlowGraphContext[] = [];\r\n\r\n    /**\r\n     * The state of the graph\r\n     */\r\n    state: FlowGraphState = FlowGraphState.Stopped;\r\n\r\n    /**\r\n     * Construct a Flow Graph\r\n     * @param params construction parameters. currently only the scene\r\n     */\r\n    public constructor(params: IFlowGraphParams) {\r\n        this._scene = params.scene;\r\n        this._coordinator = params.coordinator;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => this.dispose());\r\n    }\r\n\r\n    /**\r\n     * Create a context. A context represents one self contained execution for the graph, with its own variables.\r\n     * @returns the context, where you can get and set variables\r\n     */\r\n    public createContext() {\r\n        const context = new FlowGraphContext({ scene: this._scene, coordinator: this._coordinator });\r\n        this._executionContexts.push(context);\r\n        return context;\r\n    }\r\n\r\n    /**\r\n     * Returns the execution context at a given index\r\n     * @param index the index of the context\r\n     * @returns the execution context at that index\r\n     */\r\n    public getContext(index: number) {\r\n        return this._executionContexts[index];\r\n    }\r\n\r\n    /**\r\n     * Add an event block. When the graph is started, it will start listening to events\r\n     * from the block and execute the graph when they are triggered.\r\n     * @param block the event block to be added\r\n     */\r\n    public addEventBlock(block: FlowGraphEventBlock): void {\r\n        this._eventBlocks.push(block);\r\n    }\r\n\r\n    /**\r\n     * Starts the flow graph. Initializes the event blocks and starts listening to events.\r\n     */\r\n    public start() {\r\n        if (this.state === FlowGraphState.Started) {\r\n            return;\r\n        }\r\n        this.state = FlowGraphState.Started;\r\n        if (this._executionContexts.length === 0) {\r\n            this.createContext();\r\n        }\r\n        for (const context of this._executionContexts) {\r\n            const contextualOrder = this._getContextualOrder();\r\n            for (const block of contextualOrder) {\r\n                block._startPendingTasks(context);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getContextualOrder(): FlowGraphEventBlock[] {\r\n        const order: FlowGraphEventBlock[] = [];\r\n\r\n        for (const block1 of this._eventBlocks) {\r\n            // If the block is a mesh pick, guarantee that picks of children meshes come before picks of parent meshes\r\n            if (block1.getClassName() === FlowGraphMeshPickEventBlock.ClassName) {\r\n                const mesh1 = (block1 as FlowGraphMeshPickEventBlock)._getReferencedMesh();\r\n                let i = 0;\r\n                for (; i < order.length; i++) {\r\n                    const block2 = order[i];\r\n                    const mesh2 = (block2 as FlowGraphMeshPickEventBlock)._getReferencedMesh();\r\n                    if (mesh1 && mesh2 && _isADescendantOf(mesh1, mesh2)) {\r\n                        break;\r\n                    }\r\n                }\r\n                order.splice(i, 0, block1);\r\n            } else {\r\n                order.push(block1);\r\n            }\r\n        }\r\n        return order;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the flow graph. Cancels any pending tasks and removes all event listeners.\r\n     */\r\n    public dispose() {\r\n        if (this.state === FlowGraphState.Stopped) {\r\n            return;\r\n        }\r\n        this.state = FlowGraphState.Stopped;\r\n        for (const context of this._executionContexts) {\r\n            context._clearPendingBlocks();\r\n        }\r\n        this._executionContexts.length = 0;\r\n        this._eventBlocks.length = 0;\r\n        this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n        this._sceneDisposeObserver = null;\r\n    }\r\n\r\n    /**\r\n     * Executes a function in all blocks of a flow graph, starting with the event blocks.\r\n     * @param visitor the function to execute.\r\n     */\r\n    public visitAllBlocks(visitor: (block: FlowGraphBlock) => void) {\r\n        const visitList: FlowGraphBlock[] = [];\r\n        const idsAddedToVisitList = new Set<string>();\r\n        for (const block of this._eventBlocks) {\r\n            visitList.push(block);\r\n            idsAddedToVisitList.add(block.uniqueId);\r\n        }\r\n\r\n        while (visitList.length > 0) {\r\n            const block = visitList.pop()!;\r\n            visitor(block);\r\n\r\n            for (const dataIn of block.dataInputs) {\r\n                for (const connection of dataIn._connectedPoint) {\r\n                    if (!idsAddedToVisitList.has(connection._ownerBlock.uniqueId)) {\r\n                        visitList.push(connection._ownerBlock);\r\n                        idsAddedToVisitList.add(connection._ownerBlock.uniqueId);\r\n                    }\r\n                }\r\n            }\r\n            if (block instanceof FlowGraphExecutionBlock) {\r\n                for (const signalOut of block.signalOutputs) {\r\n                    for (const connection of signalOut._connectedPoint) {\r\n                        if (!idsAddedToVisitList.has(connection._ownerBlock.uniqueId)) {\r\n                            visitList.push(connection._ownerBlock);\r\n                            idsAddedToVisitList.add(connection._ownerBlock.uniqueId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes a graph\r\n     * @param serializationObject the object to write the values in\r\n     * @param valueSerializeFunction a function to serialize complex values\r\n     */\r\n    public serialize(serializationObject: any = {}, valueSerializeFunction?: (key: string, value: any, serializationObject: any) => void) {\r\n        serializationObject.allBlocks = [];\r\n        this.visitAllBlocks((block) => {\r\n            const serializedBlock: any = {};\r\n            block.serialize(serializedBlock);\r\n            serializationObject.allBlocks.push(serializedBlock);\r\n        });\r\n        serializationObject.executionContexts = [];\r\n        for (const context of this._executionContexts) {\r\n            const serializedContext: any = {};\r\n            context.serialize(serializedContext, valueSerializeFunction);\r\n            serializationObject.executionContexts.push(serializedContext);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a list of blocks, find an output data connection that has a specific unique id\r\n     * @param blocks a list of flow graph blocks\r\n     * @param uniqueId the unique id of a connection\r\n     * @returns the connection that has this unique id. throws an error if none was found\r\n     */\r\n    public static GetDataOutConnectionByUniqueId(blocks: FlowGraphBlock[], uniqueId: string): FlowGraphDataConnection<any> {\r\n        for (const block of blocks) {\r\n            for (const dataOut of block.dataOutputs) {\r\n                if (dataOut.uniqueId === uniqueId) {\r\n                    return dataOut;\r\n                }\r\n            }\r\n        }\r\n        throw new Error(\"Could not find data out connection with unique id \" + uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Given a list of blocks, find an input signal connection that has a specific unique id\r\n     * @param blocks a list of flow graph blocks\r\n     * @param uniqueId the unique id of a connection\r\n     * @returns the connection that has this unique id. throws an error if none was found\r\n     */\r\n    public static GetSignalInConnectionByUniqueId(blocks: FlowGraphBlock[], uniqueId: string): FlowGraphSignalConnection {\r\n        for (const block of blocks) {\r\n            if (block instanceof FlowGraphExecutionBlock) {\r\n                for (const signalIn of block.signalInputs) {\r\n                    if (signalIn.uniqueId === uniqueId) {\r\n                        return signalIn;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        throw new Error(\"Could not find signal in connection with unique id \" + uniqueId);\r\n    }\r\n\r\n    /**\r\n     * Parses a graph from a given serialization object\r\n     * @param serializationObject the object where the values are written\r\n     * @param options options for parsing the graph\r\n     * @returns the parsed graph\r\n     */\r\n    public static Parse(serializationObject: ISerializedFlowGraph, options: IFlowGraphParseOptions): FlowGraph {\r\n        const graph = options.coordinator.createGraph();\r\n        const blocks: FlowGraphBlock[] = [];\r\n        const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\r\n        // Parse all blocks\r\n        for (const serializedBlock of serializationObject.allBlocks) {\r\n            const block = FlowGraphBlock.Parse(serializedBlock, { scene: options.coordinator.config.scene, pathConverter: options.pathConverter, valueParseFunction });\r\n            blocks.push(block);\r\n            if (block instanceof FlowGraphEventBlock) {\r\n                graph.addEventBlock(block);\r\n            }\r\n        }\r\n        // After parsing all blocks, connect them\r\n        for (const block of blocks) {\r\n            for (const dataIn of block.dataInputs) {\r\n                for (const serializedConnection of dataIn.connectedPointIds) {\r\n                    const connection = FlowGraph.GetDataOutConnectionByUniqueId(blocks, serializedConnection);\r\n                    dataIn.connectTo(connection);\r\n                }\r\n            }\r\n            if (block instanceof FlowGraphExecutionBlock) {\r\n                for (const signalOut of block.signalOutputs) {\r\n                    for (const serializedConnection of signalOut.connectedPointIds) {\r\n                        const connection = FlowGraph.GetSignalInConnectionByUniqueId(blocks, serializedConnection);\r\n                        signalOut.connectTo(connection);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (const serializedContext of serializationObject.executionContexts) {\r\n            FlowGraphContext.Parse(serializedContext, { graph, valueParseFunction });\r\n        }\r\n        return graph;\r\n    }\r\n}\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Scene } from \"../scene\";\r\nimport { FlowGraph } from \"./flowGraph\";\r\nimport type { IPathToObjectConverter } from \"../ObjectModel/objectModelInterfaces\";\r\nimport { defaultValueParseFunction } from \"./serialization\";\r\nimport type { IObjectAccessor } from \"./typeDefinitions\";\r\n\r\n/**\r\n * @experimental\r\n * Parameters used to create a flow graph engine.\r\n */\r\nexport interface IFlowGraphCoordinatorConfiguration {\r\n    /**\r\n     * The scene that the flow graph engine belongs to.\r\n     */\r\n    scene: Scene;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Parameters used to parse a flow graph coordinator.\r\n */\r\nexport interface FlowGraphCoordinatorParseOptions {\r\n    /**\r\n     * A function that will be called to parse the value of a property.\r\n     * @param key the key of the property\r\n     * @param serializationObject the serialization object where the property is located\r\n     * @param scene the scene that the block is being parsed in\r\n     */\r\n    valueParseFunction?: (key: string, serializationObject: any, scene: Scene) => any;\r\n    /**\r\n     * The path converter to use to convert the path to an object accessor.\r\n     */\r\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\r\n    /**\r\n     * The scene that the flow graph coordinator belongs to.\r\n     */\r\n    scene: Scene;\r\n}\r\n/**\r\n * This class holds all of the existing flow graphs and is responsible for creating new ones.\r\n * It also handles starting/stopping multiple graphs and communication between them through an Event Coordinator\r\n */\r\nexport class FlowGraphCoordinator {\r\n    /**\r\n     * @internal\r\n     * A list of all the coordinators per scene. Will be used by the inspector\r\n     */\r\n    public static readonly SceneCoordinators: Map<Scene, FlowGraphCoordinator[]> = new Map();\r\n\r\n    private readonly _flowGraphs: FlowGraph[] = [];\r\n\r\n    private _customEventsMap: Map<string, Observable<any>> = new Map();\r\n\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphCoordinatorConfiguration\r\n    ) {\r\n        // When the scene is disposed, dispose all graphs currently running on it.\r\n        this.config.scene.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        // Add itself to the SceneCoordinators list for the Inspector.\r\n        const coordinators = FlowGraphCoordinator.SceneCoordinators.get(this.config.scene) ?? [];\r\n        coordinators.push(this);\r\n    }\r\n\r\n    /**\r\n     * Creates a new flow graph and adds it to the list of existing flow graphs\r\n     * @returns a new flow graph\r\n     */\r\n    public createGraph(): FlowGraph {\r\n        const graph = new FlowGraph({ scene: this.config.scene, coordinator: this });\r\n        this._flowGraphs.push(graph);\r\n        return graph;\r\n    }\r\n\r\n    /**\r\n     * Removes a flow graph from the list of existing flow graphs and disposes it\r\n     * @param graph the graph to remove\r\n     */\r\n    public removeGraph(graph: FlowGraph) {\r\n        const index = this._flowGraphs.indexOf(graph);\r\n        if (index !== -1) {\r\n            graph.dispose();\r\n            this._flowGraphs.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts all graphs\r\n     */\r\n    public start() {\r\n        this._flowGraphs.forEach((graph) => graph.start());\r\n    }\r\n\r\n    /**\r\n     * Disposes all graphs\r\n     */\r\n    public dispose() {\r\n        this._flowGraphs.forEach((graph) => graph.dispose());\r\n        this._flowGraphs.length = 0;\r\n\r\n        // Remove itself from the SceneCoordinators list for the Inspector.\r\n        const coordinators = FlowGraphCoordinator.SceneCoordinators.get(this.config.scene) ?? [];\r\n        const index = coordinators.indexOf(this);\r\n        if (index !== -1) {\r\n            coordinators.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this coordinator to a JSON object.\r\n     * @param serializationObject the object to serialize to\r\n     * @param valueSerializeFunction the function to use to serialize the value\r\n     */\r\n    public serialize(serializationObject: any, valueSerializeFunction?: (key: string, value: any, serializationObject: any) => void) {\r\n        serializationObject._flowGraphs = [];\r\n        this._flowGraphs.forEach((graph) => {\r\n            const serializedGraph = {};\r\n            graph.serialize(serializedGraph, valueSerializeFunction);\r\n            serializationObject._flowGraphs.push(serializedGraph);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized coordinator.\r\n     * @param serializedObject the object to parse\r\n     * @param options the options to use when parsing\r\n     * @returns the parsed coordinator\r\n     */\r\n    public static Parse(serializedObject: any, options: FlowGraphCoordinatorParseOptions) {\r\n        const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\r\n        const coordinator = new FlowGraphCoordinator({ scene: options.scene });\r\n        serializedObject._flowGraphs?.forEach((serializedGraph: any) => {\r\n            FlowGraph.Parse(serializedGraph, { coordinator, valueParseFunction, pathConverter: options.pathConverter });\r\n        });\r\n        return coordinator;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of flow graphs\r\n     */\r\n    public get flowGraphs() {\r\n        return this._flowGraphs;\r\n    }\r\n\r\n    /**\r\n     * Get an observable that will be notified when the event with the given id is fired.\r\n     * @param id the id of the event\r\n     * @returns the observable for the event\r\n     */\r\n    public getCustomEventObservable(id: string): Observable<any> {\r\n        let observable = this._customEventsMap.get(id);\r\n        if (!observable) {\r\n            observable = new Observable<any>();\r\n            this._customEventsMap.set(id, observable);\r\n        }\r\n        return observable;\r\n    }\r\n\r\n    /**\r\n     * Notifies the observable for the given event id with the given data.\r\n     * @param id the id of the event\r\n     * @param data the data to send with the event\r\n     */\r\n    public notifyCustomEvent(id: string, data: any) {\r\n        const observable = this._customEventsMap.get(id);\r\n        if (observable) {\r\n            observable.notifyObservers(data);\r\n        }\r\n    }\r\n}\r\n", "import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Block that triggers when a scene is ready.\r\n */\r\nexport class FlowGraphSceneReadyEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        if (!context._getExecutionVariable(this, \"sceneReadyObserver\")) {\r\n            const scene = context.configuration.scene;\r\n            const contextObserver = scene.onReadyObservable.add(() => {\r\n                this._execute(context);\r\n            });\r\n            context._setExecutionVariable(this, \"sceneReadyObserver\", contextObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext) {\r\n        const contextObserver = context._getExecutionVariable(this, \"sceneReadyObserver\");\r\n        const scene = context.configuration.scene;\r\n        scene.onReadyObservable.remove(contextObserver);\r\n        context._deleteExecutionVariable(this, \"sceneReadyObserver\");\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName() {\r\n        return FlowGraphSceneReadyEventBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSceneReadyEventBlock\";\r\n}\r\nRegisterClass(\"FGSceneReadyEventBlock\", FlowGraphSceneReadyEventBlock);\r\n", "import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Block that triggers on scene tick (before each render).\r\n */\r\nexport class FlowGraphSceneTickEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        if (!context._getExecutionVariable(this, \"sceneBeforeRender\")) {\r\n            const scene = context.configuration.scene;\r\n            const contextObserver = scene.onBeforeRenderObservable.add(() => {\r\n                this._execute(context);\r\n            });\r\n            context._setExecutionVariable(this, \"sceneBeforeRender\", contextObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext) {\r\n        const contextObserver = context._getExecutionVariable(this, \"sceneBeforeRender\");\r\n        const scene = context.configuration.scene;\r\n        scene.onBeforeRenderObservable.remove(contextObserver);\r\n        context._deleteExecutionVariable(this, \"sceneBeforeRender\");\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphSceneTickEventBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSceneTickEventBlock\";\r\n}\r\nRegisterClass(FlowGraphSceneTickEventBlock.ClassName, FlowGraphSceneTickEventBlock);\r\n", "import type { IFlowGraphBlockConfiguration } from \"./flowGraphBlock\";\r\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\r\n\r\n/**\r\n * @experimental\r\n * An execution block that has an out signal. This signal is triggered when the synchronous execution of this block is done.\r\n * Most execution blocks will inherit from this, except for the ones that have multiple signals to be triggered.\r\n * (such as if blocks)\r\n */\r\nexport abstract class FlowGraphExecutionBlockWithOutSignal extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Output connection: The signal that is triggered when the execution of this block is done.\r\n     */\r\n    public readonly out: FlowGraphSignalConnection;\r\n\r\n    protected constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.out = this._registerSignalOutput(\"out\");\r\n    }\r\n}\r\n", "import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\n/**\r\n * @experimental\r\n * Block that logs a message to the console.\r\n */\r\nexport class FlowGraphConsoleLogBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The message to log.\r\n     */\r\n    public readonly message: FlowGraphDataConnection<any>;\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.message = this.registerDataInput(\"message\", RichTypeAny);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        const messageValue = this.message.getValue(context);\r\n        Logger.Log(messageValue);\r\n        // activate the output flow block\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphConsoleLogBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGConsoleLogBlock\";\r\n}\r\nRegisterClass(FlowGraphConsoleLogBlock.ClassName, FlowGraphConsoleLogBlock);\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable } from \"../scene\";\r\n\r\n/**\r\n * Construction options for a timer\r\n */\r\nexport interface ITimerOptions<T> {\r\n    /**\r\n     * Time-to-end\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * The context observable is used to calculate time deltas and provides the context of the timer's callbacks. Will usually be OnBeforeRenderObservable.\r\n     * Countdown calculation is done ONLY when the observable is notifying its observers, meaning that if\r\n     * you choose an observable that doesn't trigger too often, the wait time might extend further than the requested max time\r\n     */\r\n    contextObservable: Observable<T>;\r\n    /**\r\n     * Optional parameters when adding an observer to the observable\r\n     */\r\n    observableParameters?: {\r\n        mask?: number;\r\n        insertFirst?: boolean;\r\n        scope?: any;\r\n    };\r\n    /**\r\n     * An optional break condition that will stop the times prematurely. In this case onEnded will not be triggered!\r\n     */\r\n    breakCondition?: (data?: ITimerData<T>) => boolean;\r\n    /**\r\n     * Will be triggered when the time condition has met\r\n     */\r\n    onEnded?: (data: ITimerData<any>) => void;\r\n    /**\r\n     * Will be triggered when the break condition has met (prematurely ended)\r\n     */\r\n    onAborted?: (data: ITimerData<any>) => void;\r\n    /**\r\n     * Optional function to execute on each tick (or count)\r\n     */\r\n    onTick?: (data: ITimerData<any>) => void;\r\n}\r\n\r\n/**\r\n * An interface defining the data sent by the timer\r\n */\r\nexport interface ITimerData<T> {\r\n    /**\r\n     * When did it start\r\n     */\r\n    startTime: number;\r\n    /**\r\n     * Time now\r\n     */\r\n    currentTime: number;\r\n    /**\r\n     * Time passed since started\r\n     */\r\n    deltaTime: number;\r\n    /**\r\n     * How much is completed, in [0.0...1.0].\r\n     * Note that this CAN be higher than 1 due to the fact that we don't actually measure time but delta between observable calls\r\n     */\r\n    completeRate: number;\r\n    /**\r\n     * What the registered observable sent in the last count\r\n     */\r\n    payload: T;\r\n}\r\n\r\n/**\r\n * The current state of the timer\r\n */\r\nexport enum TimerState {\r\n    /**\r\n     * Timer initialized, not yet started\r\n     */\r\n    INIT,\r\n    /**\r\n     * Timer started and counting\r\n     */\r\n    STARTED,\r\n    /**\r\n     * Timer ended (whether aborted or time reached)\r\n     */\r\n    ENDED,\r\n}\r\n\r\n/**\r\n * A simple version of the timer. Will take options and start the timer immediately after calling it\r\n *\r\n * @param options options with which to initialize this timer\r\n * @returns an observer that can be used to stop the timer\r\n */\r\nexport function setAndStartTimer<T = any>(options: ITimerOptions<T>): Nullable<Observer<T>> {\r\n    let timer = 0;\r\n    const startTime = Date.now();\r\n    options.observableParameters = options.observableParameters ?? {};\r\n    const observer = options.contextObservable.add(\r\n        (payload: any) => {\r\n            const now = Date.now();\r\n            timer = now - startTime;\r\n            const data: ITimerData<any> = {\r\n                startTime,\r\n                currentTime: now,\r\n                deltaTime: timer,\r\n                completeRate: timer / options.timeout,\r\n                payload,\r\n            };\r\n            options.onTick && options.onTick(data);\r\n            if (options.breakCondition && options.breakCondition()) {\r\n                options.contextObservable.remove(observer);\r\n                options.onAborted && options.onAborted(data);\r\n            }\r\n            if (timer >= options.timeout) {\r\n                options.contextObservable.remove(observer);\r\n                options.onEnded && options.onEnded(data);\r\n            }\r\n        },\r\n        options.observableParameters.mask,\r\n        options.observableParameters.insertFirst,\r\n        options.observableParameters.scope\r\n    );\r\n    return observer;\r\n}\r\n\r\n/**\r\n * An advanced implementation of a timer class\r\n */\r\nexport class AdvancedTimer<T = any> implements IDisposable {\r\n    /**\r\n     * Will notify each time the timer calculates the remaining time\r\n     */\r\n    public onEachCountObservable: Observable<ITimerData<T>> = new Observable();\r\n    /**\r\n     * Will trigger when the timer was aborted due to the break condition\r\n     */\r\n    public onTimerAbortedObservable: Observable<ITimerData<T>> = new Observable();\r\n    /**\r\n     * Will trigger when the timer ended successfully\r\n     */\r\n    public onTimerEndedObservable: Observable<ITimerData<T>> = new Observable();\r\n    /**\r\n     * Will trigger when the timer state has changed\r\n     */\r\n    public onStateChangedObservable: Observable<TimerState> = new Observable();\r\n\r\n    private _observer: Nullable<Observer<T>> = null;\r\n    private _contextObservable: Observable<T>;\r\n    private _observableParameters: {\r\n        mask?: number;\r\n        insertFirst?: boolean;\r\n        scope?: any;\r\n    };\r\n    private _startTime: number;\r\n    private _timer: number;\r\n    private _state: TimerState;\r\n    private _breakCondition: (data: ITimerData<T>) => boolean;\r\n    private _timeToEnd: number;\r\n    private _breakOnNextTick: boolean = false;\r\n\r\n    /**\r\n     * Will construct a new advanced timer based on the options provided. Timer will not start until start() is called.\r\n     * @param options construction options for this advanced timer\r\n     */\r\n    constructor(options: ITimerOptions<T>) {\r\n        this._setState(TimerState.INIT);\r\n        this._contextObservable = options.contextObservable;\r\n        this._observableParameters = options.observableParameters ?? {};\r\n        this._breakCondition = options.breakCondition ?? (() => false);\r\n        this._timeToEnd = options.timeout;\r\n        if (options.onEnded) {\r\n            this.onTimerEndedObservable.add(options.onEnded);\r\n        }\r\n        if (options.onTick) {\r\n            this.onEachCountObservable.add(options.onTick);\r\n        }\r\n        if (options.onAborted) {\r\n            this.onTimerAbortedObservable.add(options.onAborted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set a breaking condition for this timer. Default is to never break during count\r\n     * @param predicate the new break condition. Returns true to break, false otherwise\r\n     */\r\n    public set breakCondition(predicate: (data: ITimerData<T>) => boolean) {\r\n        this._breakCondition = predicate;\r\n    }\r\n\r\n    /**\r\n     * Reset ALL associated observables in this advanced timer\r\n     */\r\n    public clearObservables() {\r\n        this.onEachCountObservable.clear();\r\n        this.onTimerAbortedObservable.clear();\r\n        this.onTimerEndedObservable.clear();\r\n        this.onStateChangedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Will start a new iteration of this timer. Only one instance of this timer can run at a time.\r\n     *\r\n     * @param timeToEnd how much time to measure until timer ended\r\n     */\r\n    public start(timeToEnd: number = this._timeToEnd) {\r\n        if (this._state === TimerState.STARTED) {\r\n            throw new Error(\"Timer already started. Please stop it before starting again\");\r\n        }\r\n        this._timeToEnd = timeToEnd;\r\n        this._startTime = Date.now();\r\n        this._timer = 0;\r\n        this._observer = this._contextObservable.add(this._tick, this._observableParameters.mask, this._observableParameters.insertFirst, this._observableParameters.scope);\r\n        this._setState(TimerState.STARTED);\r\n    }\r\n\r\n    /**\r\n     * Will force a stop on the next tick.\r\n     */\r\n    public stop() {\r\n        if (this._state !== TimerState.STARTED) {\r\n            return;\r\n        }\r\n        this._breakOnNextTick = true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this timer, clearing all resources\r\n     */\r\n    public dispose() {\r\n        if (this._observer) {\r\n            this._contextObservable.remove(this._observer);\r\n        }\r\n        this.clearObservables();\r\n    }\r\n\r\n    private _setState(newState: TimerState) {\r\n        this._state = newState;\r\n        this.onStateChangedObservable.notifyObservers(this._state);\r\n    }\r\n\r\n    private _tick = (payload: T) => {\r\n        const now = Date.now();\r\n        this._timer = now - this._startTime;\r\n        const data: ITimerData<T> = {\r\n            startTime: this._startTime,\r\n            currentTime: now,\r\n            deltaTime: this._timer,\r\n            completeRate: this._timer / this._timeToEnd,\r\n            payload,\r\n        };\r\n        const shouldBreak = this._breakOnNextTick || this._breakCondition(data);\r\n        if (shouldBreak || this._timer >= this._timeToEnd) {\r\n            this._stop(data, shouldBreak);\r\n        } else {\r\n            this.onEachCountObservable.notifyObservers(data);\r\n        }\r\n    };\r\n\r\n    private _stop(data: ITimerData<T>, aborted: boolean = false) {\r\n        this._contextObservable.remove(this._observer);\r\n        this._setState(TimerState.ENDED);\r\n        if (aborted) {\r\n            this.onTimerAbortedObservable.notifyObservers(data);\r\n        } else {\r\n            this.onTimerEndedObservable.notifyObservers(data);\r\n        }\r\n    }\r\n}\r\n", "import type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { AdvancedTimer } from \"../../../../Misc/timer\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { FlowGraphAsyncExecutionBlock } from \"../../../flowGraphAsyncExecutionBlock\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { Tools } from \"../../../../Misc/tools\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Block that provides two different output flows. One is started immediately once the block is executed,\r\n * and the other is executed after a set time. The timer for this block runs based on the scene's render loop.\r\n */\r\nexport class FlowGraphTimerBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * Input connection: The timeout of the timer.\r\n     */\r\n    public readonly timeout: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.timeout = this.registerDataInput(\"timeout\", RichTypeNumber);\r\n    }\r\n\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        const currentTimeout = this.timeout.getValue(context);\r\n\r\n        if (currentTimeout !== undefined && currentTimeout >= 0) {\r\n            const timers = context._getExecutionVariable(this, \"runningTimers\") || [];\r\n            const scene = context.configuration.scene;\r\n            const timer: AdvancedTimer = new AdvancedTimer({\r\n                timeout: currentTimeout,\r\n                contextObservable: scene.onBeforeRenderObservable,\r\n                onEnded: () => this._onEnded(timer, context),\r\n            });\r\n            timer.start();\r\n\r\n            timers.push(timer);\r\n            context._setExecutionVariable(this, \"runningTimers\", timers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext) {\r\n        this._startPendingTasks(context);\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    private _onEnded(timer: AdvancedTimer, context: FlowGraphContext) {\r\n        const timers = context._getExecutionVariable(this, \"runningTimers\") || [];\r\n        const index = timers.indexOf(timer);\r\n        if (index !== -1) {\r\n            timers.splice(index, 1);\r\n        } else {\r\n            Tools.Warn(\"FlowGraphTimerBlock: Timer ended but was not found in the running timers list\");\r\n        }\r\n        context._removePendingBlock(this);\r\n        this.done._activateSignal(context);\r\n    }\r\n\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const timers = context._getExecutionVariable(this, \"runningTimers\") || [];\r\n        for (const timer of timers) {\r\n            timer.dispose();\r\n        }\r\n        context._deleteExecutionVariable(this, \"runningTimers\");\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphTimerBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGTimerBlock\";\r\n}\r\nRegisterClass(\"FGTimerBlock\", FlowGraphTimerBlock);\r\n", "import { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Parameters used to create a FlowGraphSendCustomEventBlock.\r\n */\r\nexport interface IFlowGraphSendCustomEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The id of the event to send.\r\n     */\r\n    eventId: string;\r\n    /**\r\n     * The names of the data inputs for that event.\r\n     */\r\n    eventData: string[];\r\n}\r\n/**\r\n * @experimental\r\n */\r\nexport class FlowGraphSendCustomEventBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphSendCustomEventBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        for (let i = 0; i < this.config.eventData.length; i++) {\r\n            const dataName = this.config.eventData[i];\r\n            this.registerDataInput(dataName, RichTypeAny);\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const eventId = this.config.eventId;\r\n        const eventDatas = this.dataInputs.map((port) => port.getValue(context));\r\n\r\n        context.configuration.coordinator.notifyCustomEvent(eventId, eventDatas);\r\n\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphSendCustomEventBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSendCustomEventBlock\";\r\n}\r\nRegisterClass(\"FGSendCustomEventBlock\", FlowGraphSendCustomEventBlock);\r\n", "import type { Observer } from \"../../../Misc/observable\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Tools } from \"../../../Misc/tools\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Parameters used to create a FlowGraphReceiveCustomEventBlock.\r\n */\r\nexport interface IFlowGraphReceiveCustomEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The id of the event to receive.\r\n     */\r\n    eventId: string;\r\n    /**\r\n     * The names of the data outputs for that event. Should be in the same order as the event data in\r\n     * SendCustomEvent\r\n     */\r\n    eventData: string[];\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that receives a custom event. It saves the data sent in the eventData output.\r\n */\r\nexport class FlowGraphReceiveCustomEventBlock extends FlowGraphEventBlock {\r\n    private _eventObserver: Nullable<Observer<any>>;\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphReceiveCustomEventBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        for (let i = 0; i < this.config.eventData.length; i++) {\r\n            const dataName = this.config.eventData[i];\r\n            this.registerDataOutput(dataName, RichTypeAny);\r\n        }\r\n    }\r\n\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        const observable = context.configuration.coordinator.getCustomEventObservable(this.config.eventId);\r\n        this._eventObserver = observable.add((eventDatas: any[]) => {\r\n            for (let i = 0; i < eventDatas.length; i++) {\r\n                this.dataOutputs[i].setValue(eventDatas[i], context);\r\n            }\r\n            this._execute(context);\r\n        });\r\n    }\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const observable = context.configuration.coordinator.getCustomEventObservable(this.config.eventId);\r\n        if (observable) {\r\n            observable.remove(this._eventObserver);\r\n        } else {\r\n            Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphReceiveCustomEventBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGReceiveCustomEventBlock\";\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.eventId = this.config.eventId;\r\n        serializationObject.eventData = this.config.eventData;\r\n    }\r\n}\r\nRegisterClass(FlowGraphReceiveCustomEventBlock.ClassName, FlowGraphReceiveCustomEventBlock);\r\n", "import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\n\r\n/**\r\n * @experimental\r\n * Configuration for the sequence block.\r\n */\r\nexport interface IFlowGraphSequenceBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of output flows.\r\n     */\r\n    numberOutputFlows: number;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that executes its output flows in sequence.\r\n */\r\nexport class FlowGraphSequenceBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * The output flows.\r\n     */\r\n    public outFlows: FlowGraphSignalConnection[];\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphSequenceBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        this.outFlows = [];\r\n        for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n            this.outFlows.push(this._registerSignalOutput(`${i}`));\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext) {\r\n        for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n            this.outFlows[i]._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphSequenceBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSequenceBlock\";\r\n}\r\nRegisterClass(FlowGraphSequenceBlock.ClassName, FlowGraphSequenceBlock);\r\n", "import type { IObjectInfo, IPathToObjectConverter } from \"../ObjectModel/objectModelInterfaces\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { FlowGraphInteger } from \"./flowGraphInteger\";\r\nimport { RichTypeFlowGraphInteger } from \"./flowGraphRichTypes\";\r\nimport type { IObjectAccessor } from \"./typeDefinitions\";\r\n\r\nconst pathHasTemplatesRegex = new RegExp(/\\{(\\w+)\\}/g);\r\n\r\n/**\r\n * @experimental\r\n * A component that converts a path to an object accessor.\r\n */\r\nexport class FlowGraphPathConverterComponent {\r\n    /**\r\n     * The templated inputs for the provided path.\r\n     */\r\n    public readonly templatedInputs: FlowGraphDataConnection<FlowGraphInteger>[] = [];\r\n    public constructor(\r\n        public path: string,\r\n        public ownerBlock: FlowGraphBlock\r\n    ) {\r\n        let match = pathHasTemplatesRegex.exec(path);\r\n        while (match) {\r\n            const [, matchGroup] = match;\r\n            this.templatedInputs.push(ownerBlock.registerDataInput(matchGroup, RichTypeFlowGraphInteger));\r\n            match = pathHasTemplatesRegex.exec(path);\r\n        }\r\n    }\r\n\r\n    public getAccessor(pathConverter: IPathToObjectConverter<IObjectAccessor>, context: FlowGraphContext): IObjectInfo<IObjectAccessor> {\r\n        let finalPath = this.path;\r\n        for (const templatedInput of this.templatedInputs) {\r\n            const valueToReplace = templatedInput.getValue(context).value;\r\n            finalPath = finalPath.replace(`{${templatedInput.name}}`, valueToReplace.toString());\r\n        }\r\n        return pathConverter.convert(finalPath);\r\n    }\r\n}\r\n", "import { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { IPathToObjectConverter } from \"../../../ObjectModel/objectModelInterfaces\";\r\nimport { FlowGraphPathConverterComponent } from \"../../flowGraphPathConverterComponent\";\r\nimport type { IObjectAccessor } from \"../../typeDefinitions\";\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport interface IFlowGraphGetPropertyBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The complete path to the property that will be set\r\n     */\r\n    path: string;\r\n    /**\r\n     * The path converter to use to convert the path to an object accessor.\r\n     */\r\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\r\n}\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport class FlowGraphGetPropertyBlock extends FlowGraphBlock {\r\n    /**\r\n     * Output connection: The value of the property.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<any>;\r\n    /**\r\n     * The component with the templated inputs for the provided path.\r\n     */\r\n    public readonly templateComponent: FlowGraphPathConverterComponent;\r\n\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphGetPropertyBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\r\n        this.templateComponent = new FlowGraphPathConverterComponent(config.path, this);\r\n    }\r\n\r\n    public _updateOutputs(context: FlowGraphContext) {\r\n        const accessorContainer = this.templateComponent.getAccessor(this.config.pathConverter, context);\r\n        const value = accessorContainer.info.get(accessorContainer.object);\r\n        this.value.setValue(value, context);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphGetPropertyBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any = {}) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.path = this.config.path;\r\n    }\r\n\r\n    /**\r\n     * Class name of the block.\r\n     */\r\n    public static ClassName = \"FGGetPropertyBlock\";\r\n}\r\nRegisterClass(FlowGraphGetPropertyBlock.ClassName, FlowGraphGetPropertyBlock);\r\n", "import { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphPathConverterComponent } from \"../../flowGraphPathConverterComponent\";\r\nimport type { IPathToObjectConverter } from \"../../../ObjectModel/objectModelInterfaces\";\r\nimport type { IObjectAccessor } from \"../../typeDefinitions\";\r\n\r\n/**\r\n * @experimental\r\n * Configuration for the set property block.\r\n */\r\nexport interface IFlowGraphSetPropertyBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The path of the entity whose property will be set. Needs a corresponding\r\n     * entity on the context variables.\r\n     */\r\n    path: string;\r\n    /**\r\n     * The path converter to use to convert the path to an object accessor.\r\n     */\r\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Block that sets a property on a target object.\r\n */\r\nexport class FlowGraphSetPropertyBlock<ValueT> extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The value to set on the property.\r\n     */\r\n    public readonly a: FlowGraphDataConnection<ValueT>;\r\n    /**\r\n     * The component with the templated inputs for the provided path.\r\n     */\r\n    public readonly templateComponent: FlowGraphPathConverterComponent;\r\n\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphSetPropertyBlockConfiguration\r\n    ) {\r\n        super(config);\r\n\r\n        this.a = this.registerDataInput(\"a\", RichTypeAny);\r\n        this.templateComponent = new FlowGraphPathConverterComponent(config.path, this);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const value = this.a.getValue(context);\r\n        const accessor = this.templateComponent.getAccessor(this.config.pathConverter, context);\r\n        accessor.info.set(value, accessor.object);\r\n\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * Serializes the block to a JSON object.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public serialize(serializationObject: any = {}) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.path = this.config.path;\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphSetPropertyBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Class name of the block.\r\n     */\r\n    public static ClassName = \"FGSetPropertyBlock\";\r\n}\r\nRegisterClass(\"FGSetPropertyBlock\", FlowGraphSetPropertyBlock);\r\n", "import type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\n\r\nconst cacheName = \"cachedOperationValue\";\r\nconst cacheExecIdName = \"cachedExecutionId\";\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport abstract class FlowGraphCachedOperationBlock<OutputT> extends FlowGraphBlock {\r\n    /**\r\n     * The output of the operation\r\n     */\r\n    public readonly value: FlowGraphDataConnection<OutputT>;\r\n\r\n    constructor(outputRichType: RichType<OutputT>, config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.value = this.registerDataOutput(\"value\", outputRichType);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Operation to realize\r\n     * @param context the graph context\r\n     */\r\n    public abstract _doOperation(context: FlowGraphContext): OutputT;\r\n\r\n    public _updateOutputs(context: FlowGraphContext) {\r\n        const cachedExecutionId = context._getExecutionVariable(this, cacheExecIdName);\r\n        const cachedValue = context._getExecutionVariable(this, cacheName);\r\n        if (cachedValue !== undefined && cachedExecutionId === context.executionId) {\r\n            this.value.setValue(cachedValue, context);\r\n        } else {\r\n            const calculatedValue = this._doOperation(context);\r\n            context._setExecutionVariable(this, cacheName, calculatedValue);\r\n            context._setExecutionVariable(this, cacheExecIdName, context.executionId);\r\n            this.value.setValue(calculatedValue, context);\r\n        }\r\n    }\r\n}\r\n", "import type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\r\n/**\r\n * @experimental\r\n * The base block for all binary operation blocks. Receives an input of type\r\n * LeftT, one of type RightT, and outputs a value of type ResultT.\r\n */\r\nexport class FlowGraphBinaryOperationBlock<LeftT, RightT, ResultT> extends FlowGraphCachedOperationBlock<ResultT> {\r\n    /**\r\n     * First input of this block\r\n     */\r\n    a: FlowGraphDataConnection<LeftT>;\r\n    /**\r\n     * Second input of this block\r\n     */\r\n    b: FlowGraphDataConnection<RightT>;\r\n\r\n    constructor(\r\n        leftRichType: RichType<LeftT>,\r\n        rightRichType: RichType<RightT>,\r\n        resultRichType: RichType<ResultT>,\r\n        private _operation: (left: LeftT, right: RightT) => ResultT,\r\n        private _className: string,\r\n        config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        super(resultRichType, config);\r\n        this.a = this.registerDataInput(\"a\", leftRichType);\r\n        this.b = this.registerDataInput(\"b\", rightRichType);\r\n    }\r\n\r\n    /**\r\n     * the operation performed by this block\r\n     * @param context the graph context\r\n     * @returns the result of the operation\r\n     */\r\n    public override _doOperation(context: FlowGraphContext): ResultT {\r\n        return this._operation(this.a.getValue(context), this.b.getValue(context));\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._className;\r\n    }\r\n}\r\n", "import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\r\n/**\r\n * @experimental\r\n * Block that outputs a value of type ResultT, resulting of an operation with no inputs.\r\n */\r\nexport class FlowGraphConstantOperationBlock<ResultT> extends FlowGraphCachedOperationBlock<ResultT> {\r\n    constructor(\r\n        richType: RichType<ResultT>,\r\n        private _operation: () => ResultT,\r\n        private _className: string,\r\n        config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        super(richType, config);\r\n    }\r\n\r\n    /**\r\n     * the operation performed by this block\r\n     * @param _context the graph context\r\n     * @returns the result of the operation\r\n     */\r\n    public override _doOperation(_context: FlowGraphContext): ResultT {\r\n        return this._operation();\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._className;\r\n    }\r\n}\r\n", "import type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\r\n\r\n/**\r\n * @experimental\r\n * The base block for all unary operation blocks. Receives an input of type InputT, and outputs a value of type ResultT.\r\n */\r\nexport class FlowGraphUnaryOperationBlock<InputT, ResultT> extends FlowGraphCachedOperationBlock<ResultT> {\r\n    /**\r\n     * the input of this block\r\n     */\r\n    a: FlowGraphDataConnection<InputT>;\r\n\r\n    constructor(\r\n        inputRichType: RichType<InputT>,\r\n        resultRichType: RichType<ResultT>,\r\n        private _operation: (input: InputT) => ResultT,\r\n        private _className: string,\r\n        config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        super(resultRichType, config);\r\n        this.a = this.registerDataInput(\"a\", inputRichType);\r\n    }\r\n\r\n    /**\r\n     * the operation performed by this block\r\n     * @param context the graph context\r\n     * @returns the result of the operation\r\n     */\r\n    public override _doOperation(context: FlowGraphContext): ResultT {\r\n        return this._operation(this.a.getValue(context));\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._className;\r\n    }\r\n}\r\n", "import type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\r\n/**\r\n * @experimental\r\n * The base block for all ternary operation blocks.\r\n */\r\nexport class FlowGraphTernaryOperationBlock<T1, T2, T3, ResultT> extends FlowGraphCachedOperationBlock<ResultT> {\r\n    /**\r\n     * First input of this block\r\n     */\r\n    a: FlowGraphDataConnection<T1>;\r\n    /**\r\n     * Second input of this block\r\n     */\r\n    b: FlowGraphDataConnection<T2>;\r\n    /**\r\n     * Third input of this block\r\n     */\r\n    c: FlowGraphDataConnection<T3>;\r\n\r\n    constructor(\r\n        t1Type: RichType<T1>,\r\n        t2Type: RichType<T2>,\r\n        t3Type: RichType<T3>,\r\n        resultRichType: RichType<ResultT>,\r\n        private _operation: (a: T1, b: T2, c: T3) => ResultT,\r\n        private _className: string,\r\n        config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        super(resultRichType, config);\r\n        this.a = this.registerDataInput(\"a\", t1Type);\r\n        this.b = this.registerDataInput(\"b\", t2Type);\r\n        this.c = this.registerDataInput(\"c\", t3Type);\r\n    }\r\n\r\n    /**\r\n     * the operation performed by this block\r\n     * @param context the graph context\r\n     * @returns the result of the operation\r\n     */\r\n    public override _doOperation(context: FlowGraphContext): ResultT {\r\n        return this._operation(this.a.getValue(context), this.b.getValue(context), this.c.getValue(context));\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._className;\r\n    }\r\n}\r\n", "import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RichTypeAny, RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeMatrix, RichTypeNumber, RichTypeVector2, RichTypeVector3 } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\r\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport { FlowGraphTernaryOperationBlock } from \"../flowGraphTernaryOperationBlock\";\r\nimport { FlowGraphInteger } from \"../../../flowGraphInteger\";\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getClassNameOf(v: any) {\r\n    if (v.getClassName) {\r\n        return v.getClassName();\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * @internal\r\n * @returns\r\n */\r\nfunction _areSameVectorClass(className: string, className2: string) {\r\n    return (className === \"Vector2\" && className2 === \"Vector2\") || (className === \"Vector3\" && className2 === \"Vector3\") || (className === \"Vector4\" && className2 === \"Vector4\");\r\n}\r\n\r\n/**\r\n * @internal\r\n * @returns\r\n */\r\nfunction _areSameMatrixClass(className: string, className2: string) {\r\n    return className === \"Matrix\" && className2 === \"Matrix\";\r\n}\r\n\r\n/**\r\n * @internal\r\n * @returns\r\n */\r\nfunction _areSameIntegerClass(className: string, className2: string) {\r\n    return className === \"FlowGraphInteger\" && className2 === \"FlowGraphInteger\";\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Polymorphic add block.\r\n */\r\nexport class FlowGraphAddBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicAdd(a, b), FlowGraphAddBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAdd(a: any, b: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameMatrixClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return a.add(b);\r\n        } else {\r\n            return a + b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAddBlock\";\r\n}\r\nRegisterClass(FlowGraphAddBlock.ClassName, FlowGraphAddBlock);\r\n\r\n/**\r\n * @experimental\r\n * Polymorphic add block.\r\n */\r\nexport class FlowGraphSubtractBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicAdd(a, b), FlowGraphSubtractBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAdd(a: any, b: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return a.subtract(b);\r\n        } else if (_areSameMatrixClass(aClassName, bClassName)) {\r\n            return a.add(b.scale(-1));\r\n        } else {\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSubBlock\";\r\n}\r\nRegisterClass(FlowGraphSubtractBlock.ClassName, FlowGraphSubtractBlock);\r\n\r\n/**\r\n * @experimental\r\n * Polymorphic multiply block.\r\n * In case of matrix, it is a component wise multiplication.\r\n */\r\nexport class FlowGraphMultiplyBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMultiply(a, b), FlowGraphMultiplyBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicMultiply(a: any, b: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return a.multiply(b);\r\n        } else if (_areSameMatrixClass(aClassName, bClassName)) {\r\n            return Matrix.FromValues(\r\n                a.m[0] * b.m[0],\r\n                a.m[4] * b.m[4],\r\n                a.m[8] * b.m[8],\r\n                a.m[12] * b.m[12],\r\n                a.m[1] * b.m[1],\r\n                a.m[5] * b.m[5],\r\n                a.m[9] * b.m[9],\r\n                a.m[13] * b.m[13],\r\n                a.m[2] * b.m[2],\r\n                a.m[6] * b.m[6],\r\n                a.m[10] * b.m[10],\r\n                a.m[14] * b.m[14],\r\n                a.m[3] * b.m[3],\r\n                a.m[7] * b.m[7],\r\n                a.m[11] * b.m[11],\r\n                a.m[15] * b.m[15]\r\n            );\r\n        } else {\r\n            return a * b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGMultiplyBlock\";\r\n}\r\nRegisterClass(FlowGraphMultiplyBlock.ClassName, FlowGraphMultiplyBlock);\r\n\r\n/**\r\n * @experimental\r\n * Polymorphic division block.\r\n */\r\nexport class FlowGraphDivideBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicDivide(a, b), FlowGraphDivideBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicDivide(a: any, b: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return a.divide(b);\r\n        } else if (_areSameMatrixClass(aClassName, bClassName)) {\r\n            return Matrix.FromValues(\r\n                a.m[0] / b.m[0],\r\n                a.m[4] / b.m[4],\r\n                a.m[8] / b.m[8],\r\n                a.m[12] / b.m[12],\r\n                a.m[1] / b.m[1],\r\n                a.m[5] / b.m[5],\r\n                a.m[9] / b.m[9],\r\n                a.m[13] / b.m[13],\r\n                a.m[2] / b.m[2],\r\n                a.m[6] / b.m[6],\r\n                a.m[10] / b.m[10],\r\n                a.m[14] / b.m[14],\r\n                a.m[3] / b.m[3],\r\n                a.m[7] / b.m[7],\r\n                a.m[11] / b.m[11],\r\n                a.m[15] / b.m[15]\r\n            );\r\n        } else {\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGDivideBlock\";\r\n}\r\nRegisterClass(FlowGraphDivideBlock.ClassName, FlowGraphDivideBlock);\r\n\r\n/**\r\n * @experimental\r\n * Random number between 0 and 1.\r\n */\r\nexport class FlowGraphRandomBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.random(), FlowGraphRandomBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGRandomBlock\";\r\n}\r\nRegisterClass(FlowGraphRandomBlock.ClassName, FlowGraphRandomBlock);\r\n\r\n/**\r\n * @experimental\r\n * Dot product block.\r\n */\r\nexport class FlowGraphDotBlock extends FlowGraphBinaryOperationBlock<any, any, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeNumber, (a, b) => this._polymorphicDot(a, b), FlowGraphDotBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicDot(a: any, b: any) {\r\n        const className = _getClassNameOf(a);\r\n        switch (className) {\r\n            case \"Vector2\":\r\n                return Vector2.Dot(a, b);\r\n            case \"Vector3\":\r\n                return Vector3.Dot(a, b);\r\n            case \"Vector4\":\r\n                return Vector4.Dot(a, b);\r\n            default:\r\n                throw new Error(`Cannot get dot product of ${a} and ${b}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGDotBlock\";\r\n}\r\nRegisterClass(FlowGraphDotBlock.ClassName, FlowGraphDotBlock);\r\n\r\n/**\r\n * @experimental\r\n * E constant.\r\n */\r\nexport class FlowGraphEBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.E, FlowGraphEBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGEBlock\";\r\n}\r\nRegisterClass(FlowGraphEBlock.ClassName, FlowGraphEBlock);\r\n\r\n/**\r\n * @experimental\r\n * Pi constant.\r\n */\r\nexport class FlowGraphPiBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.PI, FlowGraphPiBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGPIBlock\";\r\n}\r\nRegisterClass(FlowGraphPiBlock.ClassName, FlowGraphPiBlock);\r\n\r\n/**\r\n * @experimental\r\n * Positive inf constant.\r\n */\r\nexport class FlowGraphInfBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Number.POSITIVE_INFINITY, FlowGraphInfBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGInfBlock\";\r\n}\r\nRegisterClass(FlowGraphInfBlock.ClassName, FlowGraphInfBlock);\r\n\r\n/**\r\n * @experimental\r\n * NaN constant.\r\n */\r\nexport class FlowGraphNaNBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Number.NaN, FlowGraphNaNBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGNaNBlock\";\r\n}\r\nRegisterClass(FlowGraphNaNBlock.ClassName, FlowGraphNaNBlock);\r\n\r\nfunction _componentWiseUnaryOperation(a: any, op: (a: any) => any) {\r\n    const aClassName = _getClassNameOf(a);\r\n    switch (aClassName) {\r\n        case \"FlowGraphInteger\":\r\n            return new FlowGraphInteger(op(a.value));\r\n        case \"Vector2\":\r\n            return new Vector2(op(a.x), op(a.y));\r\n        case \"Vector3\":\r\n            return new Vector3(op(a.x), op(a.y), op(a.z));\r\n        case \"Vector4\":\r\n            return new Vector4(op(a.x), op(a.y), op(a.z), op(a.w));\r\n        case \"Matrix\":\r\n            return Matrix.FromValues(\r\n                op(a.m[0]),\r\n                op(a.m[4]),\r\n                op(a.m[8]),\r\n                op(a.m[12]),\r\n                op(a.m[1]),\r\n                op(a.m[5]),\r\n                op(a.m[9]),\r\n                op(a.m[13]),\r\n                op(a.m[2]),\r\n                op(a.m[6]),\r\n                op(a.m[10]),\r\n                op(a.m[14]),\r\n                op(a.m[3]),\r\n                op(a.m[7]),\r\n                op(a.m[11]),\r\n                op(a.m[15])\r\n            );\r\n        default:\r\n            return op(a);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Absolute value block.\r\n */\r\nexport class FlowGraphAbsBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicAbs(a), FlowGraphAbsBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAbs(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.abs);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAbsBlock\";\r\n}\r\nRegisterClass(FlowGraphAbsBlock.ClassName, FlowGraphAbsBlock);\r\n\r\n/**\r\n * @experimental\r\n * Sign block.\r\n */\r\nexport class FlowGraphSignBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSign(a), FlowGraphSignBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicSign(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.sign);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSignBlock\";\r\n}\r\nRegisterClass(FlowGraphSignBlock.ClassName, FlowGraphSignBlock);\r\n\r\n/**\r\n * @experimental\r\n * Truncation block.\r\n */\r\nexport class FlowGraphTruncBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicTrunc(a), FlowGraphTruncBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicTrunc(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.trunc);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGTruncBlock\";\r\n}\r\nRegisterClass(FlowGraphTruncBlock.ClassName, FlowGraphTruncBlock);\r\n\r\n/**\r\n * @experimental\r\n * Floor block.\r\n */\r\nexport class FlowGraphFloorBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicFloor(a), FlowGraphFloorBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicFloor(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.floor);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGFloorBlock\";\r\n}\r\nRegisterClass(FlowGraphFloorBlock.ClassName, FlowGraphFloorBlock);\r\n\r\n/**\r\n * @experimental\r\n * Ceiling block.\r\n */\r\nexport class FlowGraphCeilBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCeiling(a), FlowGraphCeilBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicCeiling(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.ceil);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCeilBlock\";\r\n}\r\nRegisterClass(FlowGraphCeilBlock.ClassName, FlowGraphCeilBlock);\r\n\r\n/**\r\n * @experimental\r\n * Fract block.\r\n */\r\nexport class FlowGraphFractBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicFract(a), FlowGraphFractBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicFract(a: any) {\r\n        return _componentWiseUnaryOperation(a, (a) => a - Math.floor(a));\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGFractBlock\";\r\n}\r\nRegisterClass(FlowGraphFractBlock.ClassName, FlowGraphFractBlock);\r\n\r\n/**\r\n * @experimental\r\n * Negation block.\r\n */\r\nexport class FlowGraphNegBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    /**\r\n     * construct a new negation block.\r\n     * @param config optional configuration\r\n     */\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNeg(a), FlowGraphNegBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicNeg(a: any) {\r\n        return _componentWiseUnaryOperation(a, (a) => -a);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGNegBlock\";\r\n}\r\nRegisterClass(FlowGraphNegBlock.ClassName, FlowGraphNegBlock);\r\n\r\nfunction _componentWiseBinaryOperation(a: any, b: any, op: (a: any, b: any) => any) {\r\n    const aClassName = _getClassNameOf(a);\r\n    switch (aClassName) {\r\n        case \"FlowGraphInteger\":\r\n            return new FlowGraphInteger(op(a.value, b.value));\r\n        case \"Vector2\":\r\n            return new Vector2(op(a.x, b.x), op(a.y, b.y));\r\n        case \"Vector3\":\r\n            return new Vector3(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z));\r\n        case \"Vector4\":\r\n            return new Vector4(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\r\n        case \"Matrix\":\r\n            return Matrix.FromValues(\r\n                op(a.m[0], b.m[0]),\r\n                op(a.m[4], b.m[4]),\r\n                op(a.m[8], b.m[8]),\r\n                op(a.m[12], b.m[12]),\r\n                op(a.m[1], b.m[1]),\r\n                op(a.m[5], b.m[5]),\r\n                op(a.m[9], b.m[9]),\r\n                op(a.m[13], b.m[13]),\r\n                op(a.m[2], b.m[2]),\r\n                op(a.m[6], b.m[6]),\r\n                op(a.m[10], b.m[10]),\r\n                op(a.m[14], b.m[14]),\r\n                op(a.m[3], b.m[3]),\r\n                op(a.m[7], b.m[7]),\r\n                op(a.m[11], b.m[11]),\r\n                op(a.m[15], b.m[15])\r\n            );\r\n        default:\r\n            return op(a, b);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Remainder block.\r\n */\r\nexport class FlowGraphRemainderBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicRemainder(a, b), FlowGraphRemainderBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicRemainder(a: any, b: any) {\r\n        return _componentWiseBinaryOperation(a, b, (a, b) => a % b);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGRemainderBlock\";\r\n}\r\nRegisterClass(FlowGraphRemainderBlock.ClassName, FlowGraphRemainderBlock);\r\n\r\n/**\r\n * @experimental\r\n * Min block.\r\n */\r\nexport class FlowGraphMinBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMin(a, b), FlowGraphMinBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicMin(a: any, b: any) {\r\n        return _componentWiseBinaryOperation(a, b, Math.min);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGMinBlock\";\r\n}\r\nRegisterClass(FlowGraphMinBlock.ClassName, FlowGraphMinBlock);\r\n\r\n/**\r\n * @experimental\r\n * Max block\r\n */\r\nexport class FlowGraphMaxBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMax(a, b), FlowGraphMaxBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicMax(a: any, b: any) {\r\n        return _componentWiseBinaryOperation(a, b, Math.max);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGMaxBlock\";\r\n}\r\nRegisterClass(FlowGraphMaxBlock.ClassName, FlowGraphMaxBlock);\r\n\r\nfunction _clamp(a: number, b: number, c: number) {\r\n    return Math.min(Math.max(a, Math.min(b, c)), Math.max(b, c));\r\n}\r\n\r\nfunction _componentWiseTernaryOperation(a: any, b: any, c: any, op: (a: any, b: any, c: any) => any) {\r\n    const aClassName = _getClassNameOf(a);\r\n    switch (aClassName) {\r\n        case \"FlowGraphInteger\":\r\n            return new FlowGraphInteger(op(a.value, b.value, c.value));\r\n        case \"Vector2\":\r\n            return new Vector2(op(a.x, b.x, c.x), op(a.y, b.y, c.y));\r\n        case \"Vector3\":\r\n            return new Vector3(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z));\r\n        case \"Vector4\":\r\n            return new Vector4(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\r\n        case \"Matrix\":\r\n            return Matrix.FromValues(\r\n                op(a.m[0], b.m[0], c.m[0]),\r\n                op(a.m[4], b.m[4], c.m[4]),\r\n                op(a.m[8], b.m[8], c.m[8]),\r\n                op(a.m[12], b.m[12], c.m[12]),\r\n                op(a.m[1], b.m[1], c.m[1]),\r\n                op(a.m[5], b.m[5], c.m[5]),\r\n                op(a.m[9], b.m[9], c.m[9]),\r\n                op(a.m[13], b.m[13], c.m[13]),\r\n                op(a.m[2], b.m[2], c.m[2]),\r\n                op(a.m[6], b.m[6], c.m[6]),\r\n                op(a.m[10], b.m[10], c.m[10]),\r\n                op(a.m[14], b.m[14], c.m[14]),\r\n                op(a.m[3], b.m[3], c.m[3]),\r\n                op(a.m[7], b.m[7], c.m[7]),\r\n                op(a.m[11], b.m[11], c.m[11]),\r\n                op(a.m[15], b.m[15], c.m[15])\r\n            );\r\n        default:\r\n            return op(a, b, c);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Clamp block.\r\n */\r\nexport class FlowGraphClampBlock extends FlowGraphTernaryOperationBlock<any, any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicClamp(a, b, c), FlowGraphClampBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicClamp(a: any, b: any, c: any) {\r\n        return _componentWiseTernaryOperation(a, b, c, _clamp);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGClampBlock\";\r\n}\r\nRegisterClass(FlowGraphClampBlock.ClassName, FlowGraphClampBlock);\r\n\r\nfunction _saturate(a: number) {\r\n    return Math.min(Math.max(a, 0), 1);\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Saturate block.\r\n */\r\nexport class FlowGraphSaturateBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSaturate(a), FlowGraphSaturateBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicSaturate(a: any) {\r\n        return _componentWiseUnaryOperation(a, _saturate);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSaturateBlock\";\r\n}\r\nRegisterClass(FlowGraphSaturateBlock.ClassName, FlowGraphSaturateBlock);\r\n\r\n/**\r\n * @experimental\r\n * Interpolate block.\r\n */\r\nexport class FlowGraphInterpolateBlock extends FlowGraphTernaryOperationBlock<any, any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicInterpolate(a, b, c), FlowGraphInterpolateBlock.ClassName, config);\r\n    }\r\n\r\n    private _interpolate(a: number, b: number, c: number) {\r\n        return (1 - c) * a + c * b;\r\n    }\r\n\r\n    private _polymorphicInterpolate(a: any, b: any, c: any) {\r\n        return _componentWiseTernaryOperation(a, b, c, this._interpolate);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGInterpolateBlock\";\r\n}\r\nRegisterClass(FlowGraphInterpolateBlock.ClassName, FlowGraphInterpolateBlock);\r\n\r\n/**\r\n * @experimental\r\n * Equals block.\r\n */\r\nexport class FlowGraphEqBlock extends FlowGraphBinaryOperationBlock<any, any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicEq(a, b), FlowGraphEqBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicEq(a: any, b: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameMatrixClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return a.equals(b);\r\n        } else {\r\n            return a === b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGEqBlock\";\r\n}\r\nRegisterClass(FlowGraphEqBlock.ClassName, FlowGraphEqBlock);\r\n\r\nfunction _comparisonOperators(a: any, b: any, op: (a: any, b: any) => boolean) {\r\n    const aClassName = _getClassNameOf(a);\r\n    const bClassName = _getClassNameOf(b);\r\n    if (aClassName === bClassName) {\r\n        // float\r\n        if (aClassName === \"\") {\r\n            return op(a, b);\r\n        } else if (aClassName === \"FlowGraphInteger\") {\r\n            return op(a.value, b.value);\r\n        } else {\r\n            throw new Error(`Cannot compare ${a} and ${b}`);\r\n        }\r\n    }\r\n    throw new Error(`${a} and ${b} are of different types.`);\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Less than block.\r\n */\r\nexport class FlowGraphLessThanBlock extends FlowGraphBinaryOperationBlock<any, any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThan(a, b), FlowGraphLessThanBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicLessThan(a: any, b: any) {\r\n        return _comparisonOperators(a, b, (a, b) => a < b);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGLessThanBlock\";\r\n}\r\nRegisterClass(FlowGraphLessThanBlock.ClassName, FlowGraphLessThanBlock);\r\n\r\n/**\r\n * @experimental\r\n * Less than or equal block.\r\n */\r\nexport class FlowGraphLessThanOrEqualBlock extends FlowGraphBinaryOperationBlock<any, any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThanOrEqual(a, b), FlowGraphLessThanOrEqualBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicLessThanOrEqual(a: any, b: any) {\r\n        return _comparisonOperators(a, b, (a, b) => a <= b);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGLessThanOrEqualBlock\";\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Greater than block.\r\n */\r\nexport class FlowGraphGreaterThanBlock extends FlowGraphBinaryOperationBlock<any, any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThan(a, b), FlowGraphGreaterThanBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicGreaterThan(a: any, b: any) {\r\n        return _comparisonOperators(a, b, (a, b) => a > b);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGGreaterThanBlock\";\r\n}\r\nRegisterClass(FlowGraphGreaterThanBlock.ClassName, FlowGraphGreaterThanBlock);\r\n\r\n/**\r\n * @experimental\r\n * Greater than or equal block.\r\n */\r\nexport class FlowGraphGreaterThanOrEqualBlock extends FlowGraphBinaryOperationBlock<any, any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThanOrEqual(a, b), FlowGraphGreaterThanOrEqualBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicGreaterThanOrEqual(a: any, b: any) {\r\n        return _comparisonOperators(a, b, (a, b) => a >= b);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGGreaterThanOrEqualBlock\";\r\n}\r\nRegisterClass(FlowGraphGreaterThanOrEqualBlock.ClassName, FlowGraphGreaterThanOrEqualBlock);\r\n\r\n/**\r\n * @experimental\r\n * Is NaN block.\r\n */\r\nexport class FlowGraphIsNanBlock extends FlowGraphUnaryOperationBlock<any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsNan(a), FlowGraphIsNanBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicIsNan(a: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        if (aClassName === \"\") {\r\n            return isNaN(a);\r\n        } else if (aClassName === \"FlowGraphInteger\") {\r\n            return isNaN(a.value);\r\n        } else {\r\n            throw new Error(`Cannot get NaN of ${a}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGIsNanBlock\";\r\n}\r\nRegisterClass(FlowGraphIsNanBlock.ClassName, FlowGraphIsNanBlock);\r\n\r\n/**\r\n * @experimental\r\n * Is Inf block.\r\n */\r\nexport class FlowGraphIsInfBlock extends FlowGraphUnaryOperationBlock<any, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsInf(a), FlowGraphIsInfBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicIsInf(a: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        if (aClassName === \"\") {\r\n            return !isFinite(a);\r\n        } else if (aClassName === \"FlowGraphInteger\") {\r\n            return !isFinite(a.value);\r\n        } else {\r\n            throw new Error(`Cannot get isInf of ${a}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGIsInfBlock\";\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Convert degrees to radians block.\r\n */\r\nexport class FlowGraphDegToRadBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicDegToRad(a), FlowGraphDegToRadBlock.ClassName, config);\r\n    }\r\n\r\n    private _degToRad(a: number) {\r\n        return (a * Math.PI) / 180;\r\n    }\r\n\r\n    private _polymorphicDegToRad(a: any) {\r\n        return _componentWiseUnaryOperation(a, this._degToRad);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGDegToRadBlock\";\r\n}\r\nRegisterClass(FlowGraphDegToRadBlock.ClassName, FlowGraphDegToRadBlock);\r\n\r\n/**\r\n * @experimental\r\n * Convert radians to degrees block.\r\n */\r\nexport class FlowGraphRadToDegBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRadToDeg(a), FlowGraphRadToDegBlock.ClassName, config);\r\n    }\r\n\r\n    private _radToDeg(a: number) {\r\n        return (a * 180) / Math.PI;\r\n    }\r\n\r\n    private _polymorphicRadToDeg(a: any) {\r\n        return _componentWiseUnaryOperation(a, this._radToDeg);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGRadToDegBlock\";\r\n}\r\nRegisterClass(FlowGraphRadToDegBlock.ClassName, FlowGraphRadToDegBlock);\r\n\r\n/**\r\n * @experimental\r\n * Sin block.\r\n */\r\nexport class FlowGraphSinBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSin(a), FlowGraphSinBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicSin(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.sin);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSinBlock\";\r\n}\r\nRegisterClass(FlowGraphSinBlock.ClassName, FlowGraphSinBlock);\r\n\r\n/**\r\n * @experimental\r\n * Cos block.\r\n */\r\nexport class FlowGraphCosBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCos(a), FlowGraphCosBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicCos(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.cos);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCosBlock\";\r\n}\r\nRegisterClass(FlowGraphCosBlock.ClassName, FlowGraphCosBlock);\r\n\r\n/**\r\n * @experimental\r\n * Tan block.\r\n */\r\nexport class FlowGraphTanBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicTan(a), FlowGraphTanBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicTan(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.tan);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGTanBlock\";\r\n}\r\nRegisterClass(FlowGraphTanBlock.ClassName, FlowGraphTanBlock);\r\n\r\n/**\r\n * @experimental\r\n * Arcsin block.\r\n */\r\nexport class FlowGraphAsinBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicAsin(a), FlowGraphAsinBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAsin(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.asin);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAsinBlock\";\r\n}\r\nRegisterClass(FlowGraphAsinBlock.ClassName, FlowGraphAsinBlock);\r\n\r\n/**\r\n * @experimental\r\n * Arccos block.\r\n */\r\nexport class FlowGraphAcosBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicAcos(a), FlowGraphAcosBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAcos(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.acos);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAcosBlock\";\r\n}\r\nRegisterClass(FlowGraphAcosBlock.ClassName, FlowGraphAcosBlock);\r\n\r\n/**\r\n * @experimental\r\n * Arctan block.\r\n */\r\nexport class FlowGraphAtanBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicAtan(a), FlowGraphAtanBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAtan(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.atan);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAtanBlock\";\r\n}\r\nRegisterClass(FlowGraphAtanBlock.ClassName, FlowGraphAtanBlock);\r\n\r\n/**\r\n * @experimental\r\n * Arctan2 block.\r\n */\r\nexport class FlowGraphAtan2Block extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicAtan2(a, b), FlowGraphAtan2Block.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAtan2(a: any, b: any) {\r\n        return _componentWiseBinaryOperation(a, b, Math.atan2);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAtan2Block\";\r\n}\r\nRegisterClass(FlowGraphAtan2Block.ClassName, FlowGraphAtan2Block);\r\n\r\n/**\r\n * @experimental\r\n * Hyperbolic sin block.\r\n */\r\nexport class FlowGraphSinhBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSinh(a), FlowGraphSinhBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicSinh(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.sinh);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSinhBlock\";\r\n}\r\nRegisterClass(FlowGraphSinhBlock.ClassName, FlowGraphSinhBlock);\r\n\r\n/**\r\n * @experimental\r\n * Hyperbolic cos block.\r\n */\r\nexport class FlowGraphCoshBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCosh(a), FlowGraphCoshBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicCosh(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.cosh);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCoshBlock\";\r\n}\r\nRegisterClass(FlowGraphCoshBlock.ClassName, FlowGraphCoshBlock);\r\n\r\n/**\r\n * @experimental\r\n * Hyperbolic tan block.\r\n */\r\nexport class FlowGraphTanhBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicTanh(a), FlowGraphTanhBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicTanh(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.tanh);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGTanhBlock\";\r\n}\r\nRegisterClass(FlowGraphTanhBlock.ClassName, FlowGraphTanhBlock);\r\n\r\n/**\r\n * @experimental\r\n * Hyperbolic arcsin block.\r\n */\r\nexport class FlowGraphAsinhBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAsinh(a), FlowGraphAsinhBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAsinh(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.asinh);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAsinhBlock\";\r\n}\r\nRegisterClass(FlowGraphAsinhBlock.ClassName, FlowGraphAsinhBlock);\r\n\r\n/**\r\n * @experimental\r\n * Hyperbolic arccos block.\r\n */\r\nexport class FlowGraphAcoshBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAcosh(a), FlowGraphAcoshBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAcosh(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.acosh);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAcoshBlock\";\r\n}\r\nRegisterClass(FlowGraphAcoshBlock.ClassName, FlowGraphAcoshBlock);\r\n\r\n/**\r\n * @experimental\r\n * Hyperbolic arctan block.\r\n */\r\nexport class FlowGraphAtanhBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAtanh(a), FlowGraphAtanhBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicAtanh(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.atanh);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGAtanhBlock\";\r\n}\r\nRegisterClass(FlowGraphAtanhBlock.ClassName, FlowGraphAtanhBlock);\r\n\r\n/**\r\n * @experimental\r\n * Exponential block.\r\n */\r\nexport class FlowGraphExpBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicExp(a), FlowGraphExpBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicExp(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.exp);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGExpBlock\";\r\n}\r\nRegisterClass(FlowGraphExpBlock.ClassName, FlowGraphExpBlock);\r\n\r\n/**\r\n * @experimental\r\n * Logarithm block.\r\n */\r\nexport class FlowGraphLogBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog(a), FlowGraphLogBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicLog(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.log);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGLogBlock\";\r\n}\r\nRegisterClass(FlowGraphLogBlock.ClassName, FlowGraphLogBlock);\r\n\r\n/**\r\n * @experimental\r\n * Base 2 logarithm block.\r\n */\r\nexport class FlowGraphLog2Block extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog2(a), FlowGraphLog2Block.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicLog2(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.log2);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGLog2Block\";\r\n}\r\nRegisterClass(FlowGraphLog2Block.ClassName, FlowGraphLog2Block);\r\n\r\n/**\r\n * @experimental\r\n * Base 10 logarithm block.\r\n */\r\nexport class FlowGraphLog10Block extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog10(a), FlowGraphLog10Block.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicLog10(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.log10);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGLog10Block\";\r\n}\r\nRegisterClass(FlowGraphLog10Block.ClassName, FlowGraphLog10Block);\r\n\r\n/**\r\n * @experimental\r\n * Square root block.\r\n */\r\nexport class FlowGraphSqrtBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicSqrt(a), FlowGraphSqrtBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicSqrt(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.sqrt);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSqrtBlock\";\r\n}\r\nRegisterClass(FlowGraphSqrtBlock.ClassName, FlowGraphSqrtBlock);\r\n\r\n/**\r\n * @experimental\r\n * Cube root block.\r\n */\r\nexport class FlowGraphCubeRootBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicCubeRoot(a), FlowGraphCubeRootBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicCubeRoot(a: any) {\r\n        return _componentWiseUnaryOperation(a, Math.cbrt);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCubeRootBlock\";\r\n}\r\nRegisterClass(FlowGraphCubeRootBlock.ClassName, FlowGraphCubeRootBlock);\r\n\r\n/**\r\n * @experimental\r\n * Power block.\r\n */\r\nexport class FlowGraphPowBlock extends FlowGraphBinaryOperationBlock<any, any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, RichTypeNumber, (a, b) => this._polymorphicPow(a, b), FlowGraphPowBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicPow(a: any, b: any) {\r\n        return _componentWiseBinaryOperation(a, b, Math.pow);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGPowBlock\";\r\n}\r\nRegisterClass(FlowGraphPowBlock.ClassName, FlowGraphPowBlock);\r\n\r\n/**\r\n * @experimental\r\n * Vector length block.\r\n */\r\nexport class FlowGraphLengthBlock extends FlowGraphUnaryOperationBlock<any, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLength(a), FlowGraphLengthBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicLength(a: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        switch (aClassName) {\r\n            case \"Vector2\":\r\n            case \"Vector3\":\r\n            case \"Vector4\":\r\n                return a.length();\r\n            default:\r\n                throw new Error(`Cannot compute length of value ${a}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGLengthBlock\";\r\n}\r\nRegisterClass(FlowGraphLengthBlock.ClassName, FlowGraphLengthBlock);\r\n\r\n/**\r\n * @experimental\r\n * Vector normalize block.\r\n */\r\nexport class FlowGraphNormalizeBlock extends FlowGraphUnaryOperationBlock<any, any> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNormalize(a), FlowGraphNormalizeBlock.ClassName, config);\r\n    }\r\n\r\n    private _polymorphicNormalize(a: any) {\r\n        const aClassName = _getClassNameOf(a);\r\n        switch (aClassName) {\r\n            case \"Vector2\":\r\n            case \"Vector3\":\r\n            case \"Vector4\":\r\n                return a.normalize();\r\n            default:\r\n                throw new Error(`Cannot normalize value ${a}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGNormalizeBlock\";\r\n}\r\nRegisterClass(FlowGraphNormalizeBlock.ClassName, FlowGraphNormalizeBlock);\r\n\r\n/**\r\n * @experimental\r\n * Cross product block.\r\n */\r\nexport class FlowGraphCrossBlock extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector3, RichTypeVector3, RichTypeVector3, (a, b) => Vector3.Cross(a, b), FlowGraphCrossBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCrossBlock\";\r\n}\r\nRegisterClass(FlowGraphCrossBlock.ClassName, FlowGraphCrossBlock);\r\n\r\n/**\r\n * @experimental\r\n * 2D rotation block.\r\n */\r\nexport class FlowGraphRotate2DBlock extends FlowGraphBinaryOperationBlock<Vector2, number, Vector2> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeVector2, RichTypeNumber, RichTypeVector2, (a, b) => Vector2.Transform(a, Matrix.RotationZ(b)), FlowGraphRotate2DBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGRotate2DBlock\";\r\n}\r\nRegisterClass(FlowGraphRotate2DBlock.ClassName, FlowGraphRotate2DBlock);\r\n\r\n/**\r\n * @experimental\r\n * 3D rotation block.\r\n */\r\nexport class FlowGraphRotate3DBlock extends FlowGraphTernaryOperationBlock<Vector3, Vector3, number, Vector3> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeVector3,\r\n            RichTypeVector3,\r\n            RichTypeNumber,\r\n            RichTypeVector3,\r\n            (a, b, c) => Vector3.TransformCoordinates(a, Matrix.RotationAxis(b, c)),\r\n            FlowGraphRotate3DBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGRotate3DBlock\";\r\n}\r\nRegisterClass(FlowGraphRotate3DBlock.ClassName, FlowGraphRotate3DBlock);\r\n\r\n/**\r\n * @experimental\r\n * Transposes a matrix.\r\n */\r\nexport class FlowGraphTransposeBlock extends FlowGraphUnaryOperationBlock<Matrix, Matrix> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, (a) => Matrix.Transpose(a), FlowGraphTransposeBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGTransposeBlock\";\r\n}\r\nRegisterClass(FlowGraphTransposeBlock.ClassName, FlowGraphTransposeBlock);\r\n\r\n/**\r\n * @experimental\r\n * Gets the determinant of a matrix.\r\n */\r\nexport class FlowGraphDeterminantBlock extends FlowGraphUnaryOperationBlock<Matrix, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeNumber, (a) => a.determinant(), FlowGraphDeterminantBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGDeterminantBlock\";\r\n}\r\nRegisterClass(FlowGraphDeterminantBlock.ClassName, FlowGraphDeterminantBlock);\r\n\r\n/**\r\n * @experimental\r\n * Inverts a matrix.\r\n */\r\nexport class FlowGraphInvertMatrixBlock extends FlowGraphUnaryOperationBlock<Matrix, Matrix> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, (a) => Matrix.Invert(a), FlowGraphInvertMatrixBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGInvertMatrixBlock\";\r\n}\r\nRegisterClass(FlowGraphInvertMatrixBlock.ClassName, FlowGraphInvertMatrixBlock);\r\n\r\n/**\r\n * @experimental\r\n * Multiplies two matrices.\r\n */\r\nexport class FlowGraphMatMulBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (a, b) => b.multiply(a), FlowGraphMatMulBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGMatMulBlock\";\r\n}\r\nRegisterClass(FlowGraphMatMulBlock.ClassName, FlowGraphMatMulBlock);\r\n\r\n/**\r\n * @experimental\r\n * Bitwise NOT operation\r\n */\r\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(~a.value), FlowGraphBitwiseNotBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGBitwiseNotBlock\";\r\n}\r\nRegisterClass(FlowGraphBitwiseNotBlock.ClassName, FlowGraphBitwiseNotBlock);\r\n\r\n/**\r\n * @experimental\r\n * Bitwise AND operation\r\n */\r\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value & b.value),\r\n            FlowGraphBitwiseAndBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGBitwiseAndBlock\";\r\n}\r\nRegisterClass(FlowGraphBitwiseAndBlock.ClassName, FlowGraphBitwiseAndBlock);\r\n\r\n/**\r\n * @experimental\r\n * Bitwise OR operation\r\n */\r\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value | b.value),\r\n            FlowGraphBitwiseOrBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGBitwiseOrBlock\";\r\n}\r\nRegisterClass(FlowGraphBitwiseOrBlock.ClassName, FlowGraphBitwiseOrBlock);\r\n\r\n/**\r\n * @experimental\r\n * Bitwise XOR operation\r\n */\r\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value ^ b.value),\r\n            FlowGraphBitwiseXorBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGBitwiseXorBlock\";\r\n}\r\nRegisterClass(FlowGraphBitwiseXorBlock.ClassName, FlowGraphBitwiseXorBlock);\r\n\r\n/**\r\n * @experimental\r\n * Bitwise left shift operation\r\n */\r\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value << b.value),\r\n            FlowGraphBitwiseLeftShiftBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGBitwiseLeftShiftBlock\";\r\n}\r\nRegisterClass(FlowGraphBitwiseLeftShiftBlock.ClassName, FlowGraphBitwiseLeftShiftBlock);\r\n\r\n/**\r\n * @experimental\r\n * Bitwise right shift operation\r\n */\r\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value >> b.value),\r\n            FlowGraphBitwiseRightShiftBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGBitwiseRightShiftBlock\";\r\n}\r\nRegisterClass(FlowGraphBitwiseRightShiftBlock.ClassName, FlowGraphBitwiseRightShiftBlock);\r\n\r\n/**\r\n * @experimental\r\n * Count leading zeros operation\r\n */\r\nexport class FlowGraphCountLeadingZerosBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(Math.clz32(a.value)), FlowGraphCountLeadingZerosBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCountLeadingZerosBlock\";\r\n}\r\nRegisterClass(FlowGraphCountLeadingZerosBlock.ClassName, FlowGraphCountLeadingZerosBlock);\r\n\r\n/**\r\n * @experimental\r\n * Count trailing zeros operation\r\n */\r\nexport class FlowGraphCountTrailingZerosBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a) => new FlowGraphInteger(a.value ? 31 - Math.clz32(a.value & -a.value) : 32),\r\n            FlowGraphCountTrailingZerosBlock.ClassName,\r\n            config\r\n        );\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCountTrailingZerosBlock\";\r\n}\r\nRegisterClass(FlowGraphCountTrailingZerosBlock.ClassName, FlowGraphCountTrailingZerosBlock);\r\n\r\n/**\r\n * Given a number (which is converted to a 32-bit integer), return the\r\n * number of bits set to one on that number.\r\n * @internal\r\n * @param n\r\n */\r\nfunction _countOnes(n: number) {\r\n    let result = 0;\r\n    while (n) {\r\n        // This zeroes out all bits except for the least significant one.\r\n        // So if the bit is set, it will be 1, otherwise it will be 0.\r\n        result += n & 1;\r\n        // This shifts n's bits to the right by one\r\n        n >>= 1;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Count one bits operation\r\n */\r\nexport class FlowGraphCountOneBitsBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(_countOnes(a.value)), FlowGraphCountOneBitsBlock.ClassName, config);\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGCountOneBitsBlock\";\r\n}\r\nRegisterClass(FlowGraphCountOneBitsBlock.ClassName, FlowGraphCountOneBitsBlock);\r\n", "import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphInteger } from \"../../../flowGraphInteger\";\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport interface IFlowGraphDoNBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The start index for the counter.\r\n     */\r\n    startIndex: FlowGraphInteger;\r\n}\r\n/**\r\n * A block that executes a branch a set number of times.\r\n * @experimental\r\n */\r\nexport class FlowGraphDoNBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: Resets the counter\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Input connection: The maximum number of times the block can be executed.\r\n     */\r\n    public readonly n: FlowGraphDataConnection<FlowGraphInteger>;\r\n    /**\r\n     * Output connection: The number of times the block has been executed.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<FlowGraphInteger>;\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphDoNBlockConfiguration = { startIndex: new FlowGraphInteger(0) }\r\n    ) {\r\n        super(config);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.n = this.registerDataInput(\"n\", RichTypeFlowGraphInteger);\r\n        this.value = this.registerDataOutput(\"value\", RichTypeFlowGraphInteger);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            this.value.setValue(this.config.startIndex, context);\r\n        } else {\r\n            const currentCountValue = this.value.getValue(context);\r\n            if (currentCountValue.value < this.n.getValue(context).value) {\r\n                this.value.setValue(new FlowGraphInteger(currentCountValue.value + 1), context);\r\n                this.out._activateSignal(context);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphDoNBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGDoNBlock\";\r\n}\r\nRegisterClass(FlowGraphDoNBlock.ClassName, FlowGraphDoNBlock);\r\n", "import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n\r\n/**\r\n * @experimental\r\n * The configuration of the FlowGraphGetVariableBlock.\r\n */\r\nexport interface IFlowGraphGetVariableBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The name of the variable to get.\r\n     */\r\n    variableName: string;\r\n}\r\n\r\n/**\r\n * A block that gets the value of a variable.\r\n * @experimental\r\n */\r\nexport class FlowGraphGetVariableBlock<T> extends FlowGraphBlock {\r\n    /**\r\n     * Output connection: The value of the variable.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * Construct a FlowGraphGetVariableBlock.\r\n     * @param config construction parameters\r\n     */\r\n    constructor(public config: IFlowGraphGetVariableBlockConfiguration) {\r\n        super(config);\r\n\r\n        // The output connection has to have the name of the variable.\r\n        this.output = this.registerDataOutput(config.variableName, RichTypeAny);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateOutputs(context: FlowGraphContext): void {\r\n        const variableNameValue = this.config.variableName;\r\n        if (context.hasVariable(variableNameValue)) {\r\n            this.output.setValue(context.getVariable(variableNameValue), context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphGetVariableBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.variableName = this.config.variableName;\r\n    }\r\n\r\n    /**\r\n     * Class name of the block.\r\n     */\r\n    public static ClassName = \"FGGetVariableBlock\";\r\n}\r\nRegisterClass(FlowGraphGetVariableBlock.ClassName, FlowGraphGetVariableBlock);\r\n", "import { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * The variable block configuration.\r\n */\r\nexport interface IFlowGraphSetVariableBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The name of the variable to set.\r\n     */\r\n    variableName: string;\r\n}\r\n\r\n/**\r\n * Block to set a variable.\r\n * @experimental\r\n */\r\nexport class FlowGraphSetVariableBlock<T> extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The value to set on the variable.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<T>;\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config: IFlowGraphSetVariableBlockConfiguration\r\n    ) {\r\n        super(config);\r\n\r\n        this.input = this.registerDataInput(config.variableName, RichTypeAny);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const variableNameValue = this.config.variableName;\r\n        const inputValue = this.input.getValue(context);\r\n        context.setVariable(variableNameValue, inputValue);\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphSetVariableBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGSetVariableBlock\";\r\n}\r\nRegisterClass(FlowGraphSetVariableBlock.ClassName, FlowGraphSetVariableBlock);\r\n", "import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\n/**\r\n * @experimental\r\n * Configuration for the while loop block.\r\n */\r\nexport interface IFlowGraphWhileLoopBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * If true, the loop body will be executed at least once.\r\n     */\r\n    isDo?: boolean;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that executes a branch while a condition is true.\r\n */\r\nexport class FlowGraphWhileLoopBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The condition to evaluate.\r\n     */\r\n    public readonly condition: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Output connection: The loop body.\r\n     */\r\n    public readonly loopBody: FlowGraphSignalConnection;\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public config?: IFlowGraphWhileLoopBlockConfiguration\r\n    ) {\r\n        super(config);\r\n\r\n        this.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\r\n        this.loopBody = this._registerSignalOutput(\"loopBody\");\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        let conditionValue = this.condition.getValue(context);\r\n        if (this.config?.isDo && !conditionValue) {\r\n            this.loopBody._activateSignal(context);\r\n        }\r\n        while (conditionValue) {\r\n            this.loopBody._activateSignal(context);\r\n            conditionValue = this.condition.getValue(context);\r\n        }\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public getClassName(): string {\r\n        return FlowGraphWhileLoopBlock.ClassName;\r\n    }\r\n\r\n    /**\r\n     * the class name of the block.\r\n     */\r\n    public static ClassName = \"FGWhileLoopBlock\";\r\n\r\n    /**\r\n     * Serializes the block to a JSON object.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.isDo = this.config?.isDo;\r\n    }\r\n}\r\nRegisterClass(FlowGraphWhileLoopBlock.ClassName, FlowGraphWhileLoopBlock);\r\n", "import type { Nullable, DeepImmutableObject } from \"../types\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport { Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { BoundingInfo } from \"core/Culling/boundingInfo\";\r\n\r\ndeclare module \"./mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Gets or sets a boolean defining if we want picking to pick thin instances as well\r\n         */\r\n        thinInstanceEnablePicking: boolean;\r\n\r\n        /**\r\n         * Indicates that a buffer created as static should be recreated if the buffer is updated (by calling thinInstanceSetMatrixAt or thinInstanceSetAttributeAt, for eg.)\r\n         * If this flag is false (the default behavior), a buffer created as \"static\" won't show any update done to it, and will stay the same as it was created.\r\n         * Note however that recreating a buffer each time there's a change will have some performance cost, that's why it is set to false by default.\r\n         * You should set this flag to true only if your static buffers should change infrequently. If they change frequently, you should create your buffers as \"dynamic\" instead.\r\n         */\r\n        thinInstanceAllowAutomaticStaticBufferRecreation: boolean;\r\n\r\n        /**\r\n         * Creates a new thin instance\r\n         * @param matrix the matrix or array of matrices (position, rotation, scale) of the thin instance(s) to create\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         * @returns the thin instance index number. If you pass an array of matrices, other instance indexes are index+1, index+2, etc\r\n         */\r\n        thinInstanceAdd(matrix: DeepImmutableObject<Matrix> | Array<DeepImmutableObject<Matrix>>, refresh?: boolean): number;\r\n\r\n        /**\r\n         * Adds the transformation (matrix) of the current mesh as a thin instance\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         * @returns the thin instance index number\r\n         */\r\n        thinInstanceAddSelf(refresh?: boolean): number;\r\n\r\n        /**\r\n         * Registers a custom attribute to be used with thin instances\r\n         * @param kind name of the attribute\r\n         * @param stride size in floats of the attribute\r\n         */\r\n        thinInstanceRegisterAttribute(kind: string, stride: number): void;\r\n\r\n        /**\r\n         * Sets the matrix of a thin instance\r\n         * @param index index of the thin instance\r\n         * @param matrix matrix to set\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         */\r\n        thinInstanceSetMatrixAt(index: number, matrix: DeepImmutableObject<Matrix>, refresh?: boolean): void;\r\n\r\n        /**\r\n         * Sets the value of a custom attribute for a thin instance\r\n         * @param kind name of the attribute\r\n         * @param index index of the thin instance\r\n         * @param value value to set\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         */\r\n        thinInstanceSetAttributeAt(kind: string, index: number, value: Array<number>, refresh?: boolean): void;\r\n\r\n        /**\r\n         * Gets / sets the number of thin instances to display. Note that you can't set a number higher than what the underlying buffer can handle.\r\n         */\r\n        thinInstanceCount: number;\r\n\r\n        /**\r\n         * Sets a buffer to be used with thin instances. This method is a faster way to setup multiple instances than calling thinInstanceAdd repeatedly\r\n         * @param kind name of the attribute. Use \"matrix\" to setup the buffer of matrices\r\n         * @param buffer buffer to set\r\n         * @param stride size in floats of each value of the buffer\r\n         * @param staticBuffer indicates that the buffer is static, so that you won't change it after it is set (better performances - true by default)\r\n         */\r\n        thinInstanceSetBuffer(kind: string, buffer: Nullable<Float32Array>, stride?: number, staticBuffer?: boolean): void;\r\n\r\n        /**\r\n         * Gets the list of world matrices\r\n         * @returns an array containing all the world matrices from the thin instances\r\n         */\r\n        thinInstanceGetWorldMatrices(): Matrix[];\r\n\r\n        /**\r\n         * Synchronize the gpu buffers with a thin instance buffer. Call this method if you update later on the buffers passed to thinInstanceSetBuffer\r\n         * @param kind name of the attribute to update. Use \"matrix\" to update the buffer of matrices\r\n         */\r\n        thinInstanceBufferUpdated(kind: string): void;\r\n\r\n        /**\r\n         * Applies a partial update to a buffer directly on the GPU\r\n         * Note that the buffer located on the CPU is NOT updated! It's up to you to update it (or not) with the same data you pass to this method\r\n         * @param kind name of the attribute to update. Use \"matrix\" to update the buffer of matrices\r\n         * @param data the data to set in the GPU buffer\r\n         * @param offset the offset in the GPU buffer where to update the data\r\n         */\r\n        thinInstancePartialBufferUpdate(kind: string, data: Float32Array, offset: number): void;\r\n\r\n        /**\r\n         * Refreshes the bounding info, taking into account all the thin instances defined\r\n         * @param forceRefreshParentInfo true to force recomputing the mesh bounding info and use it to compute the aggregated bounding info\r\n         * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n         * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n         */\r\n        thinInstanceRefreshBoundingInfo(forceRefreshParentInfo?: boolean, applySkeleton?: boolean, applyMorph?: boolean): void;\r\n\r\n        /** @internal */\r\n        _thinInstanceInitializeUserStorage(): void;\r\n\r\n        /** @internal */\r\n        _thinInstanceUpdateBufferSize(kind: string, numInstances?: number): void;\r\n\r\n        /** @internal */\r\n        _thinInstanceCreateMatrixBuffer(kind: string, buffer: Nullable<Float32Array>, staticBuffer: boolean): Buffer;\r\n\r\n        /** @internal */\r\n        _thinInstanceRecreateBuffer(kind: string, staticBuffer?: boolean): void;\r\n\r\n        /** @internal */\r\n        _userThinInstanceBuffersStorage: {\r\n            data: { [key: string]: Float32Array };\r\n            sizes: { [key: string]: number };\r\n            vertexBuffers: { [key: string]: Nullable<VertexBuffer> };\r\n            strides: { [key: string]: number };\r\n        };\r\n    }\r\n}\r\n\r\nMesh.prototype.thinInstanceAdd = function (matrix: DeepImmutableObject<Matrix> | Array<DeepImmutableObject<Matrix>>, refresh: boolean = true): number {\r\n    if (!this.getScene().getEngine().getCaps().instancedArrays) {\r\n        Logger.Error(\"Thin Instances are not supported on this device as Instanced Array extension not supported\");\r\n        return -1;\r\n    }\r\n\r\n    this._thinInstanceUpdateBufferSize(\"matrix\", Array.isArray(matrix) ? matrix.length : 1);\r\n\r\n    const index = this._thinInstanceDataStorage.instancesCount;\r\n\r\n    if (Array.isArray(matrix)) {\r\n        for (let i = 0; i < matrix.length; ++i) {\r\n            this.thinInstanceSetMatrixAt(this._thinInstanceDataStorage.instancesCount++, matrix[i], i === matrix.length - 1 && refresh);\r\n        }\r\n    } else {\r\n        this.thinInstanceSetMatrixAt(this._thinInstanceDataStorage.instancesCount++, matrix, refresh);\r\n    }\r\n\r\n    return index;\r\n};\r\n\r\nMesh.prototype.thinInstanceAddSelf = function (refresh: boolean = true): number {\r\n    return this.thinInstanceAdd(Matrix.IdentityReadOnly, refresh);\r\n};\r\n\r\nMesh.prototype.thinInstanceRegisterAttribute = function (kind: string, stride: number): void {\r\n    // preserve backward compatibility\r\n    if (kind === VertexBuffer.ColorKind) {\r\n        kind = VertexBuffer.ColorInstanceKind;\r\n    }\r\n\r\n    this.removeVerticesData(kind);\r\n\r\n    this._thinInstanceInitializeUserStorage();\r\n\r\n    this._userThinInstanceBuffersStorage.strides[kind] = stride;\r\n    this._userThinInstanceBuffersStorage.sizes[kind] = stride * Math.max(32, this._thinInstanceDataStorage.instancesCount); // Initial size\r\n    this._userThinInstanceBuffersStorage.data[kind] = new Float32Array(this._userThinInstanceBuffersStorage.sizes[kind]);\r\n    this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userThinInstanceBuffersStorage.data[kind], kind, true, false, stride, true);\r\n\r\n    this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n};\r\n\r\nMesh.prototype.thinInstanceSetMatrixAt = function (index: number, matrix: DeepImmutableObject<Matrix>, refresh: boolean = true): boolean {\r\n    if (!this._thinInstanceDataStorage.matrixData || index >= this._thinInstanceDataStorage.instancesCount) {\r\n        return false;\r\n    }\r\n\r\n    const matrixData = this._thinInstanceDataStorage.matrixData;\r\n\r\n    matrix.copyToArray(matrixData, index * 16);\r\n\r\n    if (this._thinInstanceDataStorage.worldMatrices) {\r\n        this._thinInstanceDataStorage.worldMatrices[index] = matrix as Matrix;\r\n    }\r\n\r\n    if (refresh) {\r\n        this.thinInstanceBufferUpdated(\"matrix\");\r\n\r\n        if (!this.doNotSyncBoundingInfo) {\r\n            this.thinInstanceRefreshBoundingInfo(false);\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nMesh.prototype.thinInstanceSetAttributeAt = function (kind: string, index: number, value: Array<number>, refresh: boolean = true): boolean {\r\n    // preserve backward compatibility\r\n    if (kind === VertexBuffer.ColorKind) {\r\n        kind = VertexBuffer.ColorInstanceKind;\r\n    }\r\n\r\n    if (!this._userThinInstanceBuffersStorage || !this._userThinInstanceBuffersStorage.data[kind] || index >= this._thinInstanceDataStorage.instancesCount) {\r\n        return false;\r\n    }\r\n\r\n    this._thinInstanceUpdateBufferSize(kind, 0); // make sur the buffer for the kind attribute is big enough\r\n\r\n    this._userThinInstanceBuffersStorage.data[kind].set(value, index * this._userThinInstanceBuffersStorage.strides[kind]);\r\n\r\n    if (refresh) {\r\n        this.thinInstanceBufferUpdated(kind);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nObject.defineProperty(Mesh.prototype, \"thinInstanceCount\", {\r\n    get: function (this: Mesh) {\r\n        return this._thinInstanceDataStorage.instancesCount;\r\n    },\r\n    set: function (this: Mesh, value: number) {\r\n        const matrixData = this._thinInstanceDataStorage.matrixData ?? this.source?._thinInstanceDataStorage.matrixData;\r\n        const numMaxInstances = matrixData ? matrixData.length / 16 : 0;\r\n\r\n        if (value <= numMaxInstances) {\r\n            this._thinInstanceDataStorage.instancesCount = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nMesh.prototype._thinInstanceCreateMatrixBuffer = function (kind: string, buffer: Float32Array, staticBuffer: boolean = true): Buffer {\r\n    const matrixBuffer = new Buffer(this.getEngine(), buffer, !staticBuffer, 16, false, true);\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        this.setVerticesBuffer(matrixBuffer.createVertexBuffer(kind + i, i * 4, 4));\r\n    }\r\n\r\n    return matrixBuffer;\r\n};\r\n\r\nMesh.prototype.thinInstanceSetBuffer = function (kind: string, buffer: Nullable<Float32Array>, stride: number = 0, staticBuffer: boolean = true): void {\r\n    stride = stride || 16;\r\n\r\n    if (kind === \"matrix\") {\r\n        this._thinInstanceDataStorage.matrixBuffer?.dispose();\r\n        this._thinInstanceDataStorage.matrixBuffer = null;\r\n        this._thinInstanceDataStorage.matrixBufferSize = buffer ? buffer.length : 32 * stride;\r\n        this._thinInstanceDataStorage.matrixData = buffer;\r\n        this._thinInstanceDataStorage.worldMatrices = null;\r\n\r\n        if (buffer !== null) {\r\n            this._thinInstanceDataStorage.instancesCount = buffer.length / stride;\r\n            this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", buffer, staticBuffer);\r\n\r\n            if (!this.doNotSyncBoundingInfo) {\r\n                this.thinInstanceRefreshBoundingInfo(false);\r\n            }\r\n        } else {\r\n            this._thinInstanceDataStorage.instancesCount = 0;\r\n            if (!this.doNotSyncBoundingInfo) {\r\n                // mesh has no more thin instances, so need to recompute the bounding box because it's the regular mesh that will now be displayed\r\n                this.refreshBoundingInfo();\r\n            }\r\n        }\r\n    } else if (kind === \"previousMatrix\") {\r\n        this._thinInstanceDataStorage.previousMatrixBuffer?.dispose();\r\n        this._thinInstanceDataStorage.previousMatrixBuffer = null;\r\n        this._thinInstanceDataStorage.previousMatrixData = buffer;\r\n        if (buffer !== null) {\r\n            this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", buffer, staticBuffer);\r\n        }\r\n    } else {\r\n        // color for instanced mesh is ColorInstanceKind and not ColorKind because of native that needs to do the differenciation\r\n        // hot switching kind here to preserve backward compatibility\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        if (buffer === null) {\r\n            if (this._userThinInstanceBuffersStorage?.data[kind]) {\r\n                this.removeVerticesData(kind);\r\n                delete this._userThinInstanceBuffersStorage.data[kind];\r\n                delete this._userThinInstanceBuffersStorage.strides[kind];\r\n                delete this._userThinInstanceBuffersStorage.sizes[kind];\r\n                delete this._userThinInstanceBuffersStorage.vertexBuffers[kind];\r\n            }\r\n        } else {\r\n            this._thinInstanceInitializeUserStorage();\r\n\r\n            this._userThinInstanceBuffersStorage.data[kind] = buffer;\r\n            this._userThinInstanceBuffersStorage.strides[kind] = stride;\r\n            this._userThinInstanceBuffersStorage.sizes[kind] = buffer.length;\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), buffer, kind, !staticBuffer, false, stride, true);\r\n\r\n            this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype.thinInstanceBufferUpdated = function (kind: string): void {\r\n    if (kind === \"matrix\") {\r\n        if (this.thinInstanceAllowAutomaticStaticBufferRecreation && this._thinInstanceDataStorage.matrixBuffer && !this._thinInstanceDataStorage.matrixBuffer.isUpdatable()) {\r\n            this._thinInstanceRecreateBuffer(kind);\r\n        }\r\n        this._thinInstanceDataStorage.matrixBuffer?.updateDirectly(this._thinInstanceDataStorage.matrixData!, 0, this._thinInstanceDataStorage.instancesCount);\r\n    } else if (kind === \"previousMatrix\") {\r\n        if (\r\n            this.thinInstanceAllowAutomaticStaticBufferRecreation &&\r\n            this._thinInstanceDataStorage.previousMatrixBuffer &&\r\n            !this._thinInstanceDataStorage.previousMatrixBuffer.isUpdatable()\r\n        ) {\r\n            this._thinInstanceRecreateBuffer(kind);\r\n        }\r\n        this._thinInstanceDataStorage.previousMatrixBuffer?.updateDirectly(this._thinInstanceDataStorage.previousMatrixData!, 0, this._thinInstanceDataStorage.instancesCount);\r\n    } else {\r\n        // preserve backward compatibility\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        if (this._userThinInstanceBuffersStorage?.vertexBuffers[kind]) {\r\n            if (this.thinInstanceAllowAutomaticStaticBufferRecreation && !this._userThinInstanceBuffersStorage.vertexBuffers[kind]!.isUpdatable()) {\r\n                this._thinInstanceRecreateBuffer(kind);\r\n            }\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind]!.updateDirectly(this._userThinInstanceBuffersStorage.data[kind], 0);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype.thinInstancePartialBufferUpdate = function (kind: string, data: Float32Array, offset: number): void {\r\n    if (kind === \"matrix\") {\r\n        if (this._thinInstanceDataStorage.matrixBuffer) {\r\n            this._thinInstanceDataStorage.matrixBuffer.updateDirectly(data, offset);\r\n        }\r\n    } else {\r\n        // preserve backward compatibility\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        if (this._userThinInstanceBuffersStorage?.vertexBuffers[kind]) {\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind]!.updateDirectly(data, offset);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype.thinInstanceGetWorldMatrices = function (): Matrix[] {\r\n    if (!this._thinInstanceDataStorage.matrixData || !this._thinInstanceDataStorage.matrixBuffer) {\r\n        return [];\r\n    }\r\n    const matrixData = this._thinInstanceDataStorage.matrixData;\r\n\r\n    if (!this._thinInstanceDataStorage.worldMatrices) {\r\n        this._thinInstanceDataStorage.worldMatrices = [] as Matrix[];\r\n\r\n        for (let i = 0; i < this._thinInstanceDataStorage.instancesCount; ++i) {\r\n            this._thinInstanceDataStorage.worldMatrices[i] = Matrix.FromArray(matrixData, i * 16);\r\n        }\r\n    }\r\n\r\n    return this._thinInstanceDataStorage.worldMatrices;\r\n};\r\n\r\nMesh.prototype.thinInstanceRefreshBoundingInfo = function (forceRefreshParentInfo: boolean = false, applySkeleton: boolean = false, applyMorph: boolean = false) {\r\n    if (!this._thinInstanceDataStorage.matrixData || !this._thinInstanceDataStorage.matrixBuffer) {\r\n        return;\r\n    }\r\n\r\n    const vectors = this._thinInstanceDataStorage.boundingVectors;\r\n\r\n    if (forceRefreshParentInfo || !this.rawBoundingInfo) {\r\n        vectors.length = 0;\r\n        this.refreshBoundingInfo(applySkeleton, applyMorph);\r\n        const boundingInfo = this.getBoundingInfo();\r\n        this.rawBoundingInfo = new BoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\r\n    }\r\n\r\n    const boundingInfo = this.getBoundingInfo();\r\n    const matrixData = this._thinInstanceDataStorage.matrixData;\r\n\r\n    if (vectors.length === 0) {\r\n        for (let v = 0; v < boundingInfo.boundingBox.vectors.length; ++v) {\r\n            vectors.push(boundingInfo.boundingBox.vectors[v].clone());\r\n        }\r\n    }\r\n\r\n    TmpVectors.Vector3[0].setAll(Number.POSITIVE_INFINITY); // min\r\n    TmpVectors.Vector3[1].setAll(Number.NEGATIVE_INFINITY); // max\r\n\r\n    for (let i = 0; i < this._thinInstanceDataStorage.instancesCount; ++i) {\r\n        Matrix.FromArrayToRef(matrixData, i * 16, TmpVectors.Matrix[0]);\r\n\r\n        for (let v = 0; v < vectors.length; ++v) {\r\n            Vector3.TransformCoordinatesToRef(vectors[v], TmpVectors.Matrix[0], TmpVectors.Vector3[2]);\r\n            TmpVectors.Vector3[0].minimizeInPlace(TmpVectors.Vector3[2]);\r\n            TmpVectors.Vector3[1].maximizeInPlace(TmpVectors.Vector3[2]);\r\n        }\r\n    }\r\n\r\n    boundingInfo.reConstruct(TmpVectors.Vector3[0], TmpVectors.Vector3[1]);\r\n\r\n    this._updateBoundingInfo();\r\n};\r\n\r\nMesh.prototype._thinInstanceRecreateBuffer = function (kind: string, staticBuffer: boolean = true) {\r\n    if (kind === \"matrix\") {\r\n        this._thinInstanceDataStorage.matrixBuffer?.dispose();\r\n        this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", this._thinInstanceDataStorage.matrixData, staticBuffer);\r\n    } else if (kind === \"previousMatrix\") {\r\n        if (this._scene.needsPreviousWorldMatrices) {\r\n            this._thinInstanceDataStorage.previousMatrixBuffer?.dispose();\r\n            this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\r\n                \"previousWorld\",\r\n                this._thinInstanceDataStorage.previousMatrixData ?? this._thinInstanceDataStorage.matrixData,\r\n                staticBuffer\r\n            );\r\n        }\r\n    } else {\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        this._userThinInstanceBuffersStorage.vertexBuffers[kind]?.dispose();\r\n        this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(\r\n            this.getEngine(),\r\n            this._userThinInstanceBuffersStorage.data[kind],\r\n            kind,\r\n            !staticBuffer,\r\n            false,\r\n            this._userThinInstanceBuffersStorage.strides[kind],\r\n            true\r\n        );\r\n        this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n    }\r\n};\r\n\r\nMesh.prototype._thinInstanceUpdateBufferSize = function (kind: string, numInstances: number = 1) {\r\n    // preserve backward compatibility\r\n    if (kind === VertexBuffer.ColorKind) {\r\n        kind = VertexBuffer.ColorInstanceKind;\r\n    }\r\n\r\n    const kindIsMatrix = kind === \"matrix\";\r\n\r\n    if (!kindIsMatrix && (!this._userThinInstanceBuffersStorage || !this._userThinInstanceBuffersStorage.strides[kind])) {\r\n        return;\r\n    }\r\n\r\n    const stride = kindIsMatrix ? 16 : this._userThinInstanceBuffersStorage.strides[kind];\r\n    const currentSize = kindIsMatrix ? this._thinInstanceDataStorage.matrixBufferSize : this._userThinInstanceBuffersStorage.sizes[kind];\r\n    let data = kindIsMatrix ? this._thinInstanceDataStorage.matrixData : this._userThinInstanceBuffersStorage.data[kind];\r\n\r\n    const bufferSize = (this._thinInstanceDataStorage.instancesCount + numInstances) * stride;\r\n\r\n    let newSize = currentSize;\r\n\r\n    while (newSize < bufferSize) {\r\n        newSize *= 2;\r\n    }\r\n\r\n    if (!data || currentSize != newSize) {\r\n        if (!data) {\r\n            data = new Float32Array(newSize);\r\n        } else {\r\n            const newData = new Float32Array(newSize);\r\n            newData.set(data, 0);\r\n            data = newData;\r\n        }\r\n\r\n        if (kindIsMatrix) {\r\n            this._thinInstanceDataStorage.matrixBuffer?.dispose();\r\n            this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", data, false);\r\n            this._thinInstanceDataStorage.matrixData = data;\r\n            this._thinInstanceDataStorage.matrixBufferSize = newSize;\r\n            if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData) {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer?.dispose();\r\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", data, false);\r\n            }\r\n        } else {\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind]?.dispose();\r\n\r\n            this._userThinInstanceBuffersStorage.data[kind] = data;\r\n            this._userThinInstanceBuffersStorage.sizes[kind] = newSize;\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), data, kind, true, false, stride, true);\r\n\r\n            this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype._thinInstanceInitializeUserStorage = function () {\r\n    if (!this._userThinInstanceBuffersStorage) {\r\n        this._userThinInstanceBuffersStorage = {\r\n            data: {},\r\n            sizes: {},\r\n            vertexBuffers: {},\r\n            strides: {},\r\n        };\r\n    }\r\n};\r\n\r\nMesh.prototype._disposeThinInstanceSpecificData = function () {\r\n    if (this._thinInstanceDataStorage?.matrixBuffer) {\r\n        this._thinInstanceDataStorage.matrixBuffer.dispose();\r\n        this._thinInstanceDataStorage.matrixBuffer = null;\r\n    }\r\n};\r\n"],
  "mappings": "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",
  "names": ["SceneLoaderAnimationGroupLoadingMode", "request", "scene", "_CameraProperty", "AnimationKeyInterpolation", "drawWrapper", "index", "targetedAnimations", "_a", "decoder", "geometry", "data", "data", "_a", "_b", "_c", "transformNode", "FlowGraphConnectionType", "FlowGraphState", "TimerState", "a", "b", "boundingInfo"]
}
